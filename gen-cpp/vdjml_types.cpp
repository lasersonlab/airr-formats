/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "vdjml_types.h"

#include <algorithm>
#include <ostream>

#include <thrift/TToString.h>

namespace vdjserver {

int _kAminoacidValues[] = {
  Aminoacid::Aminoacid__,
  Aminoacid::Aminoacid_A,
  Aminoacid::Aminoacid_Ala,
  Aminoacid::Aminoacid_Arg,
  Aminoacid::Aminoacid_Asn,
  Aminoacid::Aminoacid_Asp,
  Aminoacid::Aminoacid_C,
  Aminoacid::Aminoacid_Cys,
  Aminoacid::Aminoacid_D,
  Aminoacid::Aminoacid_E,
  Aminoacid::Aminoacid_F,
  Aminoacid::Aminoacid_G,
  Aminoacid::Aminoacid_Gln,
  Aminoacid::Aminoacid_Glu,
  Aminoacid::Aminoacid_Gly,
  Aminoacid::Aminoacid_H,
  Aminoacid::Aminoacid_His,
  Aminoacid::Aminoacid_I,
  Aminoacid::Aminoacid_Ile,
  Aminoacid::Aminoacid_K,
  Aminoacid::Aminoacid_L,
  Aminoacid::Aminoacid_Leu,
  Aminoacid::Aminoacid_Lys,
  Aminoacid::Aminoacid_M,
  Aminoacid::Aminoacid_Met,
  Aminoacid::Aminoacid_N,
  Aminoacid::Aminoacid_P,
  Aminoacid::Aminoacid_Phe,
  Aminoacid::Aminoacid_Pro,
  Aminoacid::Aminoacid_Q,
  Aminoacid::Aminoacid_R,
  Aminoacid::Aminoacid_S,
  Aminoacid::Aminoacid_Ser,
  Aminoacid::Aminoacid_Stop,
  Aminoacid::Aminoacid_T,
  Aminoacid::Aminoacid_Thr,
  Aminoacid::Aminoacid_Trp,
  Aminoacid::Aminoacid_Tyr,
  Aminoacid::Aminoacid_V,
  Aminoacid::Aminoacid_Val,
  Aminoacid::Aminoacid_W,
  Aminoacid::Aminoacid_X,
  Aminoacid::Aminoacid_Y,
  Aminoacid::Aminoacid_a,
  Aminoacid::Aminoacid_c,
  Aminoacid::Aminoacid_d,
  Aminoacid::Aminoacid_e,
  Aminoacid::Aminoacid_f,
  Aminoacid::Aminoacid_g,
  Aminoacid::Aminoacid_h,
  Aminoacid::Aminoacid_i,
  Aminoacid::Aminoacid_k,
  Aminoacid::Aminoacid_l,
  Aminoacid::Aminoacid_m,
  Aminoacid::Aminoacid_n,
  Aminoacid::Aminoacid_p,
  Aminoacid::Aminoacid_q,
  Aminoacid::Aminoacid_r,
  Aminoacid::Aminoacid_s,
  Aminoacid::Aminoacid_t,
  Aminoacid::Aminoacid_v,
  Aminoacid::Aminoacid_w,
  Aminoacid::Aminoacid_x,
  Aminoacid::Aminoacid_y
};
const char* _kAminoacidNames[] = {
  "Aminoacid__",
  "Aminoacid_A",
  "Aminoacid_Ala",
  "Aminoacid_Arg",
  "Aminoacid_Asn",
  "Aminoacid_Asp",
  "Aminoacid_C",
  "Aminoacid_Cys",
  "Aminoacid_D",
  "Aminoacid_E",
  "Aminoacid_F",
  "Aminoacid_G",
  "Aminoacid_Gln",
  "Aminoacid_Glu",
  "Aminoacid_Gly",
  "Aminoacid_H",
  "Aminoacid_His",
  "Aminoacid_I",
  "Aminoacid_Ile",
  "Aminoacid_K",
  "Aminoacid_L",
  "Aminoacid_Leu",
  "Aminoacid_Lys",
  "Aminoacid_M",
  "Aminoacid_Met",
  "Aminoacid_N",
  "Aminoacid_P",
  "Aminoacid_Phe",
  "Aminoacid_Pro",
  "Aminoacid_Q",
  "Aminoacid_R",
  "Aminoacid_S",
  "Aminoacid_Ser",
  "Aminoacid_Stop",
  "Aminoacid_T",
  "Aminoacid_Thr",
  "Aminoacid_Trp",
  "Aminoacid_Tyr",
  "Aminoacid_V",
  "Aminoacid_Val",
  "Aminoacid_W",
  "Aminoacid_X",
  "Aminoacid_Y",
  "Aminoacid_a",
  "Aminoacid_c",
  "Aminoacid_d",
  "Aminoacid_e",
  "Aminoacid_f",
  "Aminoacid_g",
  "Aminoacid_h",
  "Aminoacid_i",
  "Aminoacid_k",
  "Aminoacid_l",
  "Aminoacid_m",
  "Aminoacid_n",
  "Aminoacid_p",
  "Aminoacid_q",
  "Aminoacid_r",
  "Aminoacid_s",
  "Aminoacid_t",
  "Aminoacid_v",
  "Aminoacid_w",
  "Aminoacid_x",
  "Aminoacid_y"
};
const std::map<int, const char*> _Aminoacid_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(64, _kAminoacidValues, _kAminoacidNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

int _kNucleotide_ambiguousValues[] = {
  Nucleotide_ambiguous::Nucleotide_ambiguous_B,
  Nucleotide_ambiguous::Nucleotide_ambiguous_D,
  Nucleotide_ambiguous::Nucleotide_ambiguous_H,
  Nucleotide_ambiguous::Nucleotide_ambiguous_K,
  Nucleotide_ambiguous::Nucleotide_ambiguous_M,
  Nucleotide_ambiguous::Nucleotide_ambiguous_N,
  Nucleotide_ambiguous::Nucleotide_ambiguous_R,
  Nucleotide_ambiguous::Nucleotide_ambiguous_S,
  Nucleotide_ambiguous::Nucleotide_ambiguous_V,
  Nucleotide_ambiguous::Nucleotide_ambiguous_W,
  Nucleotide_ambiguous::Nucleotide_ambiguous_Y,
  Nucleotide_ambiguous::Nucleotide_ambiguous_b,
  Nucleotide_ambiguous::Nucleotide_ambiguous_d,
  Nucleotide_ambiguous::Nucleotide_ambiguous_h,
  Nucleotide_ambiguous::Nucleotide_ambiguous_k,
  Nucleotide_ambiguous::Nucleotide_ambiguous_m,
  Nucleotide_ambiguous::Nucleotide_ambiguous_n,
  Nucleotide_ambiguous::Nucleotide_ambiguous_r,
  Nucleotide_ambiguous::Nucleotide_ambiguous_s,
  Nucleotide_ambiguous::Nucleotide_ambiguous_v,
  Nucleotide_ambiguous::Nucleotide_ambiguous_w,
  Nucleotide_ambiguous::Nucleotide_ambiguous_y
};
const char* _kNucleotide_ambiguousNames[] = {
  "Nucleotide_ambiguous_B",
  "Nucleotide_ambiguous_D",
  "Nucleotide_ambiguous_H",
  "Nucleotide_ambiguous_K",
  "Nucleotide_ambiguous_M",
  "Nucleotide_ambiguous_N",
  "Nucleotide_ambiguous_R",
  "Nucleotide_ambiguous_S",
  "Nucleotide_ambiguous_V",
  "Nucleotide_ambiguous_W",
  "Nucleotide_ambiguous_Y",
  "Nucleotide_ambiguous_b",
  "Nucleotide_ambiguous_d",
  "Nucleotide_ambiguous_h",
  "Nucleotide_ambiguous_k",
  "Nucleotide_ambiguous_m",
  "Nucleotide_ambiguous_n",
  "Nucleotide_ambiguous_r",
  "Nucleotide_ambiguous_s",
  "Nucleotide_ambiguous_v",
  "Nucleotide_ambiguous_w",
  "Nucleotide_ambiguous_y"
};
const std::map<int, const char*> _Nucleotide_ambiguous_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(22, _kNucleotide_ambiguousValues, _kNucleotide_ambiguousNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

int _kNucleotide_definedValues[] = {
  Nucleotide_defined::Nucleotide_defined_A,
  Nucleotide_defined::Nucleotide_defined_C,
  Nucleotide_defined::Nucleotide_defined_G,
  Nucleotide_defined::Nucleotide_defined_T,
  Nucleotide_defined::Nucleotide_defined_U,
  Nucleotide_defined::Nucleotide_defined_a,
  Nucleotide_defined::Nucleotide_defined_c,
  Nucleotide_defined::Nucleotide_defined_g,
  Nucleotide_defined::Nucleotide_defined_t,
  Nucleotide_defined::Nucleotide_defined_u
};
const char* _kNucleotide_definedNames[] = {
  "Nucleotide_defined_A",
  "Nucleotide_defined_C",
  "Nucleotide_defined_G",
  "Nucleotide_defined_T",
  "Nucleotide_defined_U",
  "Nucleotide_defined_a",
  "Nucleotide_defined_c",
  "Nucleotide_defined_g",
  "Nucleotide_defined_t",
  "Nucleotide_defined_u"
};
const std::map<int, const char*> _Nucleotide_defined_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(10, _kNucleotide_definedValues, _kNucleotide_definedNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

int _kSegment_typeValues[] = {
  Segment_type::Segment_type_D,
  Segment_type::Segment_type_J,
  Segment_type::Segment_type_V
};
const char* _kSegment_typeNames[] = {
  "Segment_type_D",
  "Segment_type_J",
  "Segment_type_V"
};
const std::map<int, const char*> _Segment_type_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(3, _kSegment_typeValues, _kSegment_typeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));


UnspecifiedType::~UnspecifiedType() throw() {
}


void UnspecifiedType::__set_baseObjectType(const std::string& val) {
  this->baseObjectType = val;
}

void UnspecifiedType::__set_object(const std::string& val) {
  this->object = val;
}

uint32_t UnspecifiedType::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_baseObjectType = false;
  bool isset_object = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->baseObjectType);
          isset_baseObjectType = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readBinary(this->object);
          isset_object = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_baseObjectType)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_object)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t UnspecifiedType::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("UnspecifiedType");

  xfer += oprot->writeFieldBegin("baseObjectType", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->baseObjectType);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("object", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeBinary(this->object);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(UnspecifiedType &a, UnspecifiedType &b) {
  using ::std::swap;
  swap(a.baseObjectType, b.baseObjectType);
  swap(a.object, b.object);
}

UnspecifiedType::UnspecifiedType(const UnspecifiedType& other0) {
  baseObjectType = other0.baseObjectType;
  object = other0.object;
}
UnspecifiedType& UnspecifiedType::operator=(const UnspecifiedType& other1) {
  baseObjectType = other1.baseObjectType;
  object = other1.object;
  return *this;
}
void UnspecifiedType::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "UnspecifiedType(";
  out << "baseObjectType=" << to_string(baseObjectType);
  out << ", " << "object=" << to_string(object);
  out << ")";
}


aa_substitutionType::~aa_substitutionType() throw() {
}


void aa_substitutionType::__set_gl_aa(const Aminoacid::type val) {
  this->gl_aa = val;
}

void aa_substitutionType::__set_read_aa(const Aminoacid::type val) {
  this->read_aa = val;
}

void aa_substitutionType::__set_read_pos0(const int64_t val) {
  this->read_pos0 = val;
}

uint32_t aa_substitutionType::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_gl_aa = false;
  bool isset_read_aa = false;
  bool isset_read_pos0 = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast2;
          xfer += iprot->readI32(ecast2);
          this->gl_aa = (Aminoacid::type)ecast2;
          isset_gl_aa = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast3;
          xfer += iprot->readI32(ecast3);
          this->read_aa = (Aminoacid::type)ecast3;
          isset_read_aa = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->read_pos0);
          isset_read_pos0 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_gl_aa)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_read_aa)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_read_pos0)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t aa_substitutionType::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("aa_substitutionType");

  xfer += oprot->writeFieldBegin("gl_aa", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32((int32_t)this->gl_aa);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("read_aa", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32((int32_t)this->read_aa);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("read_pos0", ::apache::thrift::protocol::T_I64, 3);
  xfer += oprot->writeI64(this->read_pos0);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(aa_substitutionType &a, aa_substitutionType &b) {
  using ::std::swap;
  swap(a.gl_aa, b.gl_aa);
  swap(a.read_aa, b.read_aa);
  swap(a.read_pos0, b.read_pos0);
}

aa_substitutionType::aa_substitutionType(const aa_substitutionType& other4) {
  gl_aa = other4.gl_aa;
  read_aa = other4.read_aa;
  read_pos0 = other4.read_pos0;
}
aa_substitutionType& aa_substitutionType::operator=(const aa_substitutionType& other5) {
  gl_aa = other5.gl_aa;
  read_aa = other5.read_aa;
  read_pos0 = other5.read_pos0;
  return *this;
}
void aa_substitutionType::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "aa_substitutionType(";
  out << "gl_aa=" << to_string(gl_aa);
  out << ", " << "read_aa=" << to_string(read_aa);
  out << ", " << "read_pos0=" << to_string(read_pos0);
  out << ")";
}


alignerType::~alignerType() throw() {
}


void alignerType::__set_aligner_id(const int64_t val) {
  this->aligner_id = val;
}

void alignerType::__set_name(const std::string& val) {
  this->name = val;
}

void alignerType::__set_parameters(const std::string& val) {
  this->parameters = val;
__isset.parameters = true;
}

void alignerType::__set_run_id(const int64_t val) {
  this->run_id = val;
__isset.run_id = true;
}

void alignerType::__set_uri(const UnspecifiedType& val) {
  this->uri = val;
__isset.uri = true;
}

void alignerType::__set_version(const std::string& val) {
  this->version = val;
__isset.version = true;
}

uint32_t alignerType::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_aligner_id = false;
  bool isset_name = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->aligner_id);
          isset_aligner_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->name);
          isset_name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->parameters);
          this->__isset.parameters = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->run_id);
          this->__isset.run_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->uri.read(iprot);
          this->__isset.uri = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->version);
          this->__isset.version = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_aligner_id)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_name)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t alignerType::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("alignerType");

  xfer += oprot->writeFieldBegin("aligner_id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->aligner_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("name", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->name);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.parameters) {
    xfer += oprot->writeFieldBegin("parameters", ::apache::thrift::protocol::T_STRING, 3);
    xfer += oprot->writeString(this->parameters);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.run_id) {
    xfer += oprot->writeFieldBegin("run_id", ::apache::thrift::protocol::T_I64, 4);
    xfer += oprot->writeI64(this->run_id);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.uri) {
    xfer += oprot->writeFieldBegin("uri", ::apache::thrift::protocol::T_STRUCT, 5);
    xfer += this->uri.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.version) {
    xfer += oprot->writeFieldBegin("version", ::apache::thrift::protocol::T_STRING, 6);
    xfer += oprot->writeString(this->version);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(alignerType &a, alignerType &b) {
  using ::std::swap;
  swap(a.aligner_id, b.aligner_id);
  swap(a.name, b.name);
  swap(a.parameters, b.parameters);
  swap(a.run_id, b.run_id);
  swap(a.uri, b.uri);
  swap(a.version, b.version);
  swap(a.__isset, b.__isset);
}

alignerType::alignerType(const alignerType& other6) {
  aligner_id = other6.aligner_id;
  name = other6.name;
  parameters = other6.parameters;
  run_id = other6.run_id;
  uri = other6.uri;
  version = other6.version;
  __isset = other6.__isset;
}
alignerType& alignerType::operator=(const alignerType& other7) {
  aligner_id = other7.aligner_id;
  name = other7.name;
  parameters = other7.parameters;
  run_id = other7.run_id;
  uri = other7.uri;
  version = other7.version;
  __isset = other7.__isset;
  return *this;
}
void alignerType::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "alignerType(";
  out << "aligner_id=" << to_string(aligner_id);
  out << ", " << "name=" << to_string(name);
  out << ", " << "parameters="; (__isset.parameters ? (out << to_string(parameters)) : (out << "<null>"));
  out << ", " << "run_id="; (__isset.run_id ? (out << to_string(run_id)) : (out << "<null>"));
  out << ", " << "uri="; (__isset.uri ? (out << to_string(uri)) : (out << "<null>"));
  out << ", " << "version="; (__isset.version ? (out << to_string(version)) : (out << "<null>"));
  out << ")";
}


generatorType::~generatorType() throw() {
}


void generatorType::__set_name(const std::string& val) {
  this->name = val;
}

void generatorType::__set_time_gmt(const int64_t val) {
  this->time_gmt = val;
}

void generatorType::__set_version(const std::string& val) {
  this->version = val;
}

uint32_t generatorType::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_name = false;
  bool isset_time_gmt = false;
  bool isset_version = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->name);
          isset_name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->time_gmt);
          isset_time_gmt = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->version);
          isset_version = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_name)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_time_gmt)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_version)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t generatorType::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("generatorType");

  xfer += oprot->writeFieldBegin("name", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("time_gmt", ::apache::thrift::protocol::T_I64, 2);
  xfer += oprot->writeI64(this->time_gmt);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("version", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->version);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(generatorType &a, generatorType &b) {
  using ::std::swap;
  swap(a.name, b.name);
  swap(a.time_gmt, b.time_gmt);
  swap(a.version, b.version);
}

generatorType::generatorType(const generatorType& other8) {
  name = other8.name;
  time_gmt = other8.time_gmt;
  version = other8.version;
}
generatorType& generatorType::operator=(const generatorType& other9) {
  name = other9.name;
  time_gmt = other9.time_gmt;
  version = other9.version;
  return *this;
}
void generatorType::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "generatorType(";
  out << "name=" << to_string(name);
  out << ", " << "time_gmt=" << to_string(time_gmt);
  out << ", " << "version=" << to_string(version);
  out << ")";
}


germline_dbType::~germline_dbType() throw() {
}


void germline_dbType::__set_gl_db_id(const int64_t val) {
  this->gl_db_id = val;
}

void germline_dbType::__set_name(const std::string& val) {
  this->name = val;
}

void germline_dbType::__set_species(const std::string& val) {
  this->species = val;
}

void germline_dbType::__set_uri(const UnspecifiedType& val) {
  this->uri = val;
__isset.uri = true;
}

void germline_dbType::__set_version(const std::string& val) {
  this->version = val;
}

uint32_t germline_dbType::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_gl_db_id = false;
  bool isset_name = false;
  bool isset_species = false;
  bool isset_version = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->gl_db_id);
          isset_gl_db_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->name);
          isset_name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->species);
          isset_species = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->uri.read(iprot);
          this->__isset.uri = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->version);
          isset_version = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_gl_db_id)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_name)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_species)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_version)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t germline_dbType::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("germline_dbType");

  xfer += oprot->writeFieldBegin("gl_db_id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->gl_db_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("name", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("species", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->species);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.uri) {
    xfer += oprot->writeFieldBegin("uri", ::apache::thrift::protocol::T_STRUCT, 4);
    xfer += this->uri.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldBegin("version", ::apache::thrift::protocol::T_STRING, 5);
  xfer += oprot->writeString(this->version);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(germline_dbType &a, germline_dbType &b) {
  using ::std::swap;
  swap(a.gl_db_id, b.gl_db_id);
  swap(a.name, b.name);
  swap(a.species, b.species);
  swap(a.uri, b.uri);
  swap(a.version, b.version);
  swap(a.__isset, b.__isset);
}

germline_dbType::germline_dbType(const germline_dbType& other10) {
  gl_db_id = other10.gl_db_id;
  name = other10.name;
  species = other10.species;
  uri = other10.uri;
  version = other10.version;
  __isset = other10.__isset;
}
germline_dbType& germline_dbType::operator=(const germline_dbType& other11) {
  gl_db_id = other11.gl_db_id;
  name = other11.name;
  species = other11.species;
  uri = other11.uri;
  version = other11.version;
  __isset = other11.__isset;
  return *this;
}
void germline_dbType::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "germline_dbType(";
  out << "gl_db_id=" << to_string(gl_db_id);
  out << ", " << "name=" << to_string(name);
  out << ", " << "species=" << to_string(species);
  out << ", " << "uri="; (__isset.uri ? (out << to_string(uri)) : (out << "<null>"));
  out << ", " << "version=" << to_string(version);
  out << ")";
}


gl_seg_matchType::~gl_seg_matchType() throw() {
}


void gl_seg_matchType::__set_aligner_id(const int64_t val) {
  this->aligner_id = val;
}

void gl_seg_matchType::__set_gl_db_id(const int64_t val) {
  this->gl_db_id = val;
}

void gl_seg_matchType::__set_gl_pos0(const int64_t val) {
  this->gl_pos0 = val;
}

void gl_seg_matchType::__set_gl_seg_match_id(const int64_t val) {
  this->gl_seg_match_id = val;
}

void gl_seg_matchType::__set_name(const std::string& val) {
  this->name = val;
}

void gl_seg_matchType::__set_num_system(const std::string& val) {
  this->num_system = val;
}

void gl_seg_matchType::__set_type(const Segment_type::type val) {
  this->type = val;
}

uint32_t gl_seg_matchType::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_aligner_id = false;
  bool isset_gl_db_id = false;
  bool isset_gl_pos0 = false;
  bool isset_gl_seg_match_id = false;
  bool isset_name = false;
  bool isset_num_system = false;
  bool isset_type = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->aligner_id);
          isset_aligner_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->gl_db_id);
          isset_gl_db_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->gl_pos0);
          isset_gl_pos0 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->gl_seg_match_id);
          isset_gl_seg_match_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->name);
          isset_name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->num_system);
          isset_num_system = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast12;
          xfer += iprot->readI32(ecast12);
          this->type = (Segment_type::type)ecast12;
          isset_type = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_aligner_id)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_gl_db_id)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_gl_pos0)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_gl_seg_match_id)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_name)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_num_system)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_type)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t gl_seg_matchType::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("gl_seg_matchType");

  xfer += oprot->writeFieldBegin("aligner_id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->aligner_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("gl_db_id", ::apache::thrift::protocol::T_I64, 2);
  xfer += oprot->writeI64(this->gl_db_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("gl_pos0", ::apache::thrift::protocol::T_I64, 3);
  xfer += oprot->writeI64(this->gl_pos0);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("gl_seg_match_id", ::apache::thrift::protocol::T_I64, 4);
  xfer += oprot->writeI64(this->gl_seg_match_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("name", ::apache::thrift::protocol::T_STRING, 5);
  xfer += oprot->writeString(this->name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("num_system", ::apache::thrift::protocol::T_STRING, 6);
  xfer += oprot->writeString(this->num_system);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("type", ::apache::thrift::protocol::T_I32, 7);
  xfer += oprot->writeI32((int32_t)this->type);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(gl_seg_matchType &a, gl_seg_matchType &b) {
  using ::std::swap;
  swap(a.aligner_id, b.aligner_id);
  swap(a.gl_db_id, b.gl_db_id);
  swap(a.gl_pos0, b.gl_pos0);
  swap(a.gl_seg_match_id, b.gl_seg_match_id);
  swap(a.name, b.name);
  swap(a.num_system, b.num_system);
  swap(a.type, b.type);
}

gl_seg_matchType::gl_seg_matchType(const gl_seg_matchType& other13) {
  aligner_id = other13.aligner_id;
  gl_db_id = other13.gl_db_id;
  gl_pos0 = other13.gl_pos0;
  gl_seg_match_id = other13.gl_seg_match_id;
  name = other13.name;
  num_system = other13.num_system;
  type = other13.type;
}
gl_seg_matchType& gl_seg_matchType::operator=(const gl_seg_matchType& other14) {
  aligner_id = other14.aligner_id;
  gl_db_id = other14.gl_db_id;
  gl_pos0 = other14.gl_pos0;
  gl_seg_match_id = other14.gl_seg_match_id;
  name = other14.name;
  num_system = other14.num_system;
  type = other14.type;
  return *this;
}
void gl_seg_matchType::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "gl_seg_matchType(";
  out << "aligner_id=" << to_string(aligner_id);
  out << ", " << "gl_db_id=" << to_string(gl_db_id);
  out << ", " << "gl_pos0=" << to_string(gl_pos0);
  out << ", " << "gl_seg_match_id=" << to_string(gl_seg_match_id);
  out << ", " << "name=" << to_string(name);
  out << ", " << "num_system=" << to_string(num_system);
  out << ", " << "type=" << to_string(type);
  out << ")";
}


metaType::~metaType() throw() {
}


void metaType::__set_aligner(const alignerType& val) {
  this->aligner = val;
__isset.aligner = true;
}

void metaType::__set_generator(const generatorType& val) {
  this->generator = val;
}

void metaType::__set_germline_db(const germline_dbType& val) {
  this->germline_db = val;
__isset.germline_db = true;
}

uint32_t metaType::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_generator = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->aligner.read(iprot);
          this->__isset.aligner = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->generator.read(iprot);
          isset_generator = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->germline_db.read(iprot);
          this->__isset.germline_db = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_generator)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t metaType::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("metaType");

  if (this->__isset.aligner) {
    xfer += oprot->writeFieldBegin("aligner", ::apache::thrift::protocol::T_STRUCT, 1);
    xfer += this->aligner.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldBegin("generator", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->generator.write(oprot);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.germline_db) {
    xfer += oprot->writeFieldBegin("germline_db", ::apache::thrift::protocol::T_STRUCT, 3);
    xfer += this->germline_db.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(metaType &a, metaType &b) {
  using ::std::swap;
  swap(a.aligner, b.aligner);
  swap(a.generator, b.generator);
  swap(a.germline_db, b.germline_db);
  swap(a.__isset, b.__isset);
}

metaType::metaType(const metaType& other15) {
  aligner = other15.aligner;
  generator = other15.generator;
  germline_db = other15.germline_db;
  __isset = other15.__isset;
}
metaType& metaType::operator=(const metaType& other16) {
  aligner = other16.aligner;
  generator = other16.generator;
  germline_db = other16.germline_db;
  __isset = other16.__isset;
  return *this;
}
void metaType::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "metaType(";
  out << "aligner="; (__isset.aligner ? (out << to_string(aligner)) : (out << "<null>"));
  out << ", " << "generator=" << to_string(generator);
  out << ", " << "germline_db="; (__isset.germline_db ? (out << to_string(germline_db)) : (out << "<null>"));
  out << ")";
}


regionType::~regionType() throw() {
}


void regionType::__set_aligner_id(const int64_t val) {
  this->aligner_id = val;
}

void regionType::__set_deletions(const int64_t val) {
  this->deletions = val;
__isset.deletions = true;
}

void regionType::__set_identity(const std::string& val) {
  this->identity = val;
__isset.identity = true;
}

void regionType::__set_insertions(const int64_t val) {
  this->insertions = val;
__isset.insertions = true;
}

void regionType::__set_inverted(const bool val) {
  this->inverted = val;
__isset.inverted = true;
}

void regionType::__set_mutated_invariant(const bool val) {
  this->mutated_invariant = val;
__isset.mutated_invariant = true;
}

void regionType::__set_name(const std::string& val) {
  this->name = val;
}

void regionType::__set_num_system(const std::string& val) {
  this->num_system = val;
__isset.num_system = true;
}

void regionType::__set_out_frame_indel(const bool val) {
  this->out_frame_indel = val;
__isset.out_frame_indel = true;
}

void regionType::__set_out_frame_vdj(const bool val) {
  this->out_frame_vdj = val;
__isset.out_frame_vdj = true;
}

void regionType::__set_read_len(const int64_t val) {
  this->read_len = val;
}

void regionType::__set_read_pos0(const int64_t val) {
  this->read_pos0 = val;
}

void regionType::__set_score(const int64_t val) {
  this->score = val;
__isset.score = true;
}

void regionType::__set_stop_codon(const bool val) {
  this->stop_codon = val;
__isset.stop_codon = true;
}

void regionType::__set_substitutions(const int64_t val) {
  this->substitutions = val;
__isset.substitutions = true;
}

uint32_t regionType::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_aligner_id = false;
  bool isset_name = false;
  bool isset_read_len = false;
  bool isset_read_pos0 = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->aligner_id);
          isset_aligner_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->deletions);
          this->__isset.deletions = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->identity);
          this->__isset.identity = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->insertions);
          this->__isset.insertions = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->inverted);
          this->__isset.inverted = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->mutated_invariant);
          this->__isset.mutated_invariant = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->name);
          isset_name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->num_system);
          this->__isset.num_system = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->out_frame_indel);
          this->__isset.out_frame_indel = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->out_frame_vdj);
          this->__isset.out_frame_vdj = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 11:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->read_len);
          isset_read_len = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 12:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->read_pos0);
          isset_read_pos0 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 13:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->score);
          this->__isset.score = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 14:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->stop_codon);
          this->__isset.stop_codon = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 15:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->substitutions);
          this->__isset.substitutions = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_aligner_id)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_name)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_read_len)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_read_pos0)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t regionType::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("regionType");

  xfer += oprot->writeFieldBegin("aligner_id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->aligner_id);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.deletions) {
    xfer += oprot->writeFieldBegin("deletions", ::apache::thrift::protocol::T_I64, 2);
    xfer += oprot->writeI64(this->deletions);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.identity) {
    xfer += oprot->writeFieldBegin("identity", ::apache::thrift::protocol::T_STRING, 3);
    xfer += oprot->writeString(this->identity);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.insertions) {
    xfer += oprot->writeFieldBegin("insertions", ::apache::thrift::protocol::T_I64, 4);
    xfer += oprot->writeI64(this->insertions);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.inverted) {
    xfer += oprot->writeFieldBegin("inverted", ::apache::thrift::protocol::T_BOOL, 5);
    xfer += oprot->writeBool(this->inverted);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.mutated_invariant) {
    xfer += oprot->writeFieldBegin("mutated_invariant", ::apache::thrift::protocol::T_BOOL, 6);
    xfer += oprot->writeBool(this->mutated_invariant);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldBegin("name", ::apache::thrift::protocol::T_STRING, 7);
  xfer += oprot->writeString(this->name);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.num_system) {
    xfer += oprot->writeFieldBegin("num_system", ::apache::thrift::protocol::T_STRING, 8);
    xfer += oprot->writeString(this->num_system);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.out_frame_indel) {
    xfer += oprot->writeFieldBegin("out_frame_indel", ::apache::thrift::protocol::T_BOOL, 9);
    xfer += oprot->writeBool(this->out_frame_indel);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.out_frame_vdj) {
    xfer += oprot->writeFieldBegin("out_frame_vdj", ::apache::thrift::protocol::T_BOOL, 10);
    xfer += oprot->writeBool(this->out_frame_vdj);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldBegin("read_len", ::apache::thrift::protocol::T_I64, 11);
  xfer += oprot->writeI64(this->read_len);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("read_pos0", ::apache::thrift::protocol::T_I64, 12);
  xfer += oprot->writeI64(this->read_pos0);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.score) {
    xfer += oprot->writeFieldBegin("score", ::apache::thrift::protocol::T_I64, 13);
    xfer += oprot->writeI64(this->score);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.stop_codon) {
    xfer += oprot->writeFieldBegin("stop_codon", ::apache::thrift::protocol::T_BOOL, 14);
    xfer += oprot->writeBool(this->stop_codon);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.substitutions) {
    xfer += oprot->writeFieldBegin("substitutions", ::apache::thrift::protocol::T_I64, 15);
    xfer += oprot->writeI64(this->substitutions);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(regionType &a, regionType &b) {
  using ::std::swap;
  swap(a.aligner_id, b.aligner_id);
  swap(a.deletions, b.deletions);
  swap(a.identity, b.identity);
  swap(a.insertions, b.insertions);
  swap(a.inverted, b.inverted);
  swap(a.mutated_invariant, b.mutated_invariant);
  swap(a.name, b.name);
  swap(a.num_system, b.num_system);
  swap(a.out_frame_indel, b.out_frame_indel);
  swap(a.out_frame_vdj, b.out_frame_vdj);
  swap(a.read_len, b.read_len);
  swap(a.read_pos0, b.read_pos0);
  swap(a.score, b.score);
  swap(a.stop_codon, b.stop_codon);
  swap(a.substitutions, b.substitutions);
  swap(a.__isset, b.__isset);
}

regionType::regionType(const regionType& other17) {
  aligner_id = other17.aligner_id;
  deletions = other17.deletions;
  identity = other17.identity;
  insertions = other17.insertions;
  inverted = other17.inverted;
  mutated_invariant = other17.mutated_invariant;
  name = other17.name;
  num_system = other17.num_system;
  out_frame_indel = other17.out_frame_indel;
  out_frame_vdj = other17.out_frame_vdj;
  read_len = other17.read_len;
  read_pos0 = other17.read_pos0;
  score = other17.score;
  stop_codon = other17.stop_codon;
  substitutions = other17.substitutions;
  __isset = other17.__isset;
}
regionType& regionType::operator=(const regionType& other18) {
  aligner_id = other18.aligner_id;
  deletions = other18.deletions;
  identity = other18.identity;
  insertions = other18.insertions;
  inverted = other18.inverted;
  mutated_invariant = other18.mutated_invariant;
  name = other18.name;
  num_system = other18.num_system;
  out_frame_indel = other18.out_frame_indel;
  out_frame_vdj = other18.out_frame_vdj;
  read_len = other18.read_len;
  read_pos0 = other18.read_pos0;
  score = other18.score;
  stop_codon = other18.stop_codon;
  substitutions = other18.substitutions;
  __isset = other18.__isset;
  return *this;
}
void regionType::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "regionType(";
  out << "aligner_id=" << to_string(aligner_id);
  out << ", " << "deletions="; (__isset.deletions ? (out << to_string(deletions)) : (out << "<null>"));
  out << ", " << "identity="; (__isset.identity ? (out << to_string(identity)) : (out << "<null>"));
  out << ", " << "insertions="; (__isset.insertions ? (out << to_string(insertions)) : (out << "<null>"));
  out << ", " << "inverted="; (__isset.inverted ? (out << to_string(inverted)) : (out << "<null>"));
  out << ", " << "mutated_invariant="; (__isset.mutated_invariant ? (out << to_string(mutated_invariant)) : (out << "<null>"));
  out << ", " << "name=" << to_string(name);
  out << ", " << "num_system="; (__isset.num_system ? (out << to_string(num_system)) : (out << "<null>"));
  out << ", " << "out_frame_indel="; (__isset.out_frame_indel ? (out << to_string(out_frame_indel)) : (out << "<null>"));
  out << ", " << "out_frame_vdj="; (__isset.out_frame_vdj ? (out << to_string(out_frame_vdj)) : (out << "<null>"));
  out << ", " << "read_len=" << to_string(read_len);
  out << ", " << "read_pos0=" << to_string(read_pos0);
  out << ", " << "score="; (__isset.score ? (out << to_string(score)) : (out << "<null>"));
  out << ", " << "stop_codon="; (__isset.stop_codon ? (out << to_string(stop_codon)) : (out << "<null>"));
  out << ", " << "substitutions="; (__isset.substitutions ? (out << to_string(substitutions)) : (out << "<null>"));
  out << ")";
}


segment_matchType::~segment_matchType() throw() {
}


void segment_matchType::__set_aa_substitution(const std::vector<aa_substitutionType> & val) {
  this->aa_substitution = val;
__isset.aa_substitution = true;
}

void segment_matchType::__set_btop(const std::string& val) {
  this->btop = val;
}

void segment_matchType::__set_deletions(const int64_t val) {
  this->deletions = val;
__isset.deletions = true;
}

void segment_matchType::__set_gl_len(const int64_t val) {
  this->gl_len = val;
}

void segment_matchType::__set_gl_seg_match(const std::vector<gl_seg_matchType> & val) {
  this->gl_seg_match = val;
}

void segment_matchType::__set_identity(const std::string& val) {
  this->identity = val;
__isset.identity = true;
}

void segment_matchType::__set_insertions(const int64_t val) {
  this->insertions = val;
__isset.insertions = true;
}

void segment_matchType::__set_inverted(const bool val) {
  this->inverted = val;
__isset.inverted = true;
}

void segment_matchType::__set_mutated_invariant(const bool val) {
  this->mutated_invariant = val;
__isset.mutated_invariant = true;
}

void segment_matchType::__set_out_frame_indel(const bool val) {
  this->out_frame_indel = val;
__isset.out_frame_indel = true;
}

void segment_matchType::__set_out_frame_vdj(const bool val) {
  this->out_frame_vdj = val;
__isset.out_frame_vdj = true;
}

void segment_matchType::__set_read_len(const int64_t val) {
  this->read_len = val;
}

void segment_matchType::__set_read_pos0(const int64_t val) {
  this->read_pos0 = val;
}

void segment_matchType::__set_score(const int64_t val) {
  this->score = val;
__isset.score = true;
}

void segment_matchType::__set_segment_match_id(const int64_t val) {
  this->segment_match_id = val;
}

void segment_matchType::__set_stop_codon(const bool val) {
  this->stop_codon = val;
__isset.stop_codon = true;
}

void segment_matchType::__set_substitutions(const int64_t val) {
  this->substitutions = val;
__isset.substitutions = true;
}

uint32_t segment_matchType::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_btop = false;
  bool isset_gl_len = false;
  bool isset_gl_seg_match = false;
  bool isset_read_len = false;
  bool isset_read_pos0 = false;
  bool isset_segment_match_id = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->aa_substitution.clear();
            uint32_t _size19;
            ::apache::thrift::protocol::TType _etype22;
            xfer += iprot->readListBegin(_etype22, _size19);
            this->aa_substitution.resize(_size19);
            uint32_t _i23;
            for (_i23 = 0; _i23 < _size19; ++_i23)
            {
              xfer += this->aa_substitution[_i23].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.aa_substitution = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->btop);
          isset_btop = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->deletions);
          this->__isset.deletions = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->gl_len);
          isset_gl_len = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->gl_seg_match.clear();
            uint32_t _size24;
            ::apache::thrift::protocol::TType _etype27;
            xfer += iprot->readListBegin(_etype27, _size24);
            this->gl_seg_match.resize(_size24);
            uint32_t _i28;
            for (_i28 = 0; _i28 < _size24; ++_i28)
            {
              xfer += this->gl_seg_match[_i28].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          isset_gl_seg_match = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->identity);
          this->__isset.identity = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->insertions);
          this->__isset.insertions = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->inverted);
          this->__isset.inverted = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->mutated_invariant);
          this->__isset.mutated_invariant = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->out_frame_indel);
          this->__isset.out_frame_indel = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 11:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->out_frame_vdj);
          this->__isset.out_frame_vdj = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 12:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->read_len);
          isset_read_len = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 13:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->read_pos0);
          isset_read_pos0 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 14:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->score);
          this->__isset.score = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 15:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->segment_match_id);
          isset_segment_match_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 16:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->stop_codon);
          this->__isset.stop_codon = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 17:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->substitutions);
          this->__isset.substitutions = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_btop)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_gl_len)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_gl_seg_match)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_read_len)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_read_pos0)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_segment_match_id)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t segment_matchType::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("segment_matchType");

  if (this->__isset.aa_substitution) {
    xfer += oprot->writeFieldBegin("aa_substitution", ::apache::thrift::protocol::T_LIST, 1);
    {
      xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->aa_substitution.size()));
      std::vector<aa_substitutionType> ::const_iterator _iter29;
      for (_iter29 = this->aa_substitution.begin(); _iter29 != this->aa_substitution.end(); ++_iter29)
      {
        xfer += (*_iter29).write(oprot);
      }
      xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldBegin("btop", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->btop);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.deletions) {
    xfer += oprot->writeFieldBegin("deletions", ::apache::thrift::protocol::T_I64, 3);
    xfer += oprot->writeI64(this->deletions);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldBegin("gl_len", ::apache::thrift::protocol::T_I64, 4);
  xfer += oprot->writeI64(this->gl_len);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("gl_seg_match", ::apache::thrift::protocol::T_LIST, 5);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->gl_seg_match.size()));
    std::vector<gl_seg_matchType> ::const_iterator _iter30;
    for (_iter30 = this->gl_seg_match.begin(); _iter30 != this->gl_seg_match.end(); ++_iter30)
    {
      xfer += (*_iter30).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  if (this->__isset.identity) {
    xfer += oprot->writeFieldBegin("identity", ::apache::thrift::protocol::T_STRING, 6);
    xfer += oprot->writeString(this->identity);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.insertions) {
    xfer += oprot->writeFieldBegin("insertions", ::apache::thrift::protocol::T_I64, 7);
    xfer += oprot->writeI64(this->insertions);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.inverted) {
    xfer += oprot->writeFieldBegin("inverted", ::apache::thrift::protocol::T_BOOL, 8);
    xfer += oprot->writeBool(this->inverted);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.mutated_invariant) {
    xfer += oprot->writeFieldBegin("mutated_invariant", ::apache::thrift::protocol::T_BOOL, 9);
    xfer += oprot->writeBool(this->mutated_invariant);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.out_frame_indel) {
    xfer += oprot->writeFieldBegin("out_frame_indel", ::apache::thrift::protocol::T_BOOL, 10);
    xfer += oprot->writeBool(this->out_frame_indel);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.out_frame_vdj) {
    xfer += oprot->writeFieldBegin("out_frame_vdj", ::apache::thrift::protocol::T_BOOL, 11);
    xfer += oprot->writeBool(this->out_frame_vdj);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldBegin("read_len", ::apache::thrift::protocol::T_I64, 12);
  xfer += oprot->writeI64(this->read_len);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("read_pos0", ::apache::thrift::protocol::T_I64, 13);
  xfer += oprot->writeI64(this->read_pos0);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.score) {
    xfer += oprot->writeFieldBegin("score", ::apache::thrift::protocol::T_I64, 14);
    xfer += oprot->writeI64(this->score);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldBegin("segment_match_id", ::apache::thrift::protocol::T_I64, 15);
  xfer += oprot->writeI64(this->segment_match_id);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.stop_codon) {
    xfer += oprot->writeFieldBegin("stop_codon", ::apache::thrift::protocol::T_BOOL, 16);
    xfer += oprot->writeBool(this->stop_codon);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.substitutions) {
    xfer += oprot->writeFieldBegin("substitutions", ::apache::thrift::protocol::T_I64, 17);
    xfer += oprot->writeI64(this->substitutions);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(segment_matchType &a, segment_matchType &b) {
  using ::std::swap;
  swap(a.aa_substitution, b.aa_substitution);
  swap(a.btop, b.btop);
  swap(a.deletions, b.deletions);
  swap(a.gl_len, b.gl_len);
  swap(a.gl_seg_match, b.gl_seg_match);
  swap(a.identity, b.identity);
  swap(a.insertions, b.insertions);
  swap(a.inverted, b.inverted);
  swap(a.mutated_invariant, b.mutated_invariant);
  swap(a.out_frame_indel, b.out_frame_indel);
  swap(a.out_frame_vdj, b.out_frame_vdj);
  swap(a.read_len, b.read_len);
  swap(a.read_pos0, b.read_pos0);
  swap(a.score, b.score);
  swap(a.segment_match_id, b.segment_match_id);
  swap(a.stop_codon, b.stop_codon);
  swap(a.substitutions, b.substitutions);
  swap(a.__isset, b.__isset);
}

segment_matchType::segment_matchType(const segment_matchType& other31) {
  aa_substitution = other31.aa_substitution;
  btop = other31.btop;
  deletions = other31.deletions;
  gl_len = other31.gl_len;
  gl_seg_match = other31.gl_seg_match;
  identity = other31.identity;
  insertions = other31.insertions;
  inverted = other31.inverted;
  mutated_invariant = other31.mutated_invariant;
  out_frame_indel = other31.out_frame_indel;
  out_frame_vdj = other31.out_frame_vdj;
  read_len = other31.read_len;
  read_pos0 = other31.read_pos0;
  score = other31.score;
  segment_match_id = other31.segment_match_id;
  stop_codon = other31.stop_codon;
  substitutions = other31.substitutions;
  __isset = other31.__isset;
}
segment_matchType& segment_matchType::operator=(const segment_matchType& other32) {
  aa_substitution = other32.aa_substitution;
  btop = other32.btop;
  deletions = other32.deletions;
  gl_len = other32.gl_len;
  gl_seg_match = other32.gl_seg_match;
  identity = other32.identity;
  insertions = other32.insertions;
  inverted = other32.inverted;
  mutated_invariant = other32.mutated_invariant;
  out_frame_indel = other32.out_frame_indel;
  out_frame_vdj = other32.out_frame_vdj;
  read_len = other32.read_len;
  read_pos0 = other32.read_pos0;
  score = other32.score;
  segment_match_id = other32.segment_match_id;
  stop_codon = other32.stop_codon;
  substitutions = other32.substitutions;
  __isset = other32.__isset;
  return *this;
}
void segment_matchType::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "segment_matchType(";
  out << "aa_substitution="; (__isset.aa_substitution ? (out << to_string(aa_substitution)) : (out << "<null>"));
  out << ", " << "btop=" << to_string(btop);
  out << ", " << "deletions="; (__isset.deletions ? (out << to_string(deletions)) : (out << "<null>"));
  out << ", " << "gl_len=" << to_string(gl_len);
  out << ", " << "gl_seg_match=" << to_string(gl_seg_match);
  out << ", " << "identity="; (__isset.identity ? (out << to_string(identity)) : (out << "<null>"));
  out << ", " << "insertions="; (__isset.insertions ? (out << to_string(insertions)) : (out << "<null>"));
  out << ", " << "inverted="; (__isset.inverted ? (out << to_string(inverted)) : (out << "<null>"));
  out << ", " << "mutated_invariant="; (__isset.mutated_invariant ? (out << to_string(mutated_invariant)) : (out << "<null>"));
  out << ", " << "out_frame_indel="; (__isset.out_frame_indel ? (out << to_string(out_frame_indel)) : (out << "<null>"));
  out << ", " << "out_frame_vdj="; (__isset.out_frame_vdj ? (out << to_string(out_frame_vdj)) : (out << "<null>"));
  out << ", " << "read_len=" << to_string(read_len);
  out << ", " << "read_pos0=" << to_string(read_pos0);
  out << ", " << "score="; (__isset.score ? (out << to_string(score)) : (out << "<null>"));
  out << ", " << "segment_match_id=" << to_string(segment_match_id);
  out << ", " << "stop_codon="; (__isset.stop_codon ? (out << to_string(stop_codon)) : (out << "<null>"));
  out << ", " << "substitutions="; (__isset.substitutions ? (out << to_string(substitutions)) : (out << "<null>"));
  out << ")";
}


combinationType::~combinationType() throw() {
}


void combinationType::__set_region(const std::vector<regionType> & val) {
  this->region = val;
__isset.region = true;
}

void combinationType::__set_segments(const std::vector<int64_t> & val) {
  this->segments = val;
}

uint32_t combinationType::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_segments = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->region.clear();
            uint32_t _size33;
            ::apache::thrift::protocol::TType _etype36;
            xfer += iprot->readListBegin(_etype36, _size33);
            this->region.resize(_size33);
            uint32_t _i37;
            for (_i37 = 0; _i37 < _size33; ++_i37)
            {
              xfer += this->region[_i37].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.region = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->segments.clear();
            uint32_t _size38;
            ::apache::thrift::protocol::TType _etype41;
            xfer += iprot->readListBegin(_etype41, _size38);
            this->segments.resize(_size38);
            uint32_t _i42;
            for (_i42 = 0; _i42 < _size38; ++_i42)
            {
              xfer += iprot->readI64(this->segments[_i42]);
            }
            xfer += iprot->readListEnd();
          }
          isset_segments = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_segments)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t combinationType::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("combinationType");

  if (this->__isset.region) {
    xfer += oprot->writeFieldBegin("region", ::apache::thrift::protocol::T_LIST, 1);
    {
      xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->region.size()));
      std::vector<regionType> ::const_iterator _iter43;
      for (_iter43 = this->region.begin(); _iter43 != this->region.end(); ++_iter43)
      {
        xfer += (*_iter43).write(oprot);
      }
      xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldBegin("segments", ::apache::thrift::protocol::T_LIST, 2);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_I64, static_cast<uint32_t>(this->segments.size()));
    std::vector<int64_t> ::const_iterator _iter44;
    for (_iter44 = this->segments.begin(); _iter44 != this->segments.end(); ++_iter44)
    {
      xfer += oprot->writeI64((*_iter44));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(combinationType &a, combinationType &b) {
  using ::std::swap;
  swap(a.region, b.region);
  swap(a.segments, b.segments);
  swap(a.__isset, b.__isset);
}

combinationType::combinationType(const combinationType& other45) {
  region = other45.region;
  segments = other45.segments;
  __isset = other45.__isset;
}
combinationType& combinationType::operator=(const combinationType& other46) {
  region = other46.region;
  segments = other46.segments;
  __isset = other46.__isset;
  return *this;
}
void combinationType::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "combinationType(";
  out << "region="; (__isset.region ? (out << to_string(region)) : (out << "<null>"));
  out << ", " << "segments=" << to_string(segments);
  out << ")";
}


vdj_alignmentType::~vdj_alignmentType() throw() {
}


void vdj_alignmentType::__set_combination(const std::vector<combinationType> & val) {
  this->combination = val;
}

void vdj_alignmentType::__set_segment_match(const std::vector<segment_matchType> & val) {
  this->segment_match = val;
}

uint32_t vdj_alignmentType::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_combination = false;
  bool isset_segment_match = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->combination.clear();
            uint32_t _size47;
            ::apache::thrift::protocol::TType _etype50;
            xfer += iprot->readListBegin(_etype50, _size47);
            this->combination.resize(_size47);
            uint32_t _i51;
            for (_i51 = 0; _i51 < _size47; ++_i51)
            {
              xfer += this->combination[_i51].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          isset_combination = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->segment_match.clear();
            uint32_t _size52;
            ::apache::thrift::protocol::TType _etype55;
            xfer += iprot->readListBegin(_etype55, _size52);
            this->segment_match.resize(_size52);
            uint32_t _i56;
            for (_i56 = 0; _i56 < _size52; ++_i56)
            {
              xfer += this->segment_match[_i56].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          isset_segment_match = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_combination)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_segment_match)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t vdj_alignmentType::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("vdj_alignmentType");

  xfer += oprot->writeFieldBegin("combination", ::apache::thrift::protocol::T_LIST, 1);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->combination.size()));
    std::vector<combinationType> ::const_iterator _iter57;
    for (_iter57 = this->combination.begin(); _iter57 != this->combination.end(); ++_iter57)
    {
      xfer += (*_iter57).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("segment_match", ::apache::thrift::protocol::T_LIST, 2);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->segment_match.size()));
    std::vector<segment_matchType> ::const_iterator _iter58;
    for (_iter58 = this->segment_match.begin(); _iter58 != this->segment_match.end(); ++_iter58)
    {
      xfer += (*_iter58).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(vdj_alignmentType &a, vdj_alignmentType &b) {
  using ::std::swap;
  swap(a.combination, b.combination);
  swap(a.segment_match, b.segment_match);
}

vdj_alignmentType::vdj_alignmentType(const vdj_alignmentType& other59) {
  combination = other59.combination;
  segment_match = other59.segment_match;
}
vdj_alignmentType& vdj_alignmentType::operator=(const vdj_alignmentType& other60) {
  combination = other60.combination;
  segment_match = other60.segment_match;
  return *this;
}
void vdj_alignmentType::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "vdj_alignmentType(";
  out << "combination=" << to_string(combination);
  out << ", " << "segment_match=" << to_string(segment_match);
  out << ")";
}


readType::~readType() throw() {
}


void readType::__set_read_id(const std::string& val) {
  this->read_id = val;
}

void readType::__set_vdj_alignment(const vdj_alignmentType& val) {
  this->vdj_alignment = val;
__isset.vdj_alignment = true;
}

uint32_t readType::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_read_id = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->read_id);
          isset_read_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->vdj_alignment.read(iprot);
          this->__isset.vdj_alignment = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_read_id)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t readType::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("readType");

  xfer += oprot->writeFieldBegin("read_id", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->read_id);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.vdj_alignment) {
    xfer += oprot->writeFieldBegin("vdj_alignment", ::apache::thrift::protocol::T_STRUCT, 2);
    xfer += this->vdj_alignment.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(readType &a, readType &b) {
  using ::std::swap;
  swap(a.read_id, b.read_id);
  swap(a.vdj_alignment, b.vdj_alignment);
  swap(a.__isset, b.__isset);
}

readType::readType(const readType& other61) {
  read_id = other61.read_id;
  vdj_alignment = other61.vdj_alignment;
  __isset = other61.__isset;
}
readType& readType::operator=(const readType& other62) {
  read_id = other62.read_id;
  vdj_alignment = other62.vdj_alignment;
  __isset = other62.__isset;
  return *this;
}
void readType::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "readType(";
  out << "read_id=" << to_string(read_id);
  out << ", " << "vdj_alignment="; (__isset.vdj_alignment ? (out << to_string(vdj_alignment)) : (out << "<null>"));
  out << ")";
}


read_resultsType::~read_resultsType() throw() {
}


void read_resultsType::__set_read(const readType& val) {
  this->read = val;
}

uint32_t read_resultsType::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_read = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->read.read(iprot);
          isset_read = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_read)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t read_resultsType::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("read_resultsType");

  xfer += oprot->writeFieldBegin("read", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->read.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(read_resultsType &a, read_resultsType &b) {
  using ::std::swap;
  swap(a.read, b.read);
}

read_resultsType::read_resultsType(const read_resultsType& other63) {
  read = other63.read;
}
read_resultsType& read_resultsType::operator=(const read_resultsType& other64) {
  read = other64.read;
  return *this;
}
void read_resultsType::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "read_resultsType(";
  out << "read=" << to_string(read);
  out << ")";
}


vdjmlType::~vdjmlType() throw() {
}


void vdjmlType::__set_meta(const metaType& val) {
  this->meta = val;
}

void vdjmlType::__set_read_results(const read_resultsType& val) {
  this->read_results = val;
}

void vdjmlType::__set_version(const double val) {
  this->version = val;
}

uint32_t vdjmlType::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_meta = false;
  bool isset_read_results = false;
  bool isset_version = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->meta.read(iprot);
          isset_meta = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->read_results.read(iprot);
          isset_read_results = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->version);
          isset_version = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_meta)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_read_results)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_version)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t vdjmlType::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("vdjmlType");

  xfer += oprot->writeFieldBegin("meta", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->meta.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("read_results", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->read_results.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("version", ::apache::thrift::protocol::T_DOUBLE, 3);
  xfer += oprot->writeDouble(this->version);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(vdjmlType &a, vdjmlType &b) {
  using ::std::swap;
  swap(a.meta, b.meta);
  swap(a.read_results, b.read_results);
  swap(a.version, b.version);
}

vdjmlType::vdjmlType(const vdjmlType& other65) {
  meta = other65.meta;
  read_results = other65.read_results;
  version = other65.version;
}
vdjmlType& vdjmlType::operator=(const vdjmlType& other66) {
  meta = other66.meta;
  read_results = other66.read_results;
  version = other66.version;
  return *this;
}
void vdjmlType::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "vdjmlType(";
  out << "meta=" << to_string(meta);
  out << ", " << "read_results=" << to_string(read_results);
  out << ", " << "version=" << to_string(version);
  out << ")";
}

} // namespace
