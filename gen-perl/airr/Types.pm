#
# Autogenerated by Thrift Compiler (0.9.3)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
require 5.6.0;
use strict;
use warnings;
use Thrift;

package airr::Origin;
use constant HUMAN => 0;
use constant ANIMAL => 1;
use constant SYNTHETIC => 2;
package airr::Sex;
use constant MALE => 0;
use constant FEMALE => 1;
package airr::Locus;
use constant IGH => 0;
use constant IGK => 1;
use constant IGL => 2;
use constant TRB => 3;
use constant TRA => 4;
use constant TRG => 5;
use constant TRD => 6;
package airr::Study;
use base qw(Class::Accessor);
airr::Study->mk_accessors( qw( id title labName correspondence doi ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{id} = undef;
  $self->{title} = undef;
  $self->{labName} = undef;
  $self->{correspondence} = undef;
  $self->{doi} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{id}) {
      $self->{id} = $vals->{id};
    }
    if (defined $vals->{title}) {
      $self->{title} = $vals->{title};
    }
    if (defined $vals->{labName}) {
      $self->{labName} = $vals->{labName};
    }
    if (defined $vals->{correspondence}) {
      $self->{correspondence} = $vals->{correspondence};
    }
    if (defined $vals->{doi}) {
      $self->{doi} = $vals->{doi};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'Study';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1) 
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^1$/ && do{      if ($ftype == TType::STRING) {
        $xfer += $input->readString(\$self->{id});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^2$/ && do{      if ($ftype == TType::STRING) {
        $xfer += $input->readString(\$self->{title});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^3$/ && do{      if ($ftype == TType::STRING) {
        $xfer += $input->readString(\$self->{labName});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^4$/ && do{      if ($ftype == TType::STRING) {
        $xfer += $input->readString(\$self->{correspondence});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^5$/ && do{      if ($ftype == TType::STRING) {
        $xfer += $input->readString(\$self->{doi});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('Study');
  if (defined $self->{id}) {
    $xfer += $output->writeFieldBegin('id', TType::STRING, 1);
    $xfer += $output->writeString($self->{id});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{title}) {
    $xfer += $output->writeFieldBegin('title', TType::STRING, 2);
    $xfer += $output->writeString($self->{title});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{labName}) {
    $xfer += $output->writeFieldBegin('labName', TType::STRING, 3);
    $xfer += $output->writeString($self->{labName});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{correspondence}) {
    $xfer += $output->writeFieldBegin('correspondence', TType::STRING, 4);
    $xfer += $output->writeString($self->{correspondence});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{doi}) {
    $xfer += $output->writeFieldBegin('doi', TType::STRING, 5);
    $xfer += $output->writeString($self->{doi});
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package airr::Subject;
use base qw(Class::Accessor);
airr::Subject->mk_accessors( qw( id origin sex age ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{id} = undef;
  $self->{origin} = undef;
  $self->{sex} = undef;
  $self->{age} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{id}) {
      $self->{id} = $vals->{id};
    }
    if (defined $vals->{origin}) {
      $self->{origin} = $vals->{origin};
    }
    if (defined $vals->{sex}) {
      $self->{sex} = $vals->{sex};
    }
    if (defined $vals->{age}) {
      $self->{age} = $vals->{age};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'Subject';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1) 
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^1$/ && do{      if ($ftype == TType::STRING) {
        $xfer += $input->readString(\$self->{id});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^2$/ && do{      if ($ftype == TType::I32) {
        $xfer += $input->readI32(\$self->{origin});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^3$/ && do{      if ($ftype == TType::I32) {
        $xfer += $input->readI32(\$self->{sex});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^4$/ && do{      if ($ftype == TType::I32) {
        $xfer += $input->readI32(\$self->{age});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('Subject');
  if (defined $self->{id}) {
    $xfer += $output->writeFieldBegin('id', TType::STRING, 1);
    $xfer += $output->writeString($self->{id});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{origin}) {
    $xfer += $output->writeFieldBegin('origin', TType::I32, 2);
    $xfer += $output->writeI32($self->{origin});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{sex}) {
    $xfer += $output->writeFieldBegin('sex', TType::I32, 3);
    $xfer += $output->writeI32($self->{sex});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{age}) {
    $xfer += $output->writeFieldBegin('age', TType::I32, 4);
    $xfer += $output->writeI32($self->{age});
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package airr::Sample;
use base qw(Class::Accessor);
airr::Sample->mk_accessors( qw( id type source dt ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{id} = undef;
  $self->{type} = undef;
  $self->{source} = undef;
  $self->{dt} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{id}) {
      $self->{id} = $vals->{id};
    }
    if (defined $vals->{type}) {
      $self->{type} = $vals->{type};
    }
    if (defined $vals->{source}) {
      $self->{source} = $vals->{source};
    }
    if (defined $vals->{dt}) {
      $self->{dt} = $vals->{dt};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'Sample';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1) 
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^1$/ && do{      if ($ftype == TType::STRING) {
        $xfer += $input->readString(\$self->{id});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^2$/ && do{      if ($ftype == TType::STRING) {
        $xfer += $input->readString(\$self->{type});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^3$/ && do{      if ($ftype == TType::STRING) {
        $xfer += $input->readString(\$self->{source});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^4$/ && do{      if ($ftype == TType::STRING) {
        $xfer += $input->readString(\$self->{dt});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('Sample');
  if (defined $self->{id}) {
    $xfer += $output->writeFieldBegin('id', TType::STRING, 1);
    $xfer += $output->writeString($self->{id});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{type}) {
    $xfer += $output->writeFieldBegin('type', TType::STRING, 2);
    $xfer += $output->writeString($self->{type});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{source}) {
    $xfer += $output->writeFieldBegin('source', TType::STRING, 3);
    $xfer += $output->writeString($self->{source});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{dt}) {
    $xfer += $output->writeFieldBegin('dt', TType::STRING, 4);
    $xfer += $output->writeString($self->{dt});
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package airr::Chain;
use base qw(Class::Accessor);
airr::Chain->mk_accessors( qw( id ntSeq locus vAllele dAllele jAllele alignment ntCDR3 ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{id} = undef;
  $self->{ntSeq} = undef;
  $self->{locus} = undef;
  $self->{vAllele} = undef;
  $self->{dAllele} = undef;
  $self->{jAllele} = undef;
  $self->{alignment} = undef;
  $self->{ntCDR3} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{id}) {
      $self->{id} = $vals->{id};
    }
    if (defined $vals->{ntSeq}) {
      $self->{ntSeq} = $vals->{ntSeq};
    }
    if (defined $vals->{locus}) {
      $self->{locus} = $vals->{locus};
    }
    if (defined $vals->{vAllele}) {
      $self->{vAllele} = $vals->{vAllele};
    }
    if (defined $vals->{dAllele}) {
      $self->{dAllele} = $vals->{dAllele};
    }
    if (defined $vals->{jAllele}) {
      $self->{jAllele} = $vals->{jAllele};
    }
    if (defined $vals->{alignment}) {
      $self->{alignment} = $vals->{alignment};
    }
    if (defined $vals->{ntCDR3}) {
      $self->{ntCDR3} = $vals->{ntCDR3};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'Chain';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1) 
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^1$/ && do{      if ($ftype == TType::STRING) {
        $xfer += $input->readString(\$self->{id});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^2$/ && do{      if ($ftype == TType::STRING) {
        $xfer += $input->readString(\$self->{ntSeq});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^3$/ && do{      if ($ftype == TType::I32) {
        $xfer += $input->readI32(\$self->{locus});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^4$/ && do{      if ($ftype == TType::STRING) {
        $xfer += $input->readString(\$self->{vAllele});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^5$/ && do{      if ($ftype == TType::STRING) {
        $xfer += $input->readString(\$self->{dAllele});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^6$/ && do{      if ($ftype == TType::STRING) {
        $xfer += $input->readString(\$self->{jAllele});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^7$/ && do{      if ($ftype == TType::STRING) {
        $xfer += $input->readString(\$self->{alignment});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^8$/ && do{      if ($ftype == TType::STRING) {
        $xfer += $input->readString(\$self->{ntCDR3});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('Chain');
  if (defined $self->{id}) {
    $xfer += $output->writeFieldBegin('id', TType::STRING, 1);
    $xfer += $output->writeString($self->{id});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{ntSeq}) {
    $xfer += $output->writeFieldBegin('ntSeq', TType::STRING, 2);
    $xfer += $output->writeString($self->{ntSeq});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{locus}) {
    $xfer += $output->writeFieldBegin('locus', TType::I32, 3);
    $xfer += $output->writeI32($self->{locus});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{vAllele}) {
    $xfer += $output->writeFieldBegin('vAllele', TType::STRING, 4);
    $xfer += $output->writeString($self->{vAllele});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{dAllele}) {
    $xfer += $output->writeFieldBegin('dAllele', TType::STRING, 5);
    $xfer += $output->writeString($self->{dAllele});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{jAllele}) {
    $xfer += $output->writeFieldBegin('jAllele', TType::STRING, 6);
    $xfer += $output->writeString($self->{jAllele});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{alignment}) {
    $xfer += $output->writeFieldBegin('alignment', TType::STRING, 7);
    $xfer += $output->writeString($self->{alignment});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{ntCDR3}) {
    $xfer += $output->writeFieldBegin('ntCDR3', TType::STRING, 8);
    $xfer += $output->writeString($self->{ntCDR3});
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package airr::FindCdr3Req;
use base qw(Class::Accessor);
airr::FindCdr3Req->mk_accessors( qw( cdr3 locus studyIds ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{cdr3} = undef;
  $self->{locus} = undef;
  $self->{studyIds} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{cdr3}) {
      $self->{cdr3} = $vals->{cdr3};
    }
    if (defined $vals->{locus}) {
      $self->{locus} = $vals->{locus};
    }
    if (defined $vals->{studyIds}) {
      $self->{studyIds} = $vals->{studyIds};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'FindCdr3Req';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1) 
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^1$/ && do{      if ($ftype == TType::STRING) {
        $xfer += $input->readString(\$self->{cdr3});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^2$/ && do{      if ($ftype == TType::I32) {
        $xfer += $input->readI32(\$self->{locus});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^3$/ && do{      if ($ftype == TType::LIST) {
        {
          my $_size0 = 0;
          $self->{studyIds} = [];
          my $_etype3 = 0;
          $xfer += $input->readListBegin(\$_etype3, \$_size0);
          for (my $_i4 = 0; $_i4 < $_size0; ++$_i4)
          {
            my $elem5 = undef;
            $xfer += $input->readString(\$elem5);
            push(@{$self->{studyIds}},$elem5);
          }
          $xfer += $input->readListEnd();
        }
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('FindCdr3Req');
  if (defined $self->{cdr3}) {
    $xfer += $output->writeFieldBegin('cdr3', TType::STRING, 1);
    $xfer += $output->writeString($self->{cdr3});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{locus}) {
    $xfer += $output->writeFieldBegin('locus', TType::I32, 2);
    $xfer += $output->writeI32($self->{locus});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{studyIds}) {
    $xfer += $output->writeFieldBegin('studyIds', TType::LIST, 3);
    {
      $xfer += $output->writeListBegin(TType::STRING, scalar(@{$self->{studyIds}}));
      {
        foreach my $iter6 (@{$self->{studyIds}}) 
        {
          $xfer += $output->writeString($iter6);
        }
      }
      $xfer += $output->writeListEnd();
    }
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package airr::FindCdr3Resp;
use base qw(Class::Accessor);
airr::FindCdr3Resp->mk_accessors( qw( found specificities ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{found} = undef;
  $self->{specificities} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{found}) {
      $self->{found} = $vals->{found};
    }
    if (defined $vals->{specificities}) {
      $self->{specificities} = $vals->{specificities};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'FindCdr3Resp';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1) 
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^1$/ && do{      if ($ftype == TType::BOOL) {
        $xfer += $input->readBool(\$self->{found});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^2$/ && do{      if ($ftype == TType::LIST) {
        {
          my $_size7 = 0;
          $self->{specificities} = [];
          my $_etype10 = 0;
          $xfer += $input->readListBegin(\$_etype10, \$_size7);
          for (my $_i11 = 0; $_i11 < $_size7; ++$_i11)
          {
            my $elem12 = undef;
            $xfer += $input->readString(\$elem12);
            push(@{$self->{specificities}},$elem12);
          }
          $xfer += $input->readListEnd();
        }
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('FindCdr3Resp');
  if (defined $self->{found}) {
    $xfer += $output->writeFieldBegin('found', TType::BOOL, 1);
    $xfer += $output->writeBool($self->{found});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{specificities}) {
    $xfer += $output->writeFieldBegin('specificities', TType::LIST, 2);
    {
      $xfer += $output->writeListBegin(TType::STRING, scalar(@{$self->{specificities}}));
      {
        foreach my $iter13 (@{$self->{specificities}}) 
        {
          $xfer += $output->writeString($iter13);
        }
      }
      $xfer += $output->writeListEnd();
    }
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

1;
