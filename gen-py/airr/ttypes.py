#
# Autogenerated by Thrift Compiler (0.9.3)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py:new_style
#

from thrift.Thrift import TType, TMessageType, TException, TApplicationException

from thrift.transport import TTransport
from thrift.protocol import TBinaryProtocol, TProtocol
try:
  from thrift.protocol import fastbinary
except:
  fastbinary = None


class Origin(object):
  HUMAN = 0
  ANIMAL = 1
  SYNTHETIC = 2

  _VALUES_TO_NAMES = {
    0: "HUMAN",
    1: "ANIMAL",
    2: "SYNTHETIC",
  }

  _NAMES_TO_VALUES = {
    "HUMAN": 0,
    "ANIMAL": 1,
    "SYNTHETIC": 2,
  }

class Sex(object):
  MALE = 0
  FEMALE = 1

  _VALUES_TO_NAMES = {
    0: "MALE",
    1: "FEMALE",
  }

  _NAMES_TO_VALUES = {
    "MALE": 0,
    "FEMALE": 1,
  }

class Locus(object):
  IGH = 0
  IGK = 1
  IGL = 2
  TRB = 3
  TRA = 4
  TRG = 5
  TRD = 6

  _VALUES_TO_NAMES = {
    0: "IGH",
    1: "IGK",
    2: "IGL",
    3: "TRB",
    4: "TRA",
    5: "TRG",
    6: "TRD",
  }

  _NAMES_TO_VALUES = {
    "IGH": 0,
    "IGK": 1,
    "IGL": 2,
    "TRB": 3,
    "TRA": 4,
    "TRG": 5,
    "TRD": 6,
  }


class Study(object):
  """
  Attributes:
   - id
   - title
   - labName
   - correspondence
   - doi
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'id', None, None, ), # 1
    (2, TType.STRING, 'title', None, None, ), # 2
    (3, TType.STRING, 'labName', None, None, ), # 3
    (4, TType.STRING, 'correspondence', None, None, ), # 4
    (5, TType.STRING, 'doi', None, None, ), # 5
  )

  def __init__(self, id=None, title=None, labName=None, correspondence=None, doi=None,):
    self.id = id
    self.title = title
    self.labName = labName
    self.correspondence = correspondence
    self.doi = doi

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.id = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.title = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.labName = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.correspondence = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRING:
          self.doi = iprot.readString()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('Study')
    if self.id is not None:
      oprot.writeFieldBegin('id', TType.STRING, 1)
      oprot.writeString(self.id)
      oprot.writeFieldEnd()
    if self.title is not None:
      oprot.writeFieldBegin('title', TType.STRING, 2)
      oprot.writeString(self.title)
      oprot.writeFieldEnd()
    if self.labName is not None:
      oprot.writeFieldBegin('labName', TType.STRING, 3)
      oprot.writeString(self.labName)
      oprot.writeFieldEnd()
    if self.correspondence is not None:
      oprot.writeFieldBegin('correspondence', TType.STRING, 4)
      oprot.writeString(self.correspondence)
      oprot.writeFieldEnd()
    if self.doi is not None:
      oprot.writeFieldBegin('doi', TType.STRING, 5)
      oprot.writeString(self.doi)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.id)
    value = (value * 31) ^ hash(self.title)
    value = (value * 31) ^ hash(self.labName)
    value = (value * 31) ^ hash(self.correspondence)
    value = (value * 31) ^ hash(self.doi)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class Subject(object):
  """
  Attributes:
   - id
   - origin
   - sex
   - age
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'id', None, None, ), # 1
    (2, TType.I32, 'origin', None, None, ), # 2
    (3, TType.I32, 'sex', None, None, ), # 3
    (4, TType.I32, 'age', None, None, ), # 4
  )

  def __init__(self, id=None, origin=None, sex=None, age=None,):
    self.id = id
    self.origin = origin
    self.sex = sex
    self.age = age

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.id = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.origin = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.sex = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I32:
          self.age = iprot.readI32()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('Subject')
    if self.id is not None:
      oprot.writeFieldBegin('id', TType.STRING, 1)
      oprot.writeString(self.id)
      oprot.writeFieldEnd()
    if self.origin is not None:
      oprot.writeFieldBegin('origin', TType.I32, 2)
      oprot.writeI32(self.origin)
      oprot.writeFieldEnd()
    if self.sex is not None:
      oprot.writeFieldBegin('sex', TType.I32, 3)
      oprot.writeI32(self.sex)
      oprot.writeFieldEnd()
    if self.age is not None:
      oprot.writeFieldBegin('age', TType.I32, 4)
      oprot.writeI32(self.age)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.id)
    value = (value * 31) ^ hash(self.origin)
    value = (value * 31) ^ hash(self.sex)
    value = (value * 31) ^ hash(self.age)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class Sample(object):
  """
  Attributes:
   - id
   - type
   - source
   - dt
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'id', None, None, ), # 1
    (2, TType.STRING, 'type', None, None, ), # 2
    (3, TType.STRING, 'source', None, None, ), # 3
    (4, TType.STRING, 'dt', None, None, ), # 4
  )

  def __init__(self, id=None, type=None, source=None, dt=None,):
    self.id = id
    self.type = type
    self.source = source
    self.dt = dt

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.id = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.type = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.source = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.dt = iprot.readString()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('Sample')
    if self.id is not None:
      oprot.writeFieldBegin('id', TType.STRING, 1)
      oprot.writeString(self.id)
      oprot.writeFieldEnd()
    if self.type is not None:
      oprot.writeFieldBegin('type', TType.STRING, 2)
      oprot.writeString(self.type)
      oprot.writeFieldEnd()
    if self.source is not None:
      oprot.writeFieldBegin('source', TType.STRING, 3)
      oprot.writeString(self.source)
      oprot.writeFieldEnd()
    if self.dt is not None:
      oprot.writeFieldBegin('dt', TType.STRING, 4)
      oprot.writeString(self.dt)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.id)
    value = (value * 31) ^ hash(self.type)
    value = (value * 31) ^ hash(self.source)
    value = (value * 31) ^ hash(self.dt)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class Chain(object):
  """
  Attributes:
   - id
   - ntSeq
   - locus
   - vAllele
   - dAllele
   - jAllele
   - alignment
   - ntCDR3
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'id', None, None, ), # 1
    (2, TType.STRING, 'ntSeq', None, None, ), # 2
    (3, TType.I32, 'locus', None, None, ), # 3
    (4, TType.STRING, 'vAllele', None, None, ), # 4
    (5, TType.STRING, 'dAllele', None, None, ), # 5
    (6, TType.STRING, 'jAllele', None, None, ), # 6
    (7, TType.STRING, 'alignment', None, None, ), # 7
    (8, TType.STRING, 'ntCDR3', None, None, ), # 8
  )

  def __init__(self, id=None, ntSeq=None, locus=None, vAllele=None, dAllele=None, jAllele=None, alignment=None, ntCDR3=None,):
    self.id = id
    self.ntSeq = ntSeq
    self.locus = locus
    self.vAllele = vAllele
    self.dAllele = dAllele
    self.jAllele = jAllele
    self.alignment = alignment
    self.ntCDR3 = ntCDR3

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.id = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.ntSeq = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.locus = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.vAllele = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRING:
          self.dAllele = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.STRING:
          self.jAllele = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.STRING:
          self.alignment = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.STRING:
          self.ntCDR3 = iprot.readString()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('Chain')
    if self.id is not None:
      oprot.writeFieldBegin('id', TType.STRING, 1)
      oprot.writeString(self.id)
      oprot.writeFieldEnd()
    if self.ntSeq is not None:
      oprot.writeFieldBegin('ntSeq', TType.STRING, 2)
      oprot.writeString(self.ntSeq)
      oprot.writeFieldEnd()
    if self.locus is not None:
      oprot.writeFieldBegin('locus', TType.I32, 3)
      oprot.writeI32(self.locus)
      oprot.writeFieldEnd()
    if self.vAllele is not None:
      oprot.writeFieldBegin('vAllele', TType.STRING, 4)
      oprot.writeString(self.vAllele)
      oprot.writeFieldEnd()
    if self.dAllele is not None:
      oprot.writeFieldBegin('dAllele', TType.STRING, 5)
      oprot.writeString(self.dAllele)
      oprot.writeFieldEnd()
    if self.jAllele is not None:
      oprot.writeFieldBegin('jAllele', TType.STRING, 6)
      oprot.writeString(self.jAllele)
      oprot.writeFieldEnd()
    if self.alignment is not None:
      oprot.writeFieldBegin('alignment', TType.STRING, 7)
      oprot.writeString(self.alignment)
      oprot.writeFieldEnd()
    if self.ntCDR3 is not None:
      oprot.writeFieldBegin('ntCDR3', TType.STRING, 8)
      oprot.writeString(self.ntCDR3)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.id)
    value = (value * 31) ^ hash(self.ntSeq)
    value = (value * 31) ^ hash(self.locus)
    value = (value * 31) ^ hash(self.vAllele)
    value = (value * 31) ^ hash(self.dAllele)
    value = (value * 31) ^ hash(self.jAllele)
    value = (value * 31) ^ hash(self.alignment)
    value = (value * 31) ^ hash(self.ntCDR3)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class FindCdr3Req(object):
  """
  Attributes:
   - cdr3
   - locus
   - studyIds
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'cdr3', None, None, ), # 1
    (2, TType.I32, 'locus', None, None, ), # 2
    (3, TType.LIST, 'studyIds', (TType.STRING,None), None, ), # 3
  )

  def __init__(self, cdr3=None, locus=None, studyIds=None,):
    self.cdr3 = cdr3
    self.locus = locus
    self.studyIds = studyIds

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.cdr3 = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.locus = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.LIST:
          self.studyIds = []
          (_etype3, _size0) = iprot.readListBegin()
          for _i4 in xrange(_size0):
            _elem5 = iprot.readString()
            self.studyIds.append(_elem5)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('FindCdr3Req')
    if self.cdr3 is not None:
      oprot.writeFieldBegin('cdr3', TType.STRING, 1)
      oprot.writeString(self.cdr3)
      oprot.writeFieldEnd()
    if self.locus is not None:
      oprot.writeFieldBegin('locus', TType.I32, 2)
      oprot.writeI32(self.locus)
      oprot.writeFieldEnd()
    if self.studyIds is not None:
      oprot.writeFieldBegin('studyIds', TType.LIST, 3)
      oprot.writeListBegin(TType.STRING, len(self.studyIds))
      for iter6 in self.studyIds:
        oprot.writeString(iter6)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.cdr3 is None:
      raise TProtocol.TProtocolException(message='Required field cdr3 is unset!')
    if self.locus is None:
      raise TProtocol.TProtocolException(message='Required field locus is unset!')
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.cdr3)
    value = (value * 31) ^ hash(self.locus)
    value = (value * 31) ^ hash(self.studyIds)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class FindCdr3Resp(object):
  """
  Attributes:
   - found
   - specificities
  """

  thrift_spec = (
    None, # 0
    (1, TType.BOOL, 'found', None, None, ), # 1
    (2, TType.LIST, 'specificities', (TType.STRING,None), None, ), # 2
  )

  def __init__(self, found=None, specificities=None,):
    self.found = found
    self.specificities = specificities

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.BOOL:
          self.found = iprot.readBool()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.LIST:
          self.specificities = []
          (_etype10, _size7) = iprot.readListBegin()
          for _i11 in xrange(_size7):
            _elem12 = iprot.readString()
            self.specificities.append(_elem12)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('FindCdr3Resp')
    if self.found is not None:
      oprot.writeFieldBegin('found', TType.BOOL, 1)
      oprot.writeBool(self.found)
      oprot.writeFieldEnd()
    if self.specificities is not None:
      oprot.writeFieldBegin('specificities', TType.LIST, 2)
      oprot.writeListBegin(TType.STRING, len(self.specificities))
      for iter13 in self.specificities:
        oprot.writeString(iter13)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.found is None:
      raise TProtocol.TProtocolException(message='Required field found is unset!')
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.found)
    value = (value * 31) ^ hash(self.specificities)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)
