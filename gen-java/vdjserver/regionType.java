/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package vdjserver;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2016-06-07")
public class regionType implements org.apache.thrift.TBase<regionType, regionType._Fields>, java.io.Serializable, Cloneable, Comparable<regionType> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("regionType");

  private static final org.apache.thrift.protocol.TField ALIGNER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("aligner_id", org.apache.thrift.protocol.TType.I64, (short)1);
  private static final org.apache.thrift.protocol.TField DELETIONS_FIELD_DESC = new org.apache.thrift.protocol.TField("deletions", org.apache.thrift.protocol.TType.I64, (short)2);
  private static final org.apache.thrift.protocol.TField IDENTITY_FIELD_DESC = new org.apache.thrift.protocol.TField("identity", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField INSERTIONS_FIELD_DESC = new org.apache.thrift.protocol.TField("insertions", org.apache.thrift.protocol.TType.I64, (short)4);
  private static final org.apache.thrift.protocol.TField INVERTED_FIELD_DESC = new org.apache.thrift.protocol.TField("inverted", org.apache.thrift.protocol.TType.BOOL, (short)5);
  private static final org.apache.thrift.protocol.TField MUTATED_INVARIANT_FIELD_DESC = new org.apache.thrift.protocol.TField("mutated_invariant", org.apache.thrift.protocol.TType.BOOL, (short)6);
  private static final org.apache.thrift.protocol.TField NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("name", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField NUM_SYSTEM_FIELD_DESC = new org.apache.thrift.protocol.TField("num_system", org.apache.thrift.protocol.TType.STRING, (short)8);
  private static final org.apache.thrift.protocol.TField OUT_FRAME_INDEL_FIELD_DESC = new org.apache.thrift.protocol.TField("out_frame_indel", org.apache.thrift.protocol.TType.BOOL, (short)9);
  private static final org.apache.thrift.protocol.TField OUT_FRAME_VDJ_FIELD_DESC = new org.apache.thrift.protocol.TField("out_frame_vdj", org.apache.thrift.protocol.TType.BOOL, (short)10);
  private static final org.apache.thrift.protocol.TField READ_LEN_FIELD_DESC = new org.apache.thrift.protocol.TField("read_len", org.apache.thrift.protocol.TType.I64, (short)11);
  private static final org.apache.thrift.protocol.TField READ_POS0_FIELD_DESC = new org.apache.thrift.protocol.TField("read_pos0", org.apache.thrift.protocol.TType.I64, (short)12);
  private static final org.apache.thrift.protocol.TField SCORE_FIELD_DESC = new org.apache.thrift.protocol.TField("score", org.apache.thrift.protocol.TType.I64, (short)13);
  private static final org.apache.thrift.protocol.TField STOP_CODON_FIELD_DESC = new org.apache.thrift.protocol.TField("stop_codon", org.apache.thrift.protocol.TType.BOOL, (short)14);
  private static final org.apache.thrift.protocol.TField SUBSTITUTIONS_FIELD_DESC = new org.apache.thrift.protocol.TField("substitutions", org.apache.thrift.protocol.TType.I64, (short)15);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new regionTypeStandardSchemeFactory());
    schemes.put(TupleScheme.class, new regionTypeTupleSchemeFactory());
  }

  public long aligner_id; // required
  public long deletions; // optional
  public String identity; // optional
  public long insertions; // optional
  public boolean inverted; // optional
  public boolean mutated_invariant; // optional
  public String name; // required
  public String num_system; // optional
  public boolean out_frame_indel; // optional
  public boolean out_frame_vdj; // optional
  public long read_len; // required
  public long read_pos0; // required
  public long score; // optional
  public boolean stop_codon; // optional
  public long substitutions; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ALIGNER_ID((short)1, "aligner_id"),
    DELETIONS((short)2, "deletions"),
    IDENTITY((short)3, "identity"),
    INSERTIONS((short)4, "insertions"),
    INVERTED((short)5, "inverted"),
    MUTATED_INVARIANT((short)6, "mutated_invariant"),
    NAME((short)7, "name"),
    NUM_SYSTEM((short)8, "num_system"),
    OUT_FRAME_INDEL((short)9, "out_frame_indel"),
    OUT_FRAME_VDJ((short)10, "out_frame_vdj"),
    READ_LEN((short)11, "read_len"),
    READ_POS0((short)12, "read_pos0"),
    SCORE((short)13, "score"),
    STOP_CODON((short)14, "stop_codon"),
    SUBSTITUTIONS((short)15, "substitutions");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ALIGNER_ID
          return ALIGNER_ID;
        case 2: // DELETIONS
          return DELETIONS;
        case 3: // IDENTITY
          return IDENTITY;
        case 4: // INSERTIONS
          return INSERTIONS;
        case 5: // INVERTED
          return INVERTED;
        case 6: // MUTATED_INVARIANT
          return MUTATED_INVARIANT;
        case 7: // NAME
          return NAME;
        case 8: // NUM_SYSTEM
          return NUM_SYSTEM;
        case 9: // OUT_FRAME_INDEL
          return OUT_FRAME_INDEL;
        case 10: // OUT_FRAME_VDJ
          return OUT_FRAME_VDJ;
        case 11: // READ_LEN
          return READ_LEN;
        case 12: // READ_POS0
          return READ_POS0;
        case 13: // SCORE
          return SCORE;
        case 14: // STOP_CODON
          return STOP_CODON;
        case 15: // SUBSTITUTIONS
          return SUBSTITUTIONS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __ALIGNER_ID_ISSET_ID = 0;
  private static final int __DELETIONS_ISSET_ID = 1;
  private static final int __INSERTIONS_ISSET_ID = 2;
  private static final int __INVERTED_ISSET_ID = 3;
  private static final int __MUTATED_INVARIANT_ISSET_ID = 4;
  private static final int __OUT_FRAME_INDEL_ISSET_ID = 5;
  private static final int __OUT_FRAME_VDJ_ISSET_ID = 6;
  private static final int __READ_LEN_ISSET_ID = 7;
  private static final int __READ_POS0_ISSET_ID = 8;
  private static final int __SCORE_ISSET_ID = 9;
  private static final int __STOP_CODON_ISSET_ID = 10;
  private static final int __SUBSTITUTIONS_ISSET_ID = 11;
  private short __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.DELETIONS,_Fields.IDENTITY,_Fields.INSERTIONS,_Fields.INVERTED,_Fields.MUTATED_INVARIANT,_Fields.NUM_SYSTEM,_Fields.OUT_FRAME_INDEL,_Fields.OUT_FRAME_VDJ,_Fields.SCORE,_Fields.STOP_CODON,_Fields.SUBSTITUTIONS};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ALIGNER_ID, new org.apache.thrift.meta_data.FieldMetaData("aligner_id", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.DELETIONS, new org.apache.thrift.meta_data.FieldMetaData("deletions", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.IDENTITY, new org.apache.thrift.meta_data.FieldMetaData("identity", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.INSERTIONS, new org.apache.thrift.meta_data.FieldMetaData("insertions", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.INVERTED, new org.apache.thrift.meta_data.FieldMetaData("inverted", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.MUTATED_INVARIANT, new org.apache.thrift.meta_data.FieldMetaData("mutated_invariant", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.NAME, new org.apache.thrift.meta_data.FieldMetaData("name", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.NUM_SYSTEM, new org.apache.thrift.meta_data.FieldMetaData("num_system", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.OUT_FRAME_INDEL, new org.apache.thrift.meta_data.FieldMetaData("out_frame_indel", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.OUT_FRAME_VDJ, new org.apache.thrift.meta_data.FieldMetaData("out_frame_vdj", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.READ_LEN, new org.apache.thrift.meta_data.FieldMetaData("read_len", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.READ_POS0, new org.apache.thrift.meta_data.FieldMetaData("read_pos0", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.SCORE, new org.apache.thrift.meta_data.FieldMetaData("score", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.STOP_CODON, new org.apache.thrift.meta_data.FieldMetaData("stop_codon", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.SUBSTITUTIONS, new org.apache.thrift.meta_data.FieldMetaData("substitutions", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(regionType.class, metaDataMap);
  }

  public regionType() {
  }

  public regionType(
    long aligner_id,
    String name,
    long read_len,
    long read_pos0)
  {
    this();
    this.aligner_id = aligner_id;
    setAligner_idIsSet(true);
    this.name = name;
    this.read_len = read_len;
    setRead_lenIsSet(true);
    this.read_pos0 = read_pos0;
    setRead_pos0IsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public regionType(regionType other) {
    __isset_bitfield = other.__isset_bitfield;
    this.aligner_id = other.aligner_id;
    this.deletions = other.deletions;
    if (other.isSetIdentity()) {
      this.identity = other.identity;
    }
    this.insertions = other.insertions;
    this.inverted = other.inverted;
    this.mutated_invariant = other.mutated_invariant;
    if (other.isSetName()) {
      this.name = other.name;
    }
    if (other.isSetNum_system()) {
      this.num_system = other.num_system;
    }
    this.out_frame_indel = other.out_frame_indel;
    this.out_frame_vdj = other.out_frame_vdj;
    this.read_len = other.read_len;
    this.read_pos0 = other.read_pos0;
    this.score = other.score;
    this.stop_codon = other.stop_codon;
    this.substitutions = other.substitutions;
  }

  public regionType deepCopy() {
    return new regionType(this);
  }

  @Override
  public void clear() {
    setAligner_idIsSet(false);
    this.aligner_id = 0;
    setDeletionsIsSet(false);
    this.deletions = 0;
    this.identity = null;
    setInsertionsIsSet(false);
    this.insertions = 0;
    setInvertedIsSet(false);
    this.inverted = false;
    setMutated_invariantIsSet(false);
    this.mutated_invariant = false;
    this.name = null;
    this.num_system = null;
    setOut_frame_indelIsSet(false);
    this.out_frame_indel = false;
    setOut_frame_vdjIsSet(false);
    this.out_frame_vdj = false;
    setRead_lenIsSet(false);
    this.read_len = 0;
    setRead_pos0IsSet(false);
    this.read_pos0 = 0;
    setScoreIsSet(false);
    this.score = 0;
    setStop_codonIsSet(false);
    this.stop_codon = false;
    setSubstitutionsIsSet(false);
    this.substitutions = 0;
  }

  public long getAligner_id() {
    return this.aligner_id;
  }

  public regionType setAligner_id(long aligner_id) {
    this.aligner_id = aligner_id;
    setAligner_idIsSet(true);
    return this;
  }

  public void unsetAligner_id() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ALIGNER_ID_ISSET_ID);
  }

  /** Returns true if field aligner_id is set (has been assigned a value) and false otherwise */
  public boolean isSetAligner_id() {
    return EncodingUtils.testBit(__isset_bitfield, __ALIGNER_ID_ISSET_ID);
  }

  public void setAligner_idIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ALIGNER_ID_ISSET_ID, value);
  }

  public long getDeletions() {
    return this.deletions;
  }

  public regionType setDeletions(long deletions) {
    this.deletions = deletions;
    setDeletionsIsSet(true);
    return this;
  }

  public void unsetDeletions() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DELETIONS_ISSET_ID);
  }

  /** Returns true if field deletions is set (has been assigned a value) and false otherwise */
  public boolean isSetDeletions() {
    return EncodingUtils.testBit(__isset_bitfield, __DELETIONS_ISSET_ID);
  }

  public void setDeletionsIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __DELETIONS_ISSET_ID, value);
  }

  public String getIdentity() {
    return this.identity;
  }

  public regionType setIdentity(String identity) {
    this.identity = identity;
    return this;
  }

  public void unsetIdentity() {
    this.identity = null;
  }

  /** Returns true if field identity is set (has been assigned a value) and false otherwise */
  public boolean isSetIdentity() {
    return this.identity != null;
  }

  public void setIdentityIsSet(boolean value) {
    if (!value) {
      this.identity = null;
    }
  }

  public long getInsertions() {
    return this.insertions;
  }

  public regionType setInsertions(long insertions) {
    this.insertions = insertions;
    setInsertionsIsSet(true);
    return this;
  }

  public void unsetInsertions() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __INSERTIONS_ISSET_ID);
  }

  /** Returns true if field insertions is set (has been assigned a value) and false otherwise */
  public boolean isSetInsertions() {
    return EncodingUtils.testBit(__isset_bitfield, __INSERTIONS_ISSET_ID);
  }

  public void setInsertionsIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __INSERTIONS_ISSET_ID, value);
  }

  public boolean isInverted() {
    return this.inverted;
  }

  public regionType setInverted(boolean inverted) {
    this.inverted = inverted;
    setInvertedIsSet(true);
    return this;
  }

  public void unsetInverted() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __INVERTED_ISSET_ID);
  }

  /** Returns true if field inverted is set (has been assigned a value) and false otherwise */
  public boolean isSetInverted() {
    return EncodingUtils.testBit(__isset_bitfield, __INVERTED_ISSET_ID);
  }

  public void setInvertedIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __INVERTED_ISSET_ID, value);
  }

  public boolean isMutated_invariant() {
    return this.mutated_invariant;
  }

  public regionType setMutated_invariant(boolean mutated_invariant) {
    this.mutated_invariant = mutated_invariant;
    setMutated_invariantIsSet(true);
    return this;
  }

  public void unsetMutated_invariant() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MUTATED_INVARIANT_ISSET_ID);
  }

  /** Returns true if field mutated_invariant is set (has been assigned a value) and false otherwise */
  public boolean isSetMutated_invariant() {
    return EncodingUtils.testBit(__isset_bitfield, __MUTATED_INVARIANT_ISSET_ID);
  }

  public void setMutated_invariantIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MUTATED_INVARIANT_ISSET_ID, value);
  }

  public String getName() {
    return this.name;
  }

  public regionType setName(String name) {
    this.name = name;
    return this;
  }

  public void unsetName() {
    this.name = null;
  }

  /** Returns true if field name is set (has been assigned a value) and false otherwise */
  public boolean isSetName() {
    return this.name != null;
  }

  public void setNameIsSet(boolean value) {
    if (!value) {
      this.name = null;
    }
  }

  public String getNum_system() {
    return this.num_system;
  }

  public regionType setNum_system(String num_system) {
    this.num_system = num_system;
    return this;
  }

  public void unsetNum_system() {
    this.num_system = null;
  }

  /** Returns true if field num_system is set (has been assigned a value) and false otherwise */
  public boolean isSetNum_system() {
    return this.num_system != null;
  }

  public void setNum_systemIsSet(boolean value) {
    if (!value) {
      this.num_system = null;
    }
  }

  public boolean isOut_frame_indel() {
    return this.out_frame_indel;
  }

  public regionType setOut_frame_indel(boolean out_frame_indel) {
    this.out_frame_indel = out_frame_indel;
    setOut_frame_indelIsSet(true);
    return this;
  }

  public void unsetOut_frame_indel() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __OUT_FRAME_INDEL_ISSET_ID);
  }

  /** Returns true if field out_frame_indel is set (has been assigned a value) and false otherwise */
  public boolean isSetOut_frame_indel() {
    return EncodingUtils.testBit(__isset_bitfield, __OUT_FRAME_INDEL_ISSET_ID);
  }

  public void setOut_frame_indelIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __OUT_FRAME_INDEL_ISSET_ID, value);
  }

  public boolean isOut_frame_vdj() {
    return this.out_frame_vdj;
  }

  public regionType setOut_frame_vdj(boolean out_frame_vdj) {
    this.out_frame_vdj = out_frame_vdj;
    setOut_frame_vdjIsSet(true);
    return this;
  }

  public void unsetOut_frame_vdj() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __OUT_FRAME_VDJ_ISSET_ID);
  }

  /** Returns true if field out_frame_vdj is set (has been assigned a value) and false otherwise */
  public boolean isSetOut_frame_vdj() {
    return EncodingUtils.testBit(__isset_bitfield, __OUT_FRAME_VDJ_ISSET_ID);
  }

  public void setOut_frame_vdjIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __OUT_FRAME_VDJ_ISSET_ID, value);
  }

  public long getRead_len() {
    return this.read_len;
  }

  public regionType setRead_len(long read_len) {
    this.read_len = read_len;
    setRead_lenIsSet(true);
    return this;
  }

  public void unsetRead_len() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __READ_LEN_ISSET_ID);
  }

  /** Returns true if field read_len is set (has been assigned a value) and false otherwise */
  public boolean isSetRead_len() {
    return EncodingUtils.testBit(__isset_bitfield, __READ_LEN_ISSET_ID);
  }

  public void setRead_lenIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __READ_LEN_ISSET_ID, value);
  }

  public long getRead_pos0() {
    return this.read_pos0;
  }

  public regionType setRead_pos0(long read_pos0) {
    this.read_pos0 = read_pos0;
    setRead_pos0IsSet(true);
    return this;
  }

  public void unsetRead_pos0() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __READ_POS0_ISSET_ID);
  }

  /** Returns true if field read_pos0 is set (has been assigned a value) and false otherwise */
  public boolean isSetRead_pos0() {
    return EncodingUtils.testBit(__isset_bitfield, __READ_POS0_ISSET_ID);
  }

  public void setRead_pos0IsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __READ_POS0_ISSET_ID, value);
  }

  public long getScore() {
    return this.score;
  }

  public regionType setScore(long score) {
    this.score = score;
    setScoreIsSet(true);
    return this;
  }

  public void unsetScore() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SCORE_ISSET_ID);
  }

  /** Returns true if field score is set (has been assigned a value) and false otherwise */
  public boolean isSetScore() {
    return EncodingUtils.testBit(__isset_bitfield, __SCORE_ISSET_ID);
  }

  public void setScoreIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SCORE_ISSET_ID, value);
  }

  public boolean isStop_codon() {
    return this.stop_codon;
  }

  public regionType setStop_codon(boolean stop_codon) {
    this.stop_codon = stop_codon;
    setStop_codonIsSet(true);
    return this;
  }

  public void unsetStop_codon() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __STOP_CODON_ISSET_ID);
  }

  /** Returns true if field stop_codon is set (has been assigned a value) and false otherwise */
  public boolean isSetStop_codon() {
    return EncodingUtils.testBit(__isset_bitfield, __STOP_CODON_ISSET_ID);
  }

  public void setStop_codonIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __STOP_CODON_ISSET_ID, value);
  }

  public long getSubstitutions() {
    return this.substitutions;
  }

  public regionType setSubstitutions(long substitutions) {
    this.substitutions = substitutions;
    setSubstitutionsIsSet(true);
    return this;
  }

  public void unsetSubstitutions() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUBSTITUTIONS_ISSET_ID);
  }

  /** Returns true if field substitutions is set (has been assigned a value) and false otherwise */
  public boolean isSetSubstitutions() {
    return EncodingUtils.testBit(__isset_bitfield, __SUBSTITUTIONS_ISSET_ID);
  }

  public void setSubstitutionsIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUBSTITUTIONS_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case ALIGNER_ID:
      if (value == null) {
        unsetAligner_id();
      } else {
        setAligner_id((Long)value);
      }
      break;

    case DELETIONS:
      if (value == null) {
        unsetDeletions();
      } else {
        setDeletions((Long)value);
      }
      break;

    case IDENTITY:
      if (value == null) {
        unsetIdentity();
      } else {
        setIdentity((String)value);
      }
      break;

    case INSERTIONS:
      if (value == null) {
        unsetInsertions();
      } else {
        setInsertions((Long)value);
      }
      break;

    case INVERTED:
      if (value == null) {
        unsetInverted();
      } else {
        setInverted((Boolean)value);
      }
      break;

    case MUTATED_INVARIANT:
      if (value == null) {
        unsetMutated_invariant();
      } else {
        setMutated_invariant((Boolean)value);
      }
      break;

    case NAME:
      if (value == null) {
        unsetName();
      } else {
        setName((String)value);
      }
      break;

    case NUM_SYSTEM:
      if (value == null) {
        unsetNum_system();
      } else {
        setNum_system((String)value);
      }
      break;

    case OUT_FRAME_INDEL:
      if (value == null) {
        unsetOut_frame_indel();
      } else {
        setOut_frame_indel((Boolean)value);
      }
      break;

    case OUT_FRAME_VDJ:
      if (value == null) {
        unsetOut_frame_vdj();
      } else {
        setOut_frame_vdj((Boolean)value);
      }
      break;

    case READ_LEN:
      if (value == null) {
        unsetRead_len();
      } else {
        setRead_len((Long)value);
      }
      break;

    case READ_POS0:
      if (value == null) {
        unsetRead_pos0();
      } else {
        setRead_pos0((Long)value);
      }
      break;

    case SCORE:
      if (value == null) {
        unsetScore();
      } else {
        setScore((Long)value);
      }
      break;

    case STOP_CODON:
      if (value == null) {
        unsetStop_codon();
      } else {
        setStop_codon((Boolean)value);
      }
      break;

    case SUBSTITUTIONS:
      if (value == null) {
        unsetSubstitutions();
      } else {
        setSubstitutions((Long)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case ALIGNER_ID:
      return getAligner_id();

    case DELETIONS:
      return getDeletions();

    case IDENTITY:
      return getIdentity();

    case INSERTIONS:
      return getInsertions();

    case INVERTED:
      return isInverted();

    case MUTATED_INVARIANT:
      return isMutated_invariant();

    case NAME:
      return getName();

    case NUM_SYSTEM:
      return getNum_system();

    case OUT_FRAME_INDEL:
      return isOut_frame_indel();

    case OUT_FRAME_VDJ:
      return isOut_frame_vdj();

    case READ_LEN:
      return getRead_len();

    case READ_POS0:
      return getRead_pos0();

    case SCORE:
      return getScore();

    case STOP_CODON:
      return isStop_codon();

    case SUBSTITUTIONS:
      return getSubstitutions();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case ALIGNER_ID:
      return isSetAligner_id();
    case DELETIONS:
      return isSetDeletions();
    case IDENTITY:
      return isSetIdentity();
    case INSERTIONS:
      return isSetInsertions();
    case INVERTED:
      return isSetInverted();
    case MUTATED_INVARIANT:
      return isSetMutated_invariant();
    case NAME:
      return isSetName();
    case NUM_SYSTEM:
      return isSetNum_system();
    case OUT_FRAME_INDEL:
      return isSetOut_frame_indel();
    case OUT_FRAME_VDJ:
      return isSetOut_frame_vdj();
    case READ_LEN:
      return isSetRead_len();
    case READ_POS0:
      return isSetRead_pos0();
    case SCORE:
      return isSetScore();
    case STOP_CODON:
      return isSetStop_codon();
    case SUBSTITUTIONS:
      return isSetSubstitutions();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof regionType)
      return this.equals((regionType)that);
    return false;
  }

  public boolean equals(regionType that) {
    if (that == null)
      return false;

    boolean this_present_aligner_id = true;
    boolean that_present_aligner_id = true;
    if (this_present_aligner_id || that_present_aligner_id) {
      if (!(this_present_aligner_id && that_present_aligner_id))
        return false;
      if (this.aligner_id != that.aligner_id)
        return false;
    }

    boolean this_present_deletions = true && this.isSetDeletions();
    boolean that_present_deletions = true && that.isSetDeletions();
    if (this_present_deletions || that_present_deletions) {
      if (!(this_present_deletions && that_present_deletions))
        return false;
      if (this.deletions != that.deletions)
        return false;
    }

    boolean this_present_identity = true && this.isSetIdentity();
    boolean that_present_identity = true && that.isSetIdentity();
    if (this_present_identity || that_present_identity) {
      if (!(this_present_identity && that_present_identity))
        return false;
      if (!this.identity.equals(that.identity))
        return false;
    }

    boolean this_present_insertions = true && this.isSetInsertions();
    boolean that_present_insertions = true && that.isSetInsertions();
    if (this_present_insertions || that_present_insertions) {
      if (!(this_present_insertions && that_present_insertions))
        return false;
      if (this.insertions != that.insertions)
        return false;
    }

    boolean this_present_inverted = true && this.isSetInverted();
    boolean that_present_inverted = true && that.isSetInverted();
    if (this_present_inverted || that_present_inverted) {
      if (!(this_present_inverted && that_present_inverted))
        return false;
      if (this.inverted != that.inverted)
        return false;
    }

    boolean this_present_mutated_invariant = true && this.isSetMutated_invariant();
    boolean that_present_mutated_invariant = true && that.isSetMutated_invariant();
    if (this_present_mutated_invariant || that_present_mutated_invariant) {
      if (!(this_present_mutated_invariant && that_present_mutated_invariant))
        return false;
      if (this.mutated_invariant != that.mutated_invariant)
        return false;
    }

    boolean this_present_name = true && this.isSetName();
    boolean that_present_name = true && that.isSetName();
    if (this_present_name || that_present_name) {
      if (!(this_present_name && that_present_name))
        return false;
      if (!this.name.equals(that.name))
        return false;
    }

    boolean this_present_num_system = true && this.isSetNum_system();
    boolean that_present_num_system = true && that.isSetNum_system();
    if (this_present_num_system || that_present_num_system) {
      if (!(this_present_num_system && that_present_num_system))
        return false;
      if (!this.num_system.equals(that.num_system))
        return false;
    }

    boolean this_present_out_frame_indel = true && this.isSetOut_frame_indel();
    boolean that_present_out_frame_indel = true && that.isSetOut_frame_indel();
    if (this_present_out_frame_indel || that_present_out_frame_indel) {
      if (!(this_present_out_frame_indel && that_present_out_frame_indel))
        return false;
      if (this.out_frame_indel != that.out_frame_indel)
        return false;
    }

    boolean this_present_out_frame_vdj = true && this.isSetOut_frame_vdj();
    boolean that_present_out_frame_vdj = true && that.isSetOut_frame_vdj();
    if (this_present_out_frame_vdj || that_present_out_frame_vdj) {
      if (!(this_present_out_frame_vdj && that_present_out_frame_vdj))
        return false;
      if (this.out_frame_vdj != that.out_frame_vdj)
        return false;
    }

    boolean this_present_read_len = true;
    boolean that_present_read_len = true;
    if (this_present_read_len || that_present_read_len) {
      if (!(this_present_read_len && that_present_read_len))
        return false;
      if (this.read_len != that.read_len)
        return false;
    }

    boolean this_present_read_pos0 = true;
    boolean that_present_read_pos0 = true;
    if (this_present_read_pos0 || that_present_read_pos0) {
      if (!(this_present_read_pos0 && that_present_read_pos0))
        return false;
      if (this.read_pos0 != that.read_pos0)
        return false;
    }

    boolean this_present_score = true && this.isSetScore();
    boolean that_present_score = true && that.isSetScore();
    if (this_present_score || that_present_score) {
      if (!(this_present_score && that_present_score))
        return false;
      if (this.score != that.score)
        return false;
    }

    boolean this_present_stop_codon = true && this.isSetStop_codon();
    boolean that_present_stop_codon = true && that.isSetStop_codon();
    if (this_present_stop_codon || that_present_stop_codon) {
      if (!(this_present_stop_codon && that_present_stop_codon))
        return false;
      if (this.stop_codon != that.stop_codon)
        return false;
    }

    boolean this_present_substitutions = true && this.isSetSubstitutions();
    boolean that_present_substitutions = true && that.isSetSubstitutions();
    if (this_present_substitutions || that_present_substitutions) {
      if (!(this_present_substitutions && that_present_substitutions))
        return false;
      if (this.substitutions != that.substitutions)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_aligner_id = true;
    list.add(present_aligner_id);
    if (present_aligner_id)
      list.add(aligner_id);

    boolean present_deletions = true && (isSetDeletions());
    list.add(present_deletions);
    if (present_deletions)
      list.add(deletions);

    boolean present_identity = true && (isSetIdentity());
    list.add(present_identity);
    if (present_identity)
      list.add(identity);

    boolean present_insertions = true && (isSetInsertions());
    list.add(present_insertions);
    if (present_insertions)
      list.add(insertions);

    boolean present_inverted = true && (isSetInverted());
    list.add(present_inverted);
    if (present_inverted)
      list.add(inverted);

    boolean present_mutated_invariant = true && (isSetMutated_invariant());
    list.add(present_mutated_invariant);
    if (present_mutated_invariant)
      list.add(mutated_invariant);

    boolean present_name = true && (isSetName());
    list.add(present_name);
    if (present_name)
      list.add(name);

    boolean present_num_system = true && (isSetNum_system());
    list.add(present_num_system);
    if (present_num_system)
      list.add(num_system);

    boolean present_out_frame_indel = true && (isSetOut_frame_indel());
    list.add(present_out_frame_indel);
    if (present_out_frame_indel)
      list.add(out_frame_indel);

    boolean present_out_frame_vdj = true && (isSetOut_frame_vdj());
    list.add(present_out_frame_vdj);
    if (present_out_frame_vdj)
      list.add(out_frame_vdj);

    boolean present_read_len = true;
    list.add(present_read_len);
    if (present_read_len)
      list.add(read_len);

    boolean present_read_pos0 = true;
    list.add(present_read_pos0);
    if (present_read_pos0)
      list.add(read_pos0);

    boolean present_score = true && (isSetScore());
    list.add(present_score);
    if (present_score)
      list.add(score);

    boolean present_stop_codon = true && (isSetStop_codon());
    list.add(present_stop_codon);
    if (present_stop_codon)
      list.add(stop_codon);

    boolean present_substitutions = true && (isSetSubstitutions());
    list.add(present_substitutions);
    if (present_substitutions)
      list.add(substitutions);

    return list.hashCode();
  }

  @Override
  public int compareTo(regionType other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetAligner_id()).compareTo(other.isSetAligner_id());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAligner_id()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.aligner_id, other.aligner_id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDeletions()).compareTo(other.isSetDeletions());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDeletions()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.deletions, other.deletions);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIdentity()).compareTo(other.isSetIdentity());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIdentity()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.identity, other.identity);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetInsertions()).compareTo(other.isSetInsertions());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetInsertions()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.insertions, other.insertions);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetInverted()).compareTo(other.isSetInverted());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetInverted()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.inverted, other.inverted);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMutated_invariant()).compareTo(other.isSetMutated_invariant());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMutated_invariant()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mutated_invariant, other.mutated_invariant);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetName()).compareTo(other.isSetName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.name, other.name);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNum_system()).compareTo(other.isSetNum_system());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNum_system()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.num_system, other.num_system);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOut_frame_indel()).compareTo(other.isSetOut_frame_indel());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOut_frame_indel()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.out_frame_indel, other.out_frame_indel);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOut_frame_vdj()).compareTo(other.isSetOut_frame_vdj());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOut_frame_vdj()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.out_frame_vdj, other.out_frame_vdj);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRead_len()).compareTo(other.isSetRead_len());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRead_len()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.read_len, other.read_len);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRead_pos0()).compareTo(other.isSetRead_pos0());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRead_pos0()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.read_pos0, other.read_pos0);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetScore()).compareTo(other.isSetScore());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetScore()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.score, other.score);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStop_codon()).compareTo(other.isSetStop_codon());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStop_codon()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.stop_codon, other.stop_codon);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSubstitutions()).compareTo(other.isSetSubstitutions());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSubstitutions()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.substitutions, other.substitutions);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("regionType(");
    boolean first = true;

    sb.append("aligner_id:");
    sb.append(this.aligner_id);
    first = false;
    if (isSetDeletions()) {
      if (!first) sb.append(", ");
      sb.append("deletions:");
      sb.append(this.deletions);
      first = false;
    }
    if (isSetIdentity()) {
      if (!first) sb.append(", ");
      sb.append("identity:");
      if (this.identity == null) {
        sb.append("null");
      } else {
        sb.append(this.identity);
      }
      first = false;
    }
    if (isSetInsertions()) {
      if (!first) sb.append(", ");
      sb.append("insertions:");
      sb.append(this.insertions);
      first = false;
    }
    if (isSetInverted()) {
      if (!first) sb.append(", ");
      sb.append("inverted:");
      sb.append(this.inverted);
      first = false;
    }
    if (isSetMutated_invariant()) {
      if (!first) sb.append(", ");
      sb.append("mutated_invariant:");
      sb.append(this.mutated_invariant);
      first = false;
    }
    if (!first) sb.append(", ");
    sb.append("name:");
    if (this.name == null) {
      sb.append("null");
    } else {
      sb.append(this.name);
    }
    first = false;
    if (isSetNum_system()) {
      if (!first) sb.append(", ");
      sb.append("num_system:");
      if (this.num_system == null) {
        sb.append("null");
      } else {
        sb.append(this.num_system);
      }
      first = false;
    }
    if (isSetOut_frame_indel()) {
      if (!first) sb.append(", ");
      sb.append("out_frame_indel:");
      sb.append(this.out_frame_indel);
      first = false;
    }
    if (isSetOut_frame_vdj()) {
      if (!first) sb.append(", ");
      sb.append("out_frame_vdj:");
      sb.append(this.out_frame_vdj);
      first = false;
    }
    if (!first) sb.append(", ");
    sb.append("read_len:");
    sb.append(this.read_len);
    first = false;
    if (!first) sb.append(", ");
    sb.append("read_pos0:");
    sb.append(this.read_pos0);
    first = false;
    if (isSetScore()) {
      if (!first) sb.append(", ");
      sb.append("score:");
      sb.append(this.score);
      first = false;
    }
    if (isSetStop_codon()) {
      if (!first) sb.append(", ");
      sb.append("stop_codon:");
      sb.append(this.stop_codon);
      first = false;
    }
    if (isSetSubstitutions()) {
      if (!first) sb.append(", ");
      sb.append("substitutions:");
      sb.append(this.substitutions);
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // alas, we cannot check 'aligner_id' because it's a primitive and you chose the non-beans generator.
    if (name == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'name' was not present! Struct: " + toString());
    }
    // alas, we cannot check 'read_len' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'read_pos0' because it's a primitive and you chose the non-beans generator.
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class regionTypeStandardSchemeFactory implements SchemeFactory {
    public regionTypeStandardScheme getScheme() {
      return new regionTypeStandardScheme();
    }
  }

  private static class regionTypeStandardScheme extends StandardScheme<regionType> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, regionType struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ALIGNER_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.aligner_id = iprot.readI64();
              struct.setAligner_idIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // DELETIONS
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.deletions = iprot.readI64();
              struct.setDeletionsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // IDENTITY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.identity = iprot.readString();
              struct.setIdentityIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // INSERTIONS
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.insertions = iprot.readI64();
              struct.setInsertionsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // INVERTED
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.inverted = iprot.readBool();
              struct.setInvertedIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // MUTATED_INVARIANT
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.mutated_invariant = iprot.readBool();
              struct.setMutated_invariantIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.name = iprot.readString();
              struct.setNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // NUM_SYSTEM
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.num_system = iprot.readString();
              struct.setNum_systemIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // OUT_FRAME_INDEL
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.out_frame_indel = iprot.readBool();
              struct.setOut_frame_indelIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // OUT_FRAME_VDJ
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.out_frame_vdj = iprot.readBool();
              struct.setOut_frame_vdjIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // READ_LEN
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.read_len = iprot.readI64();
              struct.setRead_lenIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // READ_POS0
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.read_pos0 = iprot.readI64();
              struct.setRead_pos0IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // SCORE
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.score = iprot.readI64();
              struct.setScoreIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // STOP_CODON
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.stop_codon = iprot.readBool();
              struct.setStop_codonIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // SUBSTITUTIONS
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.substitutions = iprot.readI64();
              struct.setSubstitutionsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      if (!struct.isSetAligner_id()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'aligner_id' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetRead_len()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'read_len' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetRead_pos0()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'read_pos0' was not found in serialized data! Struct: " + toString());
      }
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, regionType struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(ALIGNER_ID_FIELD_DESC);
      oprot.writeI64(struct.aligner_id);
      oprot.writeFieldEnd();
      if (struct.isSetDeletions()) {
        oprot.writeFieldBegin(DELETIONS_FIELD_DESC);
        oprot.writeI64(struct.deletions);
        oprot.writeFieldEnd();
      }
      if (struct.identity != null) {
        if (struct.isSetIdentity()) {
          oprot.writeFieldBegin(IDENTITY_FIELD_DESC);
          oprot.writeString(struct.identity);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetInsertions()) {
        oprot.writeFieldBegin(INSERTIONS_FIELD_DESC);
        oprot.writeI64(struct.insertions);
        oprot.writeFieldEnd();
      }
      if (struct.isSetInverted()) {
        oprot.writeFieldBegin(INVERTED_FIELD_DESC);
        oprot.writeBool(struct.inverted);
        oprot.writeFieldEnd();
      }
      if (struct.isSetMutated_invariant()) {
        oprot.writeFieldBegin(MUTATED_INVARIANT_FIELD_DESC);
        oprot.writeBool(struct.mutated_invariant);
        oprot.writeFieldEnd();
      }
      if (struct.name != null) {
        oprot.writeFieldBegin(NAME_FIELD_DESC);
        oprot.writeString(struct.name);
        oprot.writeFieldEnd();
      }
      if (struct.num_system != null) {
        if (struct.isSetNum_system()) {
          oprot.writeFieldBegin(NUM_SYSTEM_FIELD_DESC);
          oprot.writeString(struct.num_system);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetOut_frame_indel()) {
        oprot.writeFieldBegin(OUT_FRAME_INDEL_FIELD_DESC);
        oprot.writeBool(struct.out_frame_indel);
        oprot.writeFieldEnd();
      }
      if (struct.isSetOut_frame_vdj()) {
        oprot.writeFieldBegin(OUT_FRAME_VDJ_FIELD_DESC);
        oprot.writeBool(struct.out_frame_vdj);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(READ_LEN_FIELD_DESC);
      oprot.writeI64(struct.read_len);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(READ_POS0_FIELD_DESC);
      oprot.writeI64(struct.read_pos0);
      oprot.writeFieldEnd();
      if (struct.isSetScore()) {
        oprot.writeFieldBegin(SCORE_FIELD_DESC);
        oprot.writeI64(struct.score);
        oprot.writeFieldEnd();
      }
      if (struct.isSetStop_codon()) {
        oprot.writeFieldBegin(STOP_CODON_FIELD_DESC);
        oprot.writeBool(struct.stop_codon);
        oprot.writeFieldEnd();
      }
      if (struct.isSetSubstitutions()) {
        oprot.writeFieldBegin(SUBSTITUTIONS_FIELD_DESC);
        oprot.writeI64(struct.substitutions);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class regionTypeTupleSchemeFactory implements SchemeFactory {
    public regionTypeTupleScheme getScheme() {
      return new regionTypeTupleScheme();
    }
  }

  private static class regionTypeTupleScheme extends TupleScheme<regionType> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, regionType struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeI64(struct.aligner_id);
      oprot.writeString(struct.name);
      oprot.writeI64(struct.read_len);
      oprot.writeI64(struct.read_pos0);
      BitSet optionals = new BitSet();
      if (struct.isSetDeletions()) {
        optionals.set(0);
      }
      if (struct.isSetIdentity()) {
        optionals.set(1);
      }
      if (struct.isSetInsertions()) {
        optionals.set(2);
      }
      if (struct.isSetInverted()) {
        optionals.set(3);
      }
      if (struct.isSetMutated_invariant()) {
        optionals.set(4);
      }
      if (struct.isSetNum_system()) {
        optionals.set(5);
      }
      if (struct.isSetOut_frame_indel()) {
        optionals.set(6);
      }
      if (struct.isSetOut_frame_vdj()) {
        optionals.set(7);
      }
      if (struct.isSetScore()) {
        optionals.set(8);
      }
      if (struct.isSetStop_codon()) {
        optionals.set(9);
      }
      if (struct.isSetSubstitutions()) {
        optionals.set(10);
      }
      oprot.writeBitSet(optionals, 11);
      if (struct.isSetDeletions()) {
        oprot.writeI64(struct.deletions);
      }
      if (struct.isSetIdentity()) {
        oprot.writeString(struct.identity);
      }
      if (struct.isSetInsertions()) {
        oprot.writeI64(struct.insertions);
      }
      if (struct.isSetInverted()) {
        oprot.writeBool(struct.inverted);
      }
      if (struct.isSetMutated_invariant()) {
        oprot.writeBool(struct.mutated_invariant);
      }
      if (struct.isSetNum_system()) {
        oprot.writeString(struct.num_system);
      }
      if (struct.isSetOut_frame_indel()) {
        oprot.writeBool(struct.out_frame_indel);
      }
      if (struct.isSetOut_frame_vdj()) {
        oprot.writeBool(struct.out_frame_vdj);
      }
      if (struct.isSetScore()) {
        oprot.writeI64(struct.score);
      }
      if (struct.isSetStop_codon()) {
        oprot.writeBool(struct.stop_codon);
      }
      if (struct.isSetSubstitutions()) {
        oprot.writeI64(struct.substitutions);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, regionType struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.aligner_id = iprot.readI64();
      struct.setAligner_idIsSet(true);
      struct.name = iprot.readString();
      struct.setNameIsSet(true);
      struct.read_len = iprot.readI64();
      struct.setRead_lenIsSet(true);
      struct.read_pos0 = iprot.readI64();
      struct.setRead_pos0IsSet(true);
      BitSet incoming = iprot.readBitSet(11);
      if (incoming.get(0)) {
        struct.deletions = iprot.readI64();
        struct.setDeletionsIsSet(true);
      }
      if (incoming.get(1)) {
        struct.identity = iprot.readString();
        struct.setIdentityIsSet(true);
      }
      if (incoming.get(2)) {
        struct.insertions = iprot.readI64();
        struct.setInsertionsIsSet(true);
      }
      if (incoming.get(3)) {
        struct.inverted = iprot.readBool();
        struct.setInvertedIsSet(true);
      }
      if (incoming.get(4)) {
        struct.mutated_invariant = iprot.readBool();
        struct.setMutated_invariantIsSet(true);
      }
      if (incoming.get(5)) {
        struct.num_system = iprot.readString();
        struct.setNum_systemIsSet(true);
      }
      if (incoming.get(6)) {
        struct.out_frame_indel = iprot.readBool();
        struct.setOut_frame_indelIsSet(true);
      }
      if (incoming.get(7)) {
        struct.out_frame_vdj = iprot.readBool();
        struct.setOut_frame_vdjIsSet(true);
      }
      if (incoming.get(8)) {
        struct.score = iprot.readI64();
        struct.setScoreIsSet(true);
      }
      if (incoming.get(9)) {
        struct.stop_codon = iprot.readBool();
        struct.setStop_codonIsSet(true);
      }
      if (incoming.get(10)) {
        struct.substitutions = iprot.readI64();
        struct.setSubstitutionsIsSet(true);
      }
    }
  }

}

