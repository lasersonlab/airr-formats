/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package vdjserver;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2016-06-07")
public class combinationType implements org.apache.thrift.TBase<combinationType, combinationType._Fields>, java.io.Serializable, Cloneable, Comparable<combinationType> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("combinationType");

  private static final org.apache.thrift.protocol.TField REGION_FIELD_DESC = new org.apache.thrift.protocol.TField("region", org.apache.thrift.protocol.TType.LIST, (short)1);
  private static final org.apache.thrift.protocol.TField SEGMENTS_FIELD_DESC = new org.apache.thrift.protocol.TField("segments", org.apache.thrift.protocol.TType.LIST, (short)2);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new combinationTypeStandardSchemeFactory());
    schemes.put(TupleScheme.class, new combinationTypeTupleSchemeFactory());
  }

  public List<regionType> region; // optional
  public List<Long> segments; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    REGION((short)1, "region"),
    SEGMENTS((short)2, "segments");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // REGION
          return REGION;
        case 2: // SEGMENTS
          return SEGMENTS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final _Fields optionals[] = {_Fields.REGION};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.REGION, new org.apache.thrift.meta_data.FieldMetaData("region", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, regionType.class))));
    tmpMap.put(_Fields.SEGMENTS, new org.apache.thrift.meta_data.FieldMetaData("segments", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(combinationType.class, metaDataMap);
  }

  public combinationType() {
  }

  public combinationType(
    List<Long> segments)
  {
    this();
    this.segments = segments;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public combinationType(combinationType other) {
    if (other.isSetRegion()) {
      List<regionType> __this__region = new ArrayList<regionType>(other.region.size());
      for (regionType other_element : other.region) {
        __this__region.add(new regionType(other_element));
      }
      this.region = __this__region;
    }
    if (other.isSetSegments()) {
      List<Long> __this__segments = new ArrayList<Long>(other.segments);
      this.segments = __this__segments;
    }
  }

  public combinationType deepCopy() {
    return new combinationType(this);
  }

  @Override
  public void clear() {
    this.region = null;
    this.segments = null;
  }

  public int getRegionSize() {
    return (this.region == null) ? 0 : this.region.size();
  }

  public java.util.Iterator<regionType> getRegionIterator() {
    return (this.region == null) ? null : this.region.iterator();
  }

  public void addToRegion(regionType elem) {
    if (this.region == null) {
      this.region = new ArrayList<regionType>();
    }
    this.region.add(elem);
  }

  public List<regionType> getRegion() {
    return this.region;
  }

  public combinationType setRegion(List<regionType> region) {
    this.region = region;
    return this;
  }

  public void unsetRegion() {
    this.region = null;
  }

  /** Returns true if field region is set (has been assigned a value) and false otherwise */
  public boolean isSetRegion() {
    return this.region != null;
  }

  public void setRegionIsSet(boolean value) {
    if (!value) {
      this.region = null;
    }
  }

  public int getSegmentsSize() {
    return (this.segments == null) ? 0 : this.segments.size();
  }

  public java.util.Iterator<Long> getSegmentsIterator() {
    return (this.segments == null) ? null : this.segments.iterator();
  }

  public void addToSegments(long elem) {
    if (this.segments == null) {
      this.segments = new ArrayList<Long>();
    }
    this.segments.add(elem);
  }

  public List<Long> getSegments() {
    return this.segments;
  }

  public combinationType setSegments(List<Long> segments) {
    this.segments = segments;
    return this;
  }

  public void unsetSegments() {
    this.segments = null;
  }

  /** Returns true if field segments is set (has been assigned a value) and false otherwise */
  public boolean isSetSegments() {
    return this.segments != null;
  }

  public void setSegmentsIsSet(boolean value) {
    if (!value) {
      this.segments = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case REGION:
      if (value == null) {
        unsetRegion();
      } else {
        setRegion((List<regionType>)value);
      }
      break;

    case SEGMENTS:
      if (value == null) {
        unsetSegments();
      } else {
        setSegments((List<Long>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case REGION:
      return getRegion();

    case SEGMENTS:
      return getSegments();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case REGION:
      return isSetRegion();
    case SEGMENTS:
      return isSetSegments();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof combinationType)
      return this.equals((combinationType)that);
    return false;
  }

  public boolean equals(combinationType that) {
    if (that == null)
      return false;

    boolean this_present_region = true && this.isSetRegion();
    boolean that_present_region = true && that.isSetRegion();
    if (this_present_region || that_present_region) {
      if (!(this_present_region && that_present_region))
        return false;
      if (!this.region.equals(that.region))
        return false;
    }

    boolean this_present_segments = true && this.isSetSegments();
    boolean that_present_segments = true && that.isSetSegments();
    if (this_present_segments || that_present_segments) {
      if (!(this_present_segments && that_present_segments))
        return false;
      if (!this.segments.equals(that.segments))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_region = true && (isSetRegion());
    list.add(present_region);
    if (present_region)
      list.add(region);

    boolean present_segments = true && (isSetSegments());
    list.add(present_segments);
    if (present_segments)
      list.add(segments);

    return list.hashCode();
  }

  @Override
  public int compareTo(combinationType other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetRegion()).compareTo(other.isSetRegion());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRegion()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.region, other.region);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSegments()).compareTo(other.isSetSegments());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSegments()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.segments, other.segments);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("combinationType(");
    boolean first = true;

    if (isSetRegion()) {
      sb.append("region:");
      if (this.region == null) {
        sb.append("null");
      } else {
        sb.append(this.region);
      }
      first = false;
    }
    if (!first) sb.append(", ");
    sb.append("segments:");
    if (this.segments == null) {
      sb.append("null");
    } else {
      sb.append(this.segments);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (segments == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'segments' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class combinationTypeStandardSchemeFactory implements SchemeFactory {
    public combinationTypeStandardScheme getScheme() {
      return new combinationTypeStandardScheme();
    }
  }

  private static class combinationTypeStandardScheme extends StandardScheme<combinationType> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, combinationType struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // REGION
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list16 = iprot.readListBegin();
                struct.region = new ArrayList<regionType>(_list16.size);
                regionType _elem17;
                for (int _i18 = 0; _i18 < _list16.size; ++_i18)
                {
                  _elem17 = new regionType();
                  _elem17.read(iprot);
                  struct.region.add(_elem17);
                }
                iprot.readListEnd();
              }
              struct.setRegionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // SEGMENTS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list19 = iprot.readListBegin();
                struct.segments = new ArrayList<Long>(_list19.size);
                long _elem20;
                for (int _i21 = 0; _i21 < _list19.size; ++_i21)
                {
                  _elem20 = iprot.readI64();
                  struct.segments.add(_elem20);
                }
                iprot.readListEnd();
              }
              struct.setSegmentsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, combinationType struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.region != null) {
        if (struct.isSetRegion()) {
          oprot.writeFieldBegin(REGION_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.region.size()));
            for (regionType _iter22 : struct.region)
            {
              _iter22.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.segments != null) {
        oprot.writeFieldBegin(SEGMENTS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64, struct.segments.size()));
          for (long _iter23 : struct.segments)
          {
            oprot.writeI64(_iter23);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class combinationTypeTupleSchemeFactory implements SchemeFactory {
    public combinationTypeTupleScheme getScheme() {
      return new combinationTypeTupleScheme();
    }
  }

  private static class combinationTypeTupleScheme extends TupleScheme<combinationType> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, combinationType struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      {
        oprot.writeI32(struct.segments.size());
        for (long _iter24 : struct.segments)
        {
          oprot.writeI64(_iter24);
        }
      }
      BitSet optionals = new BitSet();
      if (struct.isSetRegion()) {
        optionals.set(0);
      }
      oprot.writeBitSet(optionals, 1);
      if (struct.isSetRegion()) {
        {
          oprot.writeI32(struct.region.size());
          for (regionType _iter25 : struct.region)
          {
            _iter25.write(oprot);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, combinationType struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      {
        org.apache.thrift.protocol.TList _list26 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64, iprot.readI32());
        struct.segments = new ArrayList<Long>(_list26.size);
        long _elem27;
        for (int _i28 = 0; _i28 < _list26.size; ++_i28)
        {
          _elem27 = iprot.readI64();
          struct.segments.add(_elem27);
        }
      }
      struct.setSegmentsIsSet(true);
      BitSet incoming = iprot.readBitSet(1);
      if (incoming.get(0)) {
        {
          org.apache.thrift.protocol.TList _list29 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.region = new ArrayList<regionType>(_list29.size);
          regionType _elem30;
          for (int _i31 = 0; _i31 < _list29.size; ++_i31)
          {
            _elem30 = new regionType();
            _elem30.read(iprot);
            struct.region.add(_elem30);
          }
        }
        struct.setRegionIsSet(true);
      }
    }
  }

}

