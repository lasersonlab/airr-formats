/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package vdjserver;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2016-06-07")
public class vdj_alignmentType implements org.apache.thrift.TBase<vdj_alignmentType, vdj_alignmentType._Fields>, java.io.Serializable, Cloneable, Comparable<vdj_alignmentType> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("vdj_alignmentType");

  private static final org.apache.thrift.protocol.TField COMBINATION_FIELD_DESC = new org.apache.thrift.protocol.TField("combination", org.apache.thrift.protocol.TType.LIST, (short)1);
  private static final org.apache.thrift.protocol.TField SEGMENT_MATCH_FIELD_DESC = new org.apache.thrift.protocol.TField("segment_match", org.apache.thrift.protocol.TType.LIST, (short)2);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new vdj_alignmentTypeStandardSchemeFactory());
    schemes.put(TupleScheme.class, new vdj_alignmentTypeTupleSchemeFactory());
  }

  public List<combinationType> combination; // required
  public List<segment_matchType> segment_match; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    COMBINATION((short)1, "combination"),
    SEGMENT_MATCH((short)2, "segment_match");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // COMBINATION
          return COMBINATION;
        case 2: // SEGMENT_MATCH
          return SEGMENT_MATCH;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.COMBINATION, new org.apache.thrift.meta_data.FieldMetaData("combination", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, combinationType.class))));
    tmpMap.put(_Fields.SEGMENT_MATCH, new org.apache.thrift.meta_data.FieldMetaData("segment_match", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, segment_matchType.class))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(vdj_alignmentType.class, metaDataMap);
  }

  public vdj_alignmentType() {
  }

  public vdj_alignmentType(
    List<combinationType> combination,
    List<segment_matchType> segment_match)
  {
    this();
    this.combination = combination;
    this.segment_match = segment_match;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public vdj_alignmentType(vdj_alignmentType other) {
    if (other.isSetCombination()) {
      List<combinationType> __this__combination = new ArrayList<combinationType>(other.combination.size());
      for (combinationType other_element : other.combination) {
        __this__combination.add(new combinationType(other_element));
      }
      this.combination = __this__combination;
    }
    if (other.isSetSegment_match()) {
      List<segment_matchType> __this__segment_match = new ArrayList<segment_matchType>(other.segment_match.size());
      for (segment_matchType other_element : other.segment_match) {
        __this__segment_match.add(new segment_matchType(other_element));
      }
      this.segment_match = __this__segment_match;
    }
  }

  public vdj_alignmentType deepCopy() {
    return new vdj_alignmentType(this);
  }

  @Override
  public void clear() {
    this.combination = null;
    this.segment_match = null;
  }

  public int getCombinationSize() {
    return (this.combination == null) ? 0 : this.combination.size();
  }

  public java.util.Iterator<combinationType> getCombinationIterator() {
    return (this.combination == null) ? null : this.combination.iterator();
  }

  public void addToCombination(combinationType elem) {
    if (this.combination == null) {
      this.combination = new ArrayList<combinationType>();
    }
    this.combination.add(elem);
  }

  public List<combinationType> getCombination() {
    return this.combination;
  }

  public vdj_alignmentType setCombination(List<combinationType> combination) {
    this.combination = combination;
    return this;
  }

  public void unsetCombination() {
    this.combination = null;
  }

  /** Returns true if field combination is set (has been assigned a value) and false otherwise */
  public boolean isSetCombination() {
    return this.combination != null;
  }

  public void setCombinationIsSet(boolean value) {
    if (!value) {
      this.combination = null;
    }
  }

  public int getSegment_matchSize() {
    return (this.segment_match == null) ? 0 : this.segment_match.size();
  }

  public java.util.Iterator<segment_matchType> getSegment_matchIterator() {
    return (this.segment_match == null) ? null : this.segment_match.iterator();
  }

  public void addToSegment_match(segment_matchType elem) {
    if (this.segment_match == null) {
      this.segment_match = new ArrayList<segment_matchType>();
    }
    this.segment_match.add(elem);
  }

  public List<segment_matchType> getSegment_match() {
    return this.segment_match;
  }

  public vdj_alignmentType setSegment_match(List<segment_matchType> segment_match) {
    this.segment_match = segment_match;
    return this;
  }

  public void unsetSegment_match() {
    this.segment_match = null;
  }

  /** Returns true if field segment_match is set (has been assigned a value) and false otherwise */
  public boolean isSetSegment_match() {
    return this.segment_match != null;
  }

  public void setSegment_matchIsSet(boolean value) {
    if (!value) {
      this.segment_match = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case COMBINATION:
      if (value == null) {
        unsetCombination();
      } else {
        setCombination((List<combinationType>)value);
      }
      break;

    case SEGMENT_MATCH:
      if (value == null) {
        unsetSegment_match();
      } else {
        setSegment_match((List<segment_matchType>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case COMBINATION:
      return getCombination();

    case SEGMENT_MATCH:
      return getSegment_match();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case COMBINATION:
      return isSetCombination();
    case SEGMENT_MATCH:
      return isSetSegment_match();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof vdj_alignmentType)
      return this.equals((vdj_alignmentType)that);
    return false;
  }

  public boolean equals(vdj_alignmentType that) {
    if (that == null)
      return false;

    boolean this_present_combination = true && this.isSetCombination();
    boolean that_present_combination = true && that.isSetCombination();
    if (this_present_combination || that_present_combination) {
      if (!(this_present_combination && that_present_combination))
        return false;
      if (!this.combination.equals(that.combination))
        return false;
    }

    boolean this_present_segment_match = true && this.isSetSegment_match();
    boolean that_present_segment_match = true && that.isSetSegment_match();
    if (this_present_segment_match || that_present_segment_match) {
      if (!(this_present_segment_match && that_present_segment_match))
        return false;
      if (!this.segment_match.equals(that.segment_match))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_combination = true && (isSetCombination());
    list.add(present_combination);
    if (present_combination)
      list.add(combination);

    boolean present_segment_match = true && (isSetSegment_match());
    list.add(present_segment_match);
    if (present_segment_match)
      list.add(segment_match);

    return list.hashCode();
  }

  @Override
  public int compareTo(vdj_alignmentType other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetCombination()).compareTo(other.isSetCombination());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCombination()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.combination, other.combination);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSegment_match()).compareTo(other.isSetSegment_match());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSegment_match()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.segment_match, other.segment_match);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("vdj_alignmentType(");
    boolean first = true;

    sb.append("combination:");
    if (this.combination == null) {
      sb.append("null");
    } else {
      sb.append(this.combination);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("segment_match:");
    if (this.segment_match == null) {
      sb.append("null");
    } else {
      sb.append(this.segment_match);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (combination == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'combination' was not present! Struct: " + toString());
    }
    if (segment_match == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'segment_match' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class vdj_alignmentTypeStandardSchemeFactory implements SchemeFactory {
    public vdj_alignmentTypeStandardScheme getScheme() {
      return new vdj_alignmentTypeStandardScheme();
    }
  }

  private static class vdj_alignmentTypeStandardScheme extends StandardScheme<vdj_alignmentType> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, vdj_alignmentType struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // COMBINATION
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list32 = iprot.readListBegin();
                struct.combination = new ArrayList<combinationType>(_list32.size);
                combinationType _elem33;
                for (int _i34 = 0; _i34 < _list32.size; ++_i34)
                {
                  _elem33 = new combinationType();
                  _elem33.read(iprot);
                  struct.combination.add(_elem33);
                }
                iprot.readListEnd();
              }
              struct.setCombinationIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // SEGMENT_MATCH
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list35 = iprot.readListBegin();
                struct.segment_match = new ArrayList<segment_matchType>(_list35.size);
                segment_matchType _elem36;
                for (int _i37 = 0; _i37 < _list35.size; ++_i37)
                {
                  _elem36 = new segment_matchType();
                  _elem36.read(iprot);
                  struct.segment_match.add(_elem36);
                }
                iprot.readListEnd();
              }
              struct.setSegment_matchIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, vdj_alignmentType struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.combination != null) {
        oprot.writeFieldBegin(COMBINATION_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.combination.size()));
          for (combinationType _iter38 : struct.combination)
          {
            _iter38.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.segment_match != null) {
        oprot.writeFieldBegin(SEGMENT_MATCH_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.segment_match.size()));
          for (segment_matchType _iter39 : struct.segment_match)
          {
            _iter39.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class vdj_alignmentTypeTupleSchemeFactory implements SchemeFactory {
    public vdj_alignmentTypeTupleScheme getScheme() {
      return new vdj_alignmentTypeTupleScheme();
    }
  }

  private static class vdj_alignmentTypeTupleScheme extends TupleScheme<vdj_alignmentType> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, vdj_alignmentType struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      {
        oprot.writeI32(struct.combination.size());
        for (combinationType _iter40 : struct.combination)
        {
          _iter40.write(oprot);
        }
      }
      {
        oprot.writeI32(struct.segment_match.size());
        for (segment_matchType _iter41 : struct.segment_match)
        {
          _iter41.write(oprot);
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, vdj_alignmentType struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      {
        org.apache.thrift.protocol.TList _list42 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
        struct.combination = new ArrayList<combinationType>(_list42.size);
        combinationType _elem43;
        for (int _i44 = 0; _i44 < _list42.size; ++_i44)
        {
          _elem43 = new combinationType();
          _elem43.read(iprot);
          struct.combination.add(_elem43);
        }
      }
      struct.setCombinationIsSet(true);
      {
        org.apache.thrift.protocol.TList _list45 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
        struct.segment_match = new ArrayList<segment_matchType>(_list45.size);
        segment_matchType _elem46;
        for (int _i47 = 0; _i47 < _list45.size; ++_i47)
        {
          _elem46 = new segment_matchType();
          _elem46.read(iprot);
          struct.segment_match.add(_elem46);
        }
      }
      struct.setSegment_matchIsSet(true);
    }
  }

}

