/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package vdjserver;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2016-06-07")
public class alignerType implements org.apache.thrift.TBase<alignerType, alignerType._Fields>, java.io.Serializable, Cloneable, Comparable<alignerType> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("alignerType");

  private static final org.apache.thrift.protocol.TField ALIGNER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("aligner_id", org.apache.thrift.protocol.TType.I64, (short)1);
  private static final org.apache.thrift.protocol.TField NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("name", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField PARAMETERS_FIELD_DESC = new org.apache.thrift.protocol.TField("parameters", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField RUN_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("run_id", org.apache.thrift.protocol.TType.I64, (short)4);
  private static final org.apache.thrift.protocol.TField URI_FIELD_DESC = new org.apache.thrift.protocol.TField("uri", org.apache.thrift.protocol.TType.STRUCT, (short)5);
  private static final org.apache.thrift.protocol.TField VERSION_FIELD_DESC = new org.apache.thrift.protocol.TField("version", org.apache.thrift.protocol.TType.STRING, (short)6);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new alignerTypeStandardSchemeFactory());
    schemes.put(TupleScheme.class, new alignerTypeTupleSchemeFactory());
  }

  public long aligner_id; // required
  public String name; // required
  public String parameters; // optional
  public long run_id; // optional
  public UnspecifiedType uri; // optional
  public String version; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ALIGNER_ID((short)1, "aligner_id"),
    NAME((short)2, "name"),
    PARAMETERS((short)3, "parameters"),
    RUN_ID((short)4, "run_id"),
    URI((short)5, "uri"),
    VERSION((short)6, "version");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ALIGNER_ID
          return ALIGNER_ID;
        case 2: // NAME
          return NAME;
        case 3: // PARAMETERS
          return PARAMETERS;
        case 4: // RUN_ID
          return RUN_ID;
        case 5: // URI
          return URI;
        case 6: // VERSION
          return VERSION;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __ALIGNER_ID_ISSET_ID = 0;
  private static final int __RUN_ID_ISSET_ID = 1;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.PARAMETERS,_Fields.RUN_ID,_Fields.URI,_Fields.VERSION};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ALIGNER_ID, new org.apache.thrift.meta_data.FieldMetaData("aligner_id", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.NAME, new org.apache.thrift.meta_data.FieldMetaData("name", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PARAMETERS, new org.apache.thrift.meta_data.FieldMetaData("parameters", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.RUN_ID, new org.apache.thrift.meta_data.FieldMetaData("run_id", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.URI, new org.apache.thrift.meta_data.FieldMetaData("uri", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, UnspecifiedType.class)));
    tmpMap.put(_Fields.VERSION, new org.apache.thrift.meta_data.FieldMetaData("version", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(alignerType.class, metaDataMap);
  }

  public alignerType() {
  }

  public alignerType(
    long aligner_id,
    String name)
  {
    this();
    this.aligner_id = aligner_id;
    setAligner_idIsSet(true);
    this.name = name;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public alignerType(alignerType other) {
    __isset_bitfield = other.__isset_bitfield;
    this.aligner_id = other.aligner_id;
    if (other.isSetName()) {
      this.name = other.name;
    }
    if (other.isSetParameters()) {
      this.parameters = other.parameters;
    }
    this.run_id = other.run_id;
    if (other.isSetUri()) {
      this.uri = new UnspecifiedType(other.uri);
    }
    if (other.isSetVersion()) {
      this.version = other.version;
    }
  }

  public alignerType deepCopy() {
    return new alignerType(this);
  }

  @Override
  public void clear() {
    setAligner_idIsSet(false);
    this.aligner_id = 0;
    this.name = null;
    this.parameters = null;
    setRun_idIsSet(false);
    this.run_id = 0;
    this.uri = null;
    this.version = null;
  }

  public long getAligner_id() {
    return this.aligner_id;
  }

  public alignerType setAligner_id(long aligner_id) {
    this.aligner_id = aligner_id;
    setAligner_idIsSet(true);
    return this;
  }

  public void unsetAligner_id() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ALIGNER_ID_ISSET_ID);
  }

  /** Returns true if field aligner_id is set (has been assigned a value) and false otherwise */
  public boolean isSetAligner_id() {
    return EncodingUtils.testBit(__isset_bitfield, __ALIGNER_ID_ISSET_ID);
  }

  public void setAligner_idIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ALIGNER_ID_ISSET_ID, value);
  }

  public String getName() {
    return this.name;
  }

  public alignerType setName(String name) {
    this.name = name;
    return this;
  }

  public void unsetName() {
    this.name = null;
  }

  /** Returns true if field name is set (has been assigned a value) and false otherwise */
  public boolean isSetName() {
    return this.name != null;
  }

  public void setNameIsSet(boolean value) {
    if (!value) {
      this.name = null;
    }
  }

  public String getParameters() {
    return this.parameters;
  }

  public alignerType setParameters(String parameters) {
    this.parameters = parameters;
    return this;
  }

  public void unsetParameters() {
    this.parameters = null;
  }

  /** Returns true if field parameters is set (has been assigned a value) and false otherwise */
  public boolean isSetParameters() {
    return this.parameters != null;
  }

  public void setParametersIsSet(boolean value) {
    if (!value) {
      this.parameters = null;
    }
  }

  public long getRun_id() {
    return this.run_id;
  }

  public alignerType setRun_id(long run_id) {
    this.run_id = run_id;
    setRun_idIsSet(true);
    return this;
  }

  public void unsetRun_id() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __RUN_ID_ISSET_ID);
  }

  /** Returns true if field run_id is set (has been assigned a value) and false otherwise */
  public boolean isSetRun_id() {
    return EncodingUtils.testBit(__isset_bitfield, __RUN_ID_ISSET_ID);
  }

  public void setRun_idIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __RUN_ID_ISSET_ID, value);
  }

  public UnspecifiedType getUri() {
    return this.uri;
  }

  public alignerType setUri(UnspecifiedType uri) {
    this.uri = uri;
    return this;
  }

  public void unsetUri() {
    this.uri = null;
  }

  /** Returns true if field uri is set (has been assigned a value) and false otherwise */
  public boolean isSetUri() {
    return this.uri != null;
  }

  public void setUriIsSet(boolean value) {
    if (!value) {
      this.uri = null;
    }
  }

  public String getVersion() {
    return this.version;
  }

  public alignerType setVersion(String version) {
    this.version = version;
    return this;
  }

  public void unsetVersion() {
    this.version = null;
  }

  /** Returns true if field version is set (has been assigned a value) and false otherwise */
  public boolean isSetVersion() {
    return this.version != null;
  }

  public void setVersionIsSet(boolean value) {
    if (!value) {
      this.version = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case ALIGNER_ID:
      if (value == null) {
        unsetAligner_id();
      } else {
        setAligner_id((Long)value);
      }
      break;

    case NAME:
      if (value == null) {
        unsetName();
      } else {
        setName((String)value);
      }
      break;

    case PARAMETERS:
      if (value == null) {
        unsetParameters();
      } else {
        setParameters((String)value);
      }
      break;

    case RUN_ID:
      if (value == null) {
        unsetRun_id();
      } else {
        setRun_id((Long)value);
      }
      break;

    case URI:
      if (value == null) {
        unsetUri();
      } else {
        setUri((UnspecifiedType)value);
      }
      break;

    case VERSION:
      if (value == null) {
        unsetVersion();
      } else {
        setVersion((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case ALIGNER_ID:
      return getAligner_id();

    case NAME:
      return getName();

    case PARAMETERS:
      return getParameters();

    case RUN_ID:
      return getRun_id();

    case URI:
      return getUri();

    case VERSION:
      return getVersion();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case ALIGNER_ID:
      return isSetAligner_id();
    case NAME:
      return isSetName();
    case PARAMETERS:
      return isSetParameters();
    case RUN_ID:
      return isSetRun_id();
    case URI:
      return isSetUri();
    case VERSION:
      return isSetVersion();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof alignerType)
      return this.equals((alignerType)that);
    return false;
  }

  public boolean equals(alignerType that) {
    if (that == null)
      return false;

    boolean this_present_aligner_id = true;
    boolean that_present_aligner_id = true;
    if (this_present_aligner_id || that_present_aligner_id) {
      if (!(this_present_aligner_id && that_present_aligner_id))
        return false;
      if (this.aligner_id != that.aligner_id)
        return false;
    }

    boolean this_present_name = true && this.isSetName();
    boolean that_present_name = true && that.isSetName();
    if (this_present_name || that_present_name) {
      if (!(this_present_name && that_present_name))
        return false;
      if (!this.name.equals(that.name))
        return false;
    }

    boolean this_present_parameters = true && this.isSetParameters();
    boolean that_present_parameters = true && that.isSetParameters();
    if (this_present_parameters || that_present_parameters) {
      if (!(this_present_parameters && that_present_parameters))
        return false;
      if (!this.parameters.equals(that.parameters))
        return false;
    }

    boolean this_present_run_id = true && this.isSetRun_id();
    boolean that_present_run_id = true && that.isSetRun_id();
    if (this_present_run_id || that_present_run_id) {
      if (!(this_present_run_id && that_present_run_id))
        return false;
      if (this.run_id != that.run_id)
        return false;
    }

    boolean this_present_uri = true && this.isSetUri();
    boolean that_present_uri = true && that.isSetUri();
    if (this_present_uri || that_present_uri) {
      if (!(this_present_uri && that_present_uri))
        return false;
      if (!this.uri.equals(that.uri))
        return false;
    }

    boolean this_present_version = true && this.isSetVersion();
    boolean that_present_version = true && that.isSetVersion();
    if (this_present_version || that_present_version) {
      if (!(this_present_version && that_present_version))
        return false;
      if (!this.version.equals(that.version))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_aligner_id = true;
    list.add(present_aligner_id);
    if (present_aligner_id)
      list.add(aligner_id);

    boolean present_name = true && (isSetName());
    list.add(present_name);
    if (present_name)
      list.add(name);

    boolean present_parameters = true && (isSetParameters());
    list.add(present_parameters);
    if (present_parameters)
      list.add(parameters);

    boolean present_run_id = true && (isSetRun_id());
    list.add(present_run_id);
    if (present_run_id)
      list.add(run_id);

    boolean present_uri = true && (isSetUri());
    list.add(present_uri);
    if (present_uri)
      list.add(uri);

    boolean present_version = true && (isSetVersion());
    list.add(present_version);
    if (present_version)
      list.add(version);

    return list.hashCode();
  }

  @Override
  public int compareTo(alignerType other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetAligner_id()).compareTo(other.isSetAligner_id());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAligner_id()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.aligner_id, other.aligner_id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetName()).compareTo(other.isSetName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.name, other.name);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetParameters()).compareTo(other.isSetParameters());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetParameters()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.parameters, other.parameters);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRun_id()).compareTo(other.isSetRun_id());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRun_id()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.run_id, other.run_id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUri()).compareTo(other.isSetUri());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUri()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.uri, other.uri);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetVersion()).compareTo(other.isSetVersion());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetVersion()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.version, other.version);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("alignerType(");
    boolean first = true;

    sb.append("aligner_id:");
    sb.append(this.aligner_id);
    first = false;
    if (!first) sb.append(", ");
    sb.append("name:");
    if (this.name == null) {
      sb.append("null");
    } else {
      sb.append(this.name);
    }
    first = false;
    if (isSetParameters()) {
      if (!first) sb.append(", ");
      sb.append("parameters:");
      if (this.parameters == null) {
        sb.append("null");
      } else {
        sb.append(this.parameters);
      }
      first = false;
    }
    if (isSetRun_id()) {
      if (!first) sb.append(", ");
      sb.append("run_id:");
      sb.append(this.run_id);
      first = false;
    }
    if (isSetUri()) {
      if (!first) sb.append(", ");
      sb.append("uri:");
      if (this.uri == null) {
        sb.append("null");
      } else {
        sb.append(this.uri);
      }
      first = false;
    }
    if (isSetVersion()) {
      if (!first) sb.append(", ");
      sb.append("version:");
      if (this.version == null) {
        sb.append("null");
      } else {
        sb.append(this.version);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // alas, we cannot check 'aligner_id' because it's a primitive and you chose the non-beans generator.
    if (name == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'name' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
    if (uri != null) {
      uri.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class alignerTypeStandardSchemeFactory implements SchemeFactory {
    public alignerTypeStandardScheme getScheme() {
      return new alignerTypeStandardScheme();
    }
  }

  private static class alignerTypeStandardScheme extends StandardScheme<alignerType> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, alignerType struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ALIGNER_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.aligner_id = iprot.readI64();
              struct.setAligner_idIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.name = iprot.readString();
              struct.setNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // PARAMETERS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.parameters = iprot.readString();
              struct.setParametersIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // RUN_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.run_id = iprot.readI64();
              struct.setRun_idIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // URI
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.uri = new UnspecifiedType();
              struct.uri.read(iprot);
              struct.setUriIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // VERSION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.version = iprot.readString();
              struct.setVersionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      if (!struct.isSetAligner_id()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'aligner_id' was not found in serialized data! Struct: " + toString());
      }
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, alignerType struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(ALIGNER_ID_FIELD_DESC);
      oprot.writeI64(struct.aligner_id);
      oprot.writeFieldEnd();
      if (struct.name != null) {
        oprot.writeFieldBegin(NAME_FIELD_DESC);
        oprot.writeString(struct.name);
        oprot.writeFieldEnd();
      }
      if (struct.parameters != null) {
        if (struct.isSetParameters()) {
          oprot.writeFieldBegin(PARAMETERS_FIELD_DESC);
          oprot.writeString(struct.parameters);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetRun_id()) {
        oprot.writeFieldBegin(RUN_ID_FIELD_DESC);
        oprot.writeI64(struct.run_id);
        oprot.writeFieldEnd();
      }
      if (struct.uri != null) {
        if (struct.isSetUri()) {
          oprot.writeFieldBegin(URI_FIELD_DESC);
          struct.uri.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.version != null) {
        if (struct.isSetVersion()) {
          oprot.writeFieldBegin(VERSION_FIELD_DESC);
          oprot.writeString(struct.version);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class alignerTypeTupleSchemeFactory implements SchemeFactory {
    public alignerTypeTupleScheme getScheme() {
      return new alignerTypeTupleScheme();
    }
  }

  private static class alignerTypeTupleScheme extends TupleScheme<alignerType> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, alignerType struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeI64(struct.aligner_id);
      oprot.writeString(struct.name);
      BitSet optionals = new BitSet();
      if (struct.isSetParameters()) {
        optionals.set(0);
      }
      if (struct.isSetRun_id()) {
        optionals.set(1);
      }
      if (struct.isSetUri()) {
        optionals.set(2);
      }
      if (struct.isSetVersion()) {
        optionals.set(3);
      }
      oprot.writeBitSet(optionals, 4);
      if (struct.isSetParameters()) {
        oprot.writeString(struct.parameters);
      }
      if (struct.isSetRun_id()) {
        oprot.writeI64(struct.run_id);
      }
      if (struct.isSetUri()) {
        struct.uri.write(oprot);
      }
      if (struct.isSetVersion()) {
        oprot.writeString(struct.version);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, alignerType struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.aligner_id = iprot.readI64();
      struct.setAligner_idIsSet(true);
      struct.name = iprot.readString();
      struct.setNameIsSet(true);
      BitSet incoming = iprot.readBitSet(4);
      if (incoming.get(0)) {
        struct.parameters = iprot.readString();
        struct.setParametersIsSet(true);
      }
      if (incoming.get(1)) {
        struct.run_id = iprot.readI64();
        struct.setRun_idIsSet(true);
      }
      if (incoming.get(2)) {
        struct.uri = new UnspecifiedType();
        struct.uri.read(iprot);
        struct.setUriIsSet(true);
      }
      if (incoming.get(3)) {
        struct.version = iprot.readString();
        struct.setVersionIsSet(true);
      }
    }
  }

}

