/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package vdjserver;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2016-06-07")
public class readType implements org.apache.thrift.TBase<readType, readType._Fields>, java.io.Serializable, Cloneable, Comparable<readType> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("readType");

  private static final org.apache.thrift.protocol.TField READ_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("read_id", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField VDJ_ALIGNMENT_FIELD_DESC = new org.apache.thrift.protocol.TField("vdj_alignment", org.apache.thrift.protocol.TType.STRUCT, (short)2);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new readTypeStandardSchemeFactory());
    schemes.put(TupleScheme.class, new readTypeTupleSchemeFactory());
  }

  public String read_id; // required
  public vdj_alignmentType vdj_alignment; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    READ_ID((short)1, "read_id"),
    VDJ_ALIGNMENT((short)2, "vdj_alignment");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // READ_ID
          return READ_ID;
        case 2: // VDJ_ALIGNMENT
          return VDJ_ALIGNMENT;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final _Fields optionals[] = {_Fields.VDJ_ALIGNMENT};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.READ_ID, new org.apache.thrift.meta_data.FieldMetaData("read_id", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.VDJ_ALIGNMENT, new org.apache.thrift.meta_data.FieldMetaData("vdj_alignment", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, vdj_alignmentType.class)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(readType.class, metaDataMap);
  }

  public readType() {
  }

  public readType(
    String read_id)
  {
    this();
    this.read_id = read_id;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public readType(readType other) {
    if (other.isSetRead_id()) {
      this.read_id = other.read_id;
    }
    if (other.isSetVdj_alignment()) {
      this.vdj_alignment = new vdj_alignmentType(other.vdj_alignment);
    }
  }

  public readType deepCopy() {
    return new readType(this);
  }

  @Override
  public void clear() {
    this.read_id = null;
    this.vdj_alignment = null;
  }

  public String getRead_id() {
    return this.read_id;
  }

  public readType setRead_id(String read_id) {
    this.read_id = read_id;
    return this;
  }

  public void unsetRead_id() {
    this.read_id = null;
  }

  /** Returns true if field read_id is set (has been assigned a value) and false otherwise */
  public boolean isSetRead_id() {
    return this.read_id != null;
  }

  public void setRead_idIsSet(boolean value) {
    if (!value) {
      this.read_id = null;
    }
  }

  public vdj_alignmentType getVdj_alignment() {
    return this.vdj_alignment;
  }

  public readType setVdj_alignment(vdj_alignmentType vdj_alignment) {
    this.vdj_alignment = vdj_alignment;
    return this;
  }

  public void unsetVdj_alignment() {
    this.vdj_alignment = null;
  }

  /** Returns true if field vdj_alignment is set (has been assigned a value) and false otherwise */
  public boolean isSetVdj_alignment() {
    return this.vdj_alignment != null;
  }

  public void setVdj_alignmentIsSet(boolean value) {
    if (!value) {
      this.vdj_alignment = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case READ_ID:
      if (value == null) {
        unsetRead_id();
      } else {
        setRead_id((String)value);
      }
      break;

    case VDJ_ALIGNMENT:
      if (value == null) {
        unsetVdj_alignment();
      } else {
        setVdj_alignment((vdj_alignmentType)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case READ_ID:
      return getRead_id();

    case VDJ_ALIGNMENT:
      return getVdj_alignment();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case READ_ID:
      return isSetRead_id();
    case VDJ_ALIGNMENT:
      return isSetVdj_alignment();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof readType)
      return this.equals((readType)that);
    return false;
  }

  public boolean equals(readType that) {
    if (that == null)
      return false;

    boolean this_present_read_id = true && this.isSetRead_id();
    boolean that_present_read_id = true && that.isSetRead_id();
    if (this_present_read_id || that_present_read_id) {
      if (!(this_present_read_id && that_present_read_id))
        return false;
      if (!this.read_id.equals(that.read_id))
        return false;
    }

    boolean this_present_vdj_alignment = true && this.isSetVdj_alignment();
    boolean that_present_vdj_alignment = true && that.isSetVdj_alignment();
    if (this_present_vdj_alignment || that_present_vdj_alignment) {
      if (!(this_present_vdj_alignment && that_present_vdj_alignment))
        return false;
      if (!this.vdj_alignment.equals(that.vdj_alignment))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_read_id = true && (isSetRead_id());
    list.add(present_read_id);
    if (present_read_id)
      list.add(read_id);

    boolean present_vdj_alignment = true && (isSetVdj_alignment());
    list.add(present_vdj_alignment);
    if (present_vdj_alignment)
      list.add(vdj_alignment);

    return list.hashCode();
  }

  @Override
  public int compareTo(readType other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetRead_id()).compareTo(other.isSetRead_id());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRead_id()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.read_id, other.read_id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetVdj_alignment()).compareTo(other.isSetVdj_alignment());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetVdj_alignment()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.vdj_alignment, other.vdj_alignment);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("readType(");
    boolean first = true;

    sb.append("read_id:");
    if (this.read_id == null) {
      sb.append("null");
    } else {
      sb.append(this.read_id);
    }
    first = false;
    if (isSetVdj_alignment()) {
      if (!first) sb.append(", ");
      sb.append("vdj_alignment:");
      if (this.vdj_alignment == null) {
        sb.append("null");
      } else {
        sb.append(this.vdj_alignment);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (read_id == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'read_id' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
    if (vdj_alignment != null) {
      vdj_alignment.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class readTypeStandardSchemeFactory implements SchemeFactory {
    public readTypeStandardScheme getScheme() {
      return new readTypeStandardScheme();
    }
  }

  private static class readTypeStandardScheme extends StandardScheme<readType> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, readType struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // READ_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.read_id = iprot.readString();
              struct.setRead_idIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // VDJ_ALIGNMENT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.vdj_alignment = new vdj_alignmentType();
              struct.vdj_alignment.read(iprot);
              struct.setVdj_alignmentIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, readType struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.read_id != null) {
        oprot.writeFieldBegin(READ_ID_FIELD_DESC);
        oprot.writeString(struct.read_id);
        oprot.writeFieldEnd();
      }
      if (struct.vdj_alignment != null) {
        if (struct.isSetVdj_alignment()) {
          oprot.writeFieldBegin(VDJ_ALIGNMENT_FIELD_DESC);
          struct.vdj_alignment.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class readTypeTupleSchemeFactory implements SchemeFactory {
    public readTypeTupleScheme getScheme() {
      return new readTypeTupleScheme();
    }
  }

  private static class readTypeTupleScheme extends TupleScheme<readType> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, readType struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeString(struct.read_id);
      BitSet optionals = new BitSet();
      if (struct.isSetVdj_alignment()) {
        optionals.set(0);
      }
      oprot.writeBitSet(optionals, 1);
      if (struct.isSetVdj_alignment()) {
        struct.vdj_alignment.write(oprot);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, readType struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.read_id = iprot.readString();
      struct.setRead_idIsSet(true);
      BitSet incoming = iprot.readBitSet(1);
      if (incoming.get(0)) {
        struct.vdj_alignment = new vdj_alignmentType();
        struct.vdj_alignment.read(iprot);
        struct.setVdj_alignmentIsSet(true);
      }
    }
  }

}

