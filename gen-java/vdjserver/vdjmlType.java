/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package vdjserver;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2016-06-07")
public class vdjmlType implements org.apache.thrift.TBase<vdjmlType, vdjmlType._Fields>, java.io.Serializable, Cloneable, Comparable<vdjmlType> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("vdjmlType");

  private static final org.apache.thrift.protocol.TField META_FIELD_DESC = new org.apache.thrift.protocol.TField("meta", org.apache.thrift.protocol.TType.STRUCT, (short)1);
  private static final org.apache.thrift.protocol.TField READ_RESULTS_FIELD_DESC = new org.apache.thrift.protocol.TField("read_results", org.apache.thrift.protocol.TType.STRUCT, (short)2);
  private static final org.apache.thrift.protocol.TField VERSION_FIELD_DESC = new org.apache.thrift.protocol.TField("version", org.apache.thrift.protocol.TType.DOUBLE, (short)3);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new vdjmlTypeStandardSchemeFactory());
    schemes.put(TupleScheme.class, new vdjmlTypeTupleSchemeFactory());
  }

  public metaType meta; // required
  public read_resultsType read_results; // required
  public double version; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    META((short)1, "meta"),
    READ_RESULTS((short)2, "read_results"),
    VERSION((short)3, "version");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // META
          return META;
        case 2: // READ_RESULTS
          return READ_RESULTS;
        case 3: // VERSION
          return VERSION;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __VERSION_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.META, new org.apache.thrift.meta_data.FieldMetaData("meta", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, metaType.class)));
    tmpMap.put(_Fields.READ_RESULTS, new org.apache.thrift.meta_data.FieldMetaData("read_results", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, read_resultsType.class)));
    tmpMap.put(_Fields.VERSION, new org.apache.thrift.meta_data.FieldMetaData("version", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(vdjmlType.class, metaDataMap);
  }

  public vdjmlType() {
  }

  public vdjmlType(
    metaType meta,
    read_resultsType read_results,
    double version)
  {
    this();
    this.meta = meta;
    this.read_results = read_results;
    this.version = version;
    setVersionIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public vdjmlType(vdjmlType other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetMeta()) {
      this.meta = new metaType(other.meta);
    }
    if (other.isSetRead_results()) {
      this.read_results = new read_resultsType(other.read_results);
    }
    this.version = other.version;
  }

  public vdjmlType deepCopy() {
    return new vdjmlType(this);
  }

  @Override
  public void clear() {
    this.meta = null;
    this.read_results = null;
    setVersionIsSet(false);
    this.version = 0.0;
  }

  public metaType getMeta() {
    return this.meta;
  }

  public vdjmlType setMeta(metaType meta) {
    this.meta = meta;
    return this;
  }

  public void unsetMeta() {
    this.meta = null;
  }

  /** Returns true if field meta is set (has been assigned a value) and false otherwise */
  public boolean isSetMeta() {
    return this.meta != null;
  }

  public void setMetaIsSet(boolean value) {
    if (!value) {
      this.meta = null;
    }
  }

  public read_resultsType getRead_results() {
    return this.read_results;
  }

  public vdjmlType setRead_results(read_resultsType read_results) {
    this.read_results = read_results;
    return this;
  }

  public void unsetRead_results() {
    this.read_results = null;
  }

  /** Returns true if field read_results is set (has been assigned a value) and false otherwise */
  public boolean isSetRead_results() {
    return this.read_results != null;
  }

  public void setRead_resultsIsSet(boolean value) {
    if (!value) {
      this.read_results = null;
    }
  }

  public double getVersion() {
    return this.version;
  }

  public vdjmlType setVersion(double version) {
    this.version = version;
    setVersionIsSet(true);
    return this;
  }

  public void unsetVersion() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __VERSION_ISSET_ID);
  }

  /** Returns true if field version is set (has been assigned a value) and false otherwise */
  public boolean isSetVersion() {
    return EncodingUtils.testBit(__isset_bitfield, __VERSION_ISSET_ID);
  }

  public void setVersionIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __VERSION_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case META:
      if (value == null) {
        unsetMeta();
      } else {
        setMeta((metaType)value);
      }
      break;

    case READ_RESULTS:
      if (value == null) {
        unsetRead_results();
      } else {
        setRead_results((read_resultsType)value);
      }
      break;

    case VERSION:
      if (value == null) {
        unsetVersion();
      } else {
        setVersion((Double)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case META:
      return getMeta();

    case READ_RESULTS:
      return getRead_results();

    case VERSION:
      return getVersion();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case META:
      return isSetMeta();
    case READ_RESULTS:
      return isSetRead_results();
    case VERSION:
      return isSetVersion();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof vdjmlType)
      return this.equals((vdjmlType)that);
    return false;
  }

  public boolean equals(vdjmlType that) {
    if (that == null)
      return false;

    boolean this_present_meta = true && this.isSetMeta();
    boolean that_present_meta = true && that.isSetMeta();
    if (this_present_meta || that_present_meta) {
      if (!(this_present_meta && that_present_meta))
        return false;
      if (!this.meta.equals(that.meta))
        return false;
    }

    boolean this_present_read_results = true && this.isSetRead_results();
    boolean that_present_read_results = true && that.isSetRead_results();
    if (this_present_read_results || that_present_read_results) {
      if (!(this_present_read_results && that_present_read_results))
        return false;
      if (!this.read_results.equals(that.read_results))
        return false;
    }

    boolean this_present_version = true;
    boolean that_present_version = true;
    if (this_present_version || that_present_version) {
      if (!(this_present_version && that_present_version))
        return false;
      if (this.version != that.version)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_meta = true && (isSetMeta());
    list.add(present_meta);
    if (present_meta)
      list.add(meta);

    boolean present_read_results = true && (isSetRead_results());
    list.add(present_read_results);
    if (present_read_results)
      list.add(read_results);

    boolean present_version = true;
    list.add(present_version);
    if (present_version)
      list.add(version);

    return list.hashCode();
  }

  @Override
  public int compareTo(vdjmlType other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetMeta()).compareTo(other.isSetMeta());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMeta()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.meta, other.meta);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRead_results()).compareTo(other.isSetRead_results());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRead_results()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.read_results, other.read_results);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetVersion()).compareTo(other.isSetVersion());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetVersion()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.version, other.version);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("vdjmlType(");
    boolean first = true;

    sb.append("meta:");
    if (this.meta == null) {
      sb.append("null");
    } else {
      sb.append(this.meta);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("read_results:");
    if (this.read_results == null) {
      sb.append("null");
    } else {
      sb.append(this.read_results);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("version:");
    sb.append(this.version);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (meta == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'meta' was not present! Struct: " + toString());
    }
    if (read_results == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'read_results' was not present! Struct: " + toString());
    }
    // alas, we cannot check 'version' because it's a primitive and you chose the non-beans generator.
    // check for sub-struct validity
    if (meta != null) {
      meta.validate();
    }
    if (read_results != null) {
      read_results.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class vdjmlTypeStandardSchemeFactory implements SchemeFactory {
    public vdjmlTypeStandardScheme getScheme() {
      return new vdjmlTypeStandardScheme();
    }
  }

  private static class vdjmlTypeStandardScheme extends StandardScheme<vdjmlType> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, vdjmlType struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // META
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.meta = new metaType();
              struct.meta.read(iprot);
              struct.setMetaIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // READ_RESULTS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.read_results = new read_resultsType();
              struct.read_results.read(iprot);
              struct.setRead_resultsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // VERSION
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.version = iprot.readDouble();
              struct.setVersionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      if (!struct.isSetVersion()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'version' was not found in serialized data! Struct: " + toString());
      }
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, vdjmlType struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.meta != null) {
        oprot.writeFieldBegin(META_FIELD_DESC);
        struct.meta.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.read_results != null) {
        oprot.writeFieldBegin(READ_RESULTS_FIELD_DESC);
        struct.read_results.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(VERSION_FIELD_DESC);
      oprot.writeDouble(struct.version);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class vdjmlTypeTupleSchemeFactory implements SchemeFactory {
    public vdjmlTypeTupleScheme getScheme() {
      return new vdjmlTypeTupleScheme();
    }
  }

  private static class vdjmlTypeTupleScheme extends TupleScheme<vdjmlType> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, vdjmlType struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      struct.meta.write(oprot);
      struct.read_results.write(oprot);
      oprot.writeDouble(struct.version);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, vdjmlType struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.meta = new metaType();
      struct.meta.read(iprot);
      struct.setMetaIsSet(true);
      struct.read_results = new read_resultsType();
      struct.read_results.read(iprot);
      struct.setRead_resultsIsSet(true);
      struct.version = iprot.readDouble();
      struct.setVersionIsSet(true);
    }
  }

}

