/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package vdjserver;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2016-06-07")
public class gl_seg_matchType implements org.apache.thrift.TBase<gl_seg_matchType, gl_seg_matchType._Fields>, java.io.Serializable, Cloneable, Comparable<gl_seg_matchType> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("gl_seg_matchType");

  private static final org.apache.thrift.protocol.TField ALIGNER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("aligner_id", org.apache.thrift.protocol.TType.I64, (short)1);
  private static final org.apache.thrift.protocol.TField GL_DB_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("gl_db_id", org.apache.thrift.protocol.TType.I64, (short)2);
  private static final org.apache.thrift.protocol.TField GL_POS0_FIELD_DESC = new org.apache.thrift.protocol.TField("gl_pos0", org.apache.thrift.protocol.TType.I64, (short)3);
  private static final org.apache.thrift.protocol.TField GL_SEG_MATCH_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("gl_seg_match_id", org.apache.thrift.protocol.TType.I64, (short)4);
  private static final org.apache.thrift.protocol.TField NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("name", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField NUM_SYSTEM_FIELD_DESC = new org.apache.thrift.protocol.TField("num_system", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("type", org.apache.thrift.protocol.TType.I32, (short)7);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new gl_seg_matchTypeStandardSchemeFactory());
    schemes.put(TupleScheme.class, new gl_seg_matchTypeTupleSchemeFactory());
  }

  public long aligner_id; // required
  public long gl_db_id; // required
  public long gl_pos0; // required
  public long gl_seg_match_id; // required
  public String name; // required
  public String num_system; // required
  /**
   * 
   * @see Segment_type
   */
  public Segment_type type; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ALIGNER_ID((short)1, "aligner_id"),
    GL_DB_ID((short)2, "gl_db_id"),
    GL_POS0((short)3, "gl_pos0"),
    GL_SEG_MATCH_ID((short)4, "gl_seg_match_id"),
    NAME((short)5, "name"),
    NUM_SYSTEM((short)6, "num_system"),
    /**
     * 
     * @see Segment_type
     */
    TYPE((short)7, "type");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ALIGNER_ID
          return ALIGNER_ID;
        case 2: // GL_DB_ID
          return GL_DB_ID;
        case 3: // GL_POS0
          return GL_POS0;
        case 4: // GL_SEG_MATCH_ID
          return GL_SEG_MATCH_ID;
        case 5: // NAME
          return NAME;
        case 6: // NUM_SYSTEM
          return NUM_SYSTEM;
        case 7: // TYPE
          return TYPE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __ALIGNER_ID_ISSET_ID = 0;
  private static final int __GL_DB_ID_ISSET_ID = 1;
  private static final int __GL_POS0_ISSET_ID = 2;
  private static final int __GL_SEG_MATCH_ID_ISSET_ID = 3;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ALIGNER_ID, new org.apache.thrift.meta_data.FieldMetaData("aligner_id", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.GL_DB_ID, new org.apache.thrift.meta_data.FieldMetaData("gl_db_id", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.GL_POS0, new org.apache.thrift.meta_data.FieldMetaData("gl_pos0", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.GL_SEG_MATCH_ID, new org.apache.thrift.meta_data.FieldMetaData("gl_seg_match_id", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.NAME, new org.apache.thrift.meta_data.FieldMetaData("name", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.NUM_SYSTEM, new org.apache.thrift.meta_data.FieldMetaData("num_system", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TYPE, new org.apache.thrift.meta_data.FieldMetaData("type", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, Segment_type.class)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(gl_seg_matchType.class, metaDataMap);
  }

  public gl_seg_matchType() {
  }

  public gl_seg_matchType(
    long aligner_id,
    long gl_db_id,
    long gl_pos0,
    long gl_seg_match_id,
    String name,
    String num_system,
    Segment_type type)
  {
    this();
    this.aligner_id = aligner_id;
    setAligner_idIsSet(true);
    this.gl_db_id = gl_db_id;
    setGl_db_idIsSet(true);
    this.gl_pos0 = gl_pos0;
    setGl_pos0IsSet(true);
    this.gl_seg_match_id = gl_seg_match_id;
    setGl_seg_match_idIsSet(true);
    this.name = name;
    this.num_system = num_system;
    this.type = type;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public gl_seg_matchType(gl_seg_matchType other) {
    __isset_bitfield = other.__isset_bitfield;
    this.aligner_id = other.aligner_id;
    this.gl_db_id = other.gl_db_id;
    this.gl_pos0 = other.gl_pos0;
    this.gl_seg_match_id = other.gl_seg_match_id;
    if (other.isSetName()) {
      this.name = other.name;
    }
    if (other.isSetNum_system()) {
      this.num_system = other.num_system;
    }
    if (other.isSetType()) {
      this.type = other.type;
    }
  }

  public gl_seg_matchType deepCopy() {
    return new gl_seg_matchType(this);
  }

  @Override
  public void clear() {
    setAligner_idIsSet(false);
    this.aligner_id = 0;
    setGl_db_idIsSet(false);
    this.gl_db_id = 0;
    setGl_pos0IsSet(false);
    this.gl_pos0 = 0;
    setGl_seg_match_idIsSet(false);
    this.gl_seg_match_id = 0;
    this.name = null;
    this.num_system = null;
    this.type = null;
  }

  public long getAligner_id() {
    return this.aligner_id;
  }

  public gl_seg_matchType setAligner_id(long aligner_id) {
    this.aligner_id = aligner_id;
    setAligner_idIsSet(true);
    return this;
  }

  public void unsetAligner_id() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ALIGNER_ID_ISSET_ID);
  }

  /** Returns true if field aligner_id is set (has been assigned a value) and false otherwise */
  public boolean isSetAligner_id() {
    return EncodingUtils.testBit(__isset_bitfield, __ALIGNER_ID_ISSET_ID);
  }

  public void setAligner_idIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ALIGNER_ID_ISSET_ID, value);
  }

  public long getGl_db_id() {
    return this.gl_db_id;
  }

  public gl_seg_matchType setGl_db_id(long gl_db_id) {
    this.gl_db_id = gl_db_id;
    setGl_db_idIsSet(true);
    return this;
  }

  public void unsetGl_db_id() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __GL_DB_ID_ISSET_ID);
  }

  /** Returns true if field gl_db_id is set (has been assigned a value) and false otherwise */
  public boolean isSetGl_db_id() {
    return EncodingUtils.testBit(__isset_bitfield, __GL_DB_ID_ISSET_ID);
  }

  public void setGl_db_idIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __GL_DB_ID_ISSET_ID, value);
  }

  public long getGl_pos0() {
    return this.gl_pos0;
  }

  public gl_seg_matchType setGl_pos0(long gl_pos0) {
    this.gl_pos0 = gl_pos0;
    setGl_pos0IsSet(true);
    return this;
  }

  public void unsetGl_pos0() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __GL_POS0_ISSET_ID);
  }

  /** Returns true if field gl_pos0 is set (has been assigned a value) and false otherwise */
  public boolean isSetGl_pos0() {
    return EncodingUtils.testBit(__isset_bitfield, __GL_POS0_ISSET_ID);
  }

  public void setGl_pos0IsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __GL_POS0_ISSET_ID, value);
  }

  public long getGl_seg_match_id() {
    return this.gl_seg_match_id;
  }

  public gl_seg_matchType setGl_seg_match_id(long gl_seg_match_id) {
    this.gl_seg_match_id = gl_seg_match_id;
    setGl_seg_match_idIsSet(true);
    return this;
  }

  public void unsetGl_seg_match_id() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __GL_SEG_MATCH_ID_ISSET_ID);
  }

  /** Returns true if field gl_seg_match_id is set (has been assigned a value) and false otherwise */
  public boolean isSetGl_seg_match_id() {
    return EncodingUtils.testBit(__isset_bitfield, __GL_SEG_MATCH_ID_ISSET_ID);
  }

  public void setGl_seg_match_idIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __GL_SEG_MATCH_ID_ISSET_ID, value);
  }

  public String getName() {
    return this.name;
  }

  public gl_seg_matchType setName(String name) {
    this.name = name;
    return this;
  }

  public void unsetName() {
    this.name = null;
  }

  /** Returns true if field name is set (has been assigned a value) and false otherwise */
  public boolean isSetName() {
    return this.name != null;
  }

  public void setNameIsSet(boolean value) {
    if (!value) {
      this.name = null;
    }
  }

  public String getNum_system() {
    return this.num_system;
  }

  public gl_seg_matchType setNum_system(String num_system) {
    this.num_system = num_system;
    return this;
  }

  public void unsetNum_system() {
    this.num_system = null;
  }

  /** Returns true if field num_system is set (has been assigned a value) and false otherwise */
  public boolean isSetNum_system() {
    return this.num_system != null;
  }

  public void setNum_systemIsSet(boolean value) {
    if (!value) {
      this.num_system = null;
    }
  }

  /**
   * 
   * @see Segment_type
   */
  public Segment_type getType() {
    return this.type;
  }

  /**
   * 
   * @see Segment_type
   */
  public gl_seg_matchType setType(Segment_type type) {
    this.type = type;
    return this;
  }

  public void unsetType() {
    this.type = null;
  }

  /** Returns true if field type is set (has been assigned a value) and false otherwise */
  public boolean isSetType() {
    return this.type != null;
  }

  public void setTypeIsSet(boolean value) {
    if (!value) {
      this.type = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case ALIGNER_ID:
      if (value == null) {
        unsetAligner_id();
      } else {
        setAligner_id((Long)value);
      }
      break;

    case GL_DB_ID:
      if (value == null) {
        unsetGl_db_id();
      } else {
        setGl_db_id((Long)value);
      }
      break;

    case GL_POS0:
      if (value == null) {
        unsetGl_pos0();
      } else {
        setGl_pos0((Long)value);
      }
      break;

    case GL_SEG_MATCH_ID:
      if (value == null) {
        unsetGl_seg_match_id();
      } else {
        setGl_seg_match_id((Long)value);
      }
      break;

    case NAME:
      if (value == null) {
        unsetName();
      } else {
        setName((String)value);
      }
      break;

    case NUM_SYSTEM:
      if (value == null) {
        unsetNum_system();
      } else {
        setNum_system((String)value);
      }
      break;

    case TYPE:
      if (value == null) {
        unsetType();
      } else {
        setType((Segment_type)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case ALIGNER_ID:
      return getAligner_id();

    case GL_DB_ID:
      return getGl_db_id();

    case GL_POS0:
      return getGl_pos0();

    case GL_SEG_MATCH_ID:
      return getGl_seg_match_id();

    case NAME:
      return getName();

    case NUM_SYSTEM:
      return getNum_system();

    case TYPE:
      return getType();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case ALIGNER_ID:
      return isSetAligner_id();
    case GL_DB_ID:
      return isSetGl_db_id();
    case GL_POS0:
      return isSetGl_pos0();
    case GL_SEG_MATCH_ID:
      return isSetGl_seg_match_id();
    case NAME:
      return isSetName();
    case NUM_SYSTEM:
      return isSetNum_system();
    case TYPE:
      return isSetType();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof gl_seg_matchType)
      return this.equals((gl_seg_matchType)that);
    return false;
  }

  public boolean equals(gl_seg_matchType that) {
    if (that == null)
      return false;

    boolean this_present_aligner_id = true;
    boolean that_present_aligner_id = true;
    if (this_present_aligner_id || that_present_aligner_id) {
      if (!(this_present_aligner_id && that_present_aligner_id))
        return false;
      if (this.aligner_id != that.aligner_id)
        return false;
    }

    boolean this_present_gl_db_id = true;
    boolean that_present_gl_db_id = true;
    if (this_present_gl_db_id || that_present_gl_db_id) {
      if (!(this_present_gl_db_id && that_present_gl_db_id))
        return false;
      if (this.gl_db_id != that.gl_db_id)
        return false;
    }

    boolean this_present_gl_pos0 = true;
    boolean that_present_gl_pos0 = true;
    if (this_present_gl_pos0 || that_present_gl_pos0) {
      if (!(this_present_gl_pos0 && that_present_gl_pos0))
        return false;
      if (this.gl_pos0 != that.gl_pos0)
        return false;
    }

    boolean this_present_gl_seg_match_id = true;
    boolean that_present_gl_seg_match_id = true;
    if (this_present_gl_seg_match_id || that_present_gl_seg_match_id) {
      if (!(this_present_gl_seg_match_id && that_present_gl_seg_match_id))
        return false;
      if (this.gl_seg_match_id != that.gl_seg_match_id)
        return false;
    }

    boolean this_present_name = true && this.isSetName();
    boolean that_present_name = true && that.isSetName();
    if (this_present_name || that_present_name) {
      if (!(this_present_name && that_present_name))
        return false;
      if (!this.name.equals(that.name))
        return false;
    }

    boolean this_present_num_system = true && this.isSetNum_system();
    boolean that_present_num_system = true && that.isSetNum_system();
    if (this_present_num_system || that_present_num_system) {
      if (!(this_present_num_system && that_present_num_system))
        return false;
      if (!this.num_system.equals(that.num_system))
        return false;
    }

    boolean this_present_type = true && this.isSetType();
    boolean that_present_type = true && that.isSetType();
    if (this_present_type || that_present_type) {
      if (!(this_present_type && that_present_type))
        return false;
      if (!this.type.equals(that.type))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_aligner_id = true;
    list.add(present_aligner_id);
    if (present_aligner_id)
      list.add(aligner_id);

    boolean present_gl_db_id = true;
    list.add(present_gl_db_id);
    if (present_gl_db_id)
      list.add(gl_db_id);

    boolean present_gl_pos0 = true;
    list.add(present_gl_pos0);
    if (present_gl_pos0)
      list.add(gl_pos0);

    boolean present_gl_seg_match_id = true;
    list.add(present_gl_seg_match_id);
    if (present_gl_seg_match_id)
      list.add(gl_seg_match_id);

    boolean present_name = true && (isSetName());
    list.add(present_name);
    if (present_name)
      list.add(name);

    boolean present_num_system = true && (isSetNum_system());
    list.add(present_num_system);
    if (present_num_system)
      list.add(num_system);

    boolean present_type = true && (isSetType());
    list.add(present_type);
    if (present_type)
      list.add(type.getValue());

    return list.hashCode();
  }

  @Override
  public int compareTo(gl_seg_matchType other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetAligner_id()).compareTo(other.isSetAligner_id());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAligner_id()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.aligner_id, other.aligner_id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetGl_db_id()).compareTo(other.isSetGl_db_id());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetGl_db_id()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.gl_db_id, other.gl_db_id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetGl_pos0()).compareTo(other.isSetGl_pos0());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetGl_pos0()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.gl_pos0, other.gl_pos0);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetGl_seg_match_id()).compareTo(other.isSetGl_seg_match_id());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetGl_seg_match_id()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.gl_seg_match_id, other.gl_seg_match_id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetName()).compareTo(other.isSetName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.name, other.name);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNum_system()).compareTo(other.isSetNum_system());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNum_system()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.num_system, other.num_system);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetType()).compareTo(other.isSetType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.type, other.type);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("gl_seg_matchType(");
    boolean first = true;

    sb.append("aligner_id:");
    sb.append(this.aligner_id);
    first = false;
    if (!first) sb.append(", ");
    sb.append("gl_db_id:");
    sb.append(this.gl_db_id);
    first = false;
    if (!first) sb.append(", ");
    sb.append("gl_pos0:");
    sb.append(this.gl_pos0);
    first = false;
    if (!first) sb.append(", ");
    sb.append("gl_seg_match_id:");
    sb.append(this.gl_seg_match_id);
    first = false;
    if (!first) sb.append(", ");
    sb.append("name:");
    if (this.name == null) {
      sb.append("null");
    } else {
      sb.append(this.name);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("num_system:");
    if (this.num_system == null) {
      sb.append("null");
    } else {
      sb.append(this.num_system);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("type:");
    if (this.type == null) {
      sb.append("null");
    } else {
      sb.append(this.type);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // alas, we cannot check 'aligner_id' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'gl_db_id' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'gl_pos0' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'gl_seg_match_id' because it's a primitive and you chose the non-beans generator.
    if (name == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'name' was not present! Struct: " + toString());
    }
    if (num_system == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'num_system' was not present! Struct: " + toString());
    }
    if (type == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'type' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class gl_seg_matchTypeStandardSchemeFactory implements SchemeFactory {
    public gl_seg_matchTypeStandardScheme getScheme() {
      return new gl_seg_matchTypeStandardScheme();
    }
  }

  private static class gl_seg_matchTypeStandardScheme extends StandardScheme<gl_seg_matchType> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, gl_seg_matchType struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ALIGNER_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.aligner_id = iprot.readI64();
              struct.setAligner_idIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // GL_DB_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.gl_db_id = iprot.readI64();
              struct.setGl_db_idIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // GL_POS0
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.gl_pos0 = iprot.readI64();
              struct.setGl_pos0IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // GL_SEG_MATCH_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.gl_seg_match_id = iprot.readI64();
              struct.setGl_seg_match_idIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.name = iprot.readString();
              struct.setNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // NUM_SYSTEM
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.num_system = iprot.readString();
              struct.setNum_systemIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.type = vdjserver.Segment_type.findByValue(iprot.readI32());
              struct.setTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      if (!struct.isSetAligner_id()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'aligner_id' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetGl_db_id()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'gl_db_id' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetGl_pos0()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'gl_pos0' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetGl_seg_match_id()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'gl_seg_match_id' was not found in serialized data! Struct: " + toString());
      }
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, gl_seg_matchType struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(ALIGNER_ID_FIELD_DESC);
      oprot.writeI64(struct.aligner_id);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(GL_DB_ID_FIELD_DESC);
      oprot.writeI64(struct.gl_db_id);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(GL_POS0_FIELD_DESC);
      oprot.writeI64(struct.gl_pos0);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(GL_SEG_MATCH_ID_FIELD_DESC);
      oprot.writeI64(struct.gl_seg_match_id);
      oprot.writeFieldEnd();
      if (struct.name != null) {
        oprot.writeFieldBegin(NAME_FIELD_DESC);
        oprot.writeString(struct.name);
        oprot.writeFieldEnd();
      }
      if (struct.num_system != null) {
        oprot.writeFieldBegin(NUM_SYSTEM_FIELD_DESC);
        oprot.writeString(struct.num_system);
        oprot.writeFieldEnd();
      }
      if (struct.type != null) {
        oprot.writeFieldBegin(TYPE_FIELD_DESC);
        oprot.writeI32(struct.type.getValue());
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class gl_seg_matchTypeTupleSchemeFactory implements SchemeFactory {
    public gl_seg_matchTypeTupleScheme getScheme() {
      return new gl_seg_matchTypeTupleScheme();
    }
  }

  private static class gl_seg_matchTypeTupleScheme extends TupleScheme<gl_seg_matchType> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, gl_seg_matchType struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeI64(struct.aligner_id);
      oprot.writeI64(struct.gl_db_id);
      oprot.writeI64(struct.gl_pos0);
      oprot.writeI64(struct.gl_seg_match_id);
      oprot.writeString(struct.name);
      oprot.writeString(struct.num_system);
      oprot.writeI32(struct.type.getValue());
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, gl_seg_matchType struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.aligner_id = iprot.readI64();
      struct.setAligner_idIsSet(true);
      struct.gl_db_id = iprot.readI64();
      struct.setGl_db_idIsSet(true);
      struct.gl_pos0 = iprot.readI64();
      struct.setGl_pos0IsSet(true);
      struct.gl_seg_match_id = iprot.readI64();
      struct.setGl_seg_match_idIsSet(true);
      struct.name = iprot.readString();
      struct.setNameIsSet(true);
      struct.num_system = iprot.readString();
      struct.setNum_systemIsSet(true);
      struct.type = vdjserver.Segment_type.findByValue(iprot.readI32());
      struct.setTypeIsSet(true);
    }
  }

}

