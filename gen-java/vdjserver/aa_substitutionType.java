/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package vdjserver;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2016-06-07")
public class aa_substitutionType implements org.apache.thrift.TBase<aa_substitutionType, aa_substitutionType._Fields>, java.io.Serializable, Cloneable, Comparable<aa_substitutionType> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("aa_substitutionType");

  private static final org.apache.thrift.protocol.TField GL_AA_FIELD_DESC = new org.apache.thrift.protocol.TField("gl_aa", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField READ_AA_FIELD_DESC = new org.apache.thrift.protocol.TField("read_aa", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField READ_POS0_FIELD_DESC = new org.apache.thrift.protocol.TField("read_pos0", org.apache.thrift.protocol.TType.I64, (short)3);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new aa_substitutionTypeStandardSchemeFactory());
    schemes.put(TupleScheme.class, new aa_substitutionTypeTupleSchemeFactory());
  }

  /**
   * 
   * @see Aminoacid
   */
  public Aminoacid gl_aa; // required
  /**
   * 
   * @see Aminoacid
   */
  public Aminoacid read_aa; // required
  public long read_pos0; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    /**
     * 
     * @see Aminoacid
     */
    GL_AA((short)1, "gl_aa"),
    /**
     * 
     * @see Aminoacid
     */
    READ_AA((short)2, "read_aa"),
    READ_POS0((short)3, "read_pos0");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // GL_AA
          return GL_AA;
        case 2: // READ_AA
          return READ_AA;
        case 3: // READ_POS0
          return READ_POS0;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __READ_POS0_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.GL_AA, new org.apache.thrift.meta_data.FieldMetaData("gl_aa", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, Aminoacid.class)));
    tmpMap.put(_Fields.READ_AA, new org.apache.thrift.meta_data.FieldMetaData("read_aa", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, Aminoacid.class)));
    tmpMap.put(_Fields.READ_POS0, new org.apache.thrift.meta_data.FieldMetaData("read_pos0", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(aa_substitutionType.class, metaDataMap);
  }

  public aa_substitutionType() {
  }

  public aa_substitutionType(
    Aminoacid gl_aa,
    Aminoacid read_aa,
    long read_pos0)
  {
    this();
    this.gl_aa = gl_aa;
    this.read_aa = read_aa;
    this.read_pos0 = read_pos0;
    setRead_pos0IsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public aa_substitutionType(aa_substitutionType other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetGl_aa()) {
      this.gl_aa = other.gl_aa;
    }
    if (other.isSetRead_aa()) {
      this.read_aa = other.read_aa;
    }
    this.read_pos0 = other.read_pos0;
  }

  public aa_substitutionType deepCopy() {
    return new aa_substitutionType(this);
  }

  @Override
  public void clear() {
    this.gl_aa = null;
    this.read_aa = null;
    setRead_pos0IsSet(false);
    this.read_pos0 = 0;
  }

  /**
   * 
   * @see Aminoacid
   */
  public Aminoacid getGl_aa() {
    return this.gl_aa;
  }

  /**
   * 
   * @see Aminoacid
   */
  public aa_substitutionType setGl_aa(Aminoacid gl_aa) {
    this.gl_aa = gl_aa;
    return this;
  }

  public void unsetGl_aa() {
    this.gl_aa = null;
  }

  /** Returns true if field gl_aa is set (has been assigned a value) and false otherwise */
  public boolean isSetGl_aa() {
    return this.gl_aa != null;
  }

  public void setGl_aaIsSet(boolean value) {
    if (!value) {
      this.gl_aa = null;
    }
  }

  /**
   * 
   * @see Aminoacid
   */
  public Aminoacid getRead_aa() {
    return this.read_aa;
  }

  /**
   * 
   * @see Aminoacid
   */
  public aa_substitutionType setRead_aa(Aminoacid read_aa) {
    this.read_aa = read_aa;
    return this;
  }

  public void unsetRead_aa() {
    this.read_aa = null;
  }

  /** Returns true if field read_aa is set (has been assigned a value) and false otherwise */
  public boolean isSetRead_aa() {
    return this.read_aa != null;
  }

  public void setRead_aaIsSet(boolean value) {
    if (!value) {
      this.read_aa = null;
    }
  }

  public long getRead_pos0() {
    return this.read_pos0;
  }

  public aa_substitutionType setRead_pos0(long read_pos0) {
    this.read_pos0 = read_pos0;
    setRead_pos0IsSet(true);
    return this;
  }

  public void unsetRead_pos0() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __READ_POS0_ISSET_ID);
  }

  /** Returns true if field read_pos0 is set (has been assigned a value) and false otherwise */
  public boolean isSetRead_pos0() {
    return EncodingUtils.testBit(__isset_bitfield, __READ_POS0_ISSET_ID);
  }

  public void setRead_pos0IsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __READ_POS0_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case GL_AA:
      if (value == null) {
        unsetGl_aa();
      } else {
        setGl_aa((Aminoacid)value);
      }
      break;

    case READ_AA:
      if (value == null) {
        unsetRead_aa();
      } else {
        setRead_aa((Aminoacid)value);
      }
      break;

    case READ_POS0:
      if (value == null) {
        unsetRead_pos0();
      } else {
        setRead_pos0((Long)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case GL_AA:
      return getGl_aa();

    case READ_AA:
      return getRead_aa();

    case READ_POS0:
      return getRead_pos0();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case GL_AA:
      return isSetGl_aa();
    case READ_AA:
      return isSetRead_aa();
    case READ_POS0:
      return isSetRead_pos0();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof aa_substitutionType)
      return this.equals((aa_substitutionType)that);
    return false;
  }

  public boolean equals(aa_substitutionType that) {
    if (that == null)
      return false;

    boolean this_present_gl_aa = true && this.isSetGl_aa();
    boolean that_present_gl_aa = true && that.isSetGl_aa();
    if (this_present_gl_aa || that_present_gl_aa) {
      if (!(this_present_gl_aa && that_present_gl_aa))
        return false;
      if (!this.gl_aa.equals(that.gl_aa))
        return false;
    }

    boolean this_present_read_aa = true && this.isSetRead_aa();
    boolean that_present_read_aa = true && that.isSetRead_aa();
    if (this_present_read_aa || that_present_read_aa) {
      if (!(this_present_read_aa && that_present_read_aa))
        return false;
      if (!this.read_aa.equals(that.read_aa))
        return false;
    }

    boolean this_present_read_pos0 = true;
    boolean that_present_read_pos0 = true;
    if (this_present_read_pos0 || that_present_read_pos0) {
      if (!(this_present_read_pos0 && that_present_read_pos0))
        return false;
      if (this.read_pos0 != that.read_pos0)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_gl_aa = true && (isSetGl_aa());
    list.add(present_gl_aa);
    if (present_gl_aa)
      list.add(gl_aa.getValue());

    boolean present_read_aa = true && (isSetRead_aa());
    list.add(present_read_aa);
    if (present_read_aa)
      list.add(read_aa.getValue());

    boolean present_read_pos0 = true;
    list.add(present_read_pos0);
    if (present_read_pos0)
      list.add(read_pos0);

    return list.hashCode();
  }

  @Override
  public int compareTo(aa_substitutionType other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetGl_aa()).compareTo(other.isSetGl_aa());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetGl_aa()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.gl_aa, other.gl_aa);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRead_aa()).compareTo(other.isSetRead_aa());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRead_aa()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.read_aa, other.read_aa);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRead_pos0()).compareTo(other.isSetRead_pos0());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRead_pos0()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.read_pos0, other.read_pos0);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("aa_substitutionType(");
    boolean first = true;

    sb.append("gl_aa:");
    if (this.gl_aa == null) {
      sb.append("null");
    } else {
      sb.append(this.gl_aa);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("read_aa:");
    if (this.read_aa == null) {
      sb.append("null");
    } else {
      sb.append(this.read_aa);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("read_pos0:");
    sb.append(this.read_pos0);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (gl_aa == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'gl_aa' was not present! Struct: " + toString());
    }
    if (read_aa == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'read_aa' was not present! Struct: " + toString());
    }
    // alas, we cannot check 'read_pos0' because it's a primitive and you chose the non-beans generator.
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class aa_substitutionTypeStandardSchemeFactory implements SchemeFactory {
    public aa_substitutionTypeStandardScheme getScheme() {
      return new aa_substitutionTypeStandardScheme();
    }
  }

  private static class aa_substitutionTypeStandardScheme extends StandardScheme<aa_substitutionType> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, aa_substitutionType struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // GL_AA
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.gl_aa = vdjserver.Aminoacid.findByValue(iprot.readI32());
              struct.setGl_aaIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // READ_AA
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.read_aa = vdjserver.Aminoacid.findByValue(iprot.readI32());
              struct.setRead_aaIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // READ_POS0
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.read_pos0 = iprot.readI64();
              struct.setRead_pos0IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      if (!struct.isSetRead_pos0()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'read_pos0' was not found in serialized data! Struct: " + toString());
      }
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, aa_substitutionType struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.gl_aa != null) {
        oprot.writeFieldBegin(GL_AA_FIELD_DESC);
        oprot.writeI32(struct.gl_aa.getValue());
        oprot.writeFieldEnd();
      }
      if (struct.read_aa != null) {
        oprot.writeFieldBegin(READ_AA_FIELD_DESC);
        oprot.writeI32(struct.read_aa.getValue());
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(READ_POS0_FIELD_DESC);
      oprot.writeI64(struct.read_pos0);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class aa_substitutionTypeTupleSchemeFactory implements SchemeFactory {
    public aa_substitutionTypeTupleScheme getScheme() {
      return new aa_substitutionTypeTupleScheme();
    }
  }

  private static class aa_substitutionTypeTupleScheme extends TupleScheme<aa_substitutionType> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, aa_substitutionType struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeI32(struct.gl_aa.getValue());
      oprot.writeI32(struct.read_aa.getValue());
      oprot.writeI64(struct.read_pos0);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, aa_substitutionType struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.gl_aa = vdjserver.Aminoacid.findByValue(iprot.readI32());
      struct.setGl_aaIsSet(true);
      struct.read_aa = vdjserver.Aminoacid.findByValue(iprot.readI32());
      struct.setRead_aaIsSet(true);
      struct.read_pos0 = iprot.readI64();
      struct.setRead_pos0IsSet(true);
    }
  }

}

