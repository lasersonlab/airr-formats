/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package airr;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2016-06-07")
public class FindCdr3Req implements org.apache.thrift.TBase<FindCdr3Req, FindCdr3Req._Fields>, java.io.Serializable, Cloneable, Comparable<FindCdr3Req> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("FindCdr3Req");

  private static final org.apache.thrift.protocol.TField CDR3_FIELD_DESC = new org.apache.thrift.protocol.TField("cdr3", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField LOCUS_FIELD_DESC = new org.apache.thrift.protocol.TField("locus", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField STUDY_IDS_FIELD_DESC = new org.apache.thrift.protocol.TField("studyIds", org.apache.thrift.protocol.TType.LIST, (short)3);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new FindCdr3ReqStandardSchemeFactory());
    schemes.put(TupleScheme.class, new FindCdr3ReqTupleSchemeFactory());
  }

  public String cdr3; // required
  /**
   * 
   * @see Locus
   */
  public Locus locus; // required
  public List<String> studyIds; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    CDR3((short)1, "cdr3"),
    /**
     * 
     * @see Locus
     */
    LOCUS((short)2, "locus"),
    STUDY_IDS((short)3, "studyIds");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // CDR3
          return CDR3;
        case 2: // LOCUS
          return LOCUS;
        case 3: // STUDY_IDS
          return STUDY_IDS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final _Fields optionals[] = {_Fields.STUDY_IDS};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.CDR3, new org.apache.thrift.meta_data.FieldMetaData("cdr3", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.LOCUS, new org.apache.thrift.meta_data.FieldMetaData("locus", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, Locus.class)));
    tmpMap.put(_Fields.STUDY_IDS, new org.apache.thrift.meta_data.FieldMetaData("studyIds", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(FindCdr3Req.class, metaDataMap);
  }

  public FindCdr3Req() {
  }

  public FindCdr3Req(
    String cdr3,
    Locus locus)
  {
    this();
    this.cdr3 = cdr3;
    this.locus = locus;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public FindCdr3Req(FindCdr3Req other) {
    if (other.isSetCdr3()) {
      this.cdr3 = other.cdr3;
    }
    if (other.isSetLocus()) {
      this.locus = other.locus;
    }
    if (other.isSetStudyIds()) {
      List<String> __this__studyIds = new ArrayList<String>(other.studyIds);
      this.studyIds = __this__studyIds;
    }
  }

  public FindCdr3Req deepCopy() {
    return new FindCdr3Req(this);
  }

  @Override
  public void clear() {
    this.cdr3 = null;
    this.locus = null;
    this.studyIds = null;
  }

  public String getCdr3() {
    return this.cdr3;
  }

  public FindCdr3Req setCdr3(String cdr3) {
    this.cdr3 = cdr3;
    return this;
  }

  public void unsetCdr3() {
    this.cdr3 = null;
  }

  /** Returns true if field cdr3 is set (has been assigned a value) and false otherwise */
  public boolean isSetCdr3() {
    return this.cdr3 != null;
  }

  public void setCdr3IsSet(boolean value) {
    if (!value) {
      this.cdr3 = null;
    }
  }

  /**
   * 
   * @see Locus
   */
  public Locus getLocus() {
    return this.locus;
  }

  /**
   * 
   * @see Locus
   */
  public FindCdr3Req setLocus(Locus locus) {
    this.locus = locus;
    return this;
  }

  public void unsetLocus() {
    this.locus = null;
  }

  /** Returns true if field locus is set (has been assigned a value) and false otherwise */
  public boolean isSetLocus() {
    return this.locus != null;
  }

  public void setLocusIsSet(boolean value) {
    if (!value) {
      this.locus = null;
    }
  }

  public int getStudyIdsSize() {
    return (this.studyIds == null) ? 0 : this.studyIds.size();
  }

  public java.util.Iterator<String> getStudyIdsIterator() {
    return (this.studyIds == null) ? null : this.studyIds.iterator();
  }

  public void addToStudyIds(String elem) {
    if (this.studyIds == null) {
      this.studyIds = new ArrayList<String>();
    }
    this.studyIds.add(elem);
  }

  public List<String> getStudyIds() {
    return this.studyIds;
  }

  public FindCdr3Req setStudyIds(List<String> studyIds) {
    this.studyIds = studyIds;
    return this;
  }

  public void unsetStudyIds() {
    this.studyIds = null;
  }

  /** Returns true if field studyIds is set (has been assigned a value) and false otherwise */
  public boolean isSetStudyIds() {
    return this.studyIds != null;
  }

  public void setStudyIdsIsSet(boolean value) {
    if (!value) {
      this.studyIds = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case CDR3:
      if (value == null) {
        unsetCdr3();
      } else {
        setCdr3((String)value);
      }
      break;

    case LOCUS:
      if (value == null) {
        unsetLocus();
      } else {
        setLocus((Locus)value);
      }
      break;

    case STUDY_IDS:
      if (value == null) {
        unsetStudyIds();
      } else {
        setStudyIds((List<String>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case CDR3:
      return getCdr3();

    case LOCUS:
      return getLocus();

    case STUDY_IDS:
      return getStudyIds();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case CDR3:
      return isSetCdr3();
    case LOCUS:
      return isSetLocus();
    case STUDY_IDS:
      return isSetStudyIds();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof FindCdr3Req)
      return this.equals((FindCdr3Req)that);
    return false;
  }

  public boolean equals(FindCdr3Req that) {
    if (that == null)
      return false;

    boolean this_present_cdr3 = true && this.isSetCdr3();
    boolean that_present_cdr3 = true && that.isSetCdr3();
    if (this_present_cdr3 || that_present_cdr3) {
      if (!(this_present_cdr3 && that_present_cdr3))
        return false;
      if (!this.cdr3.equals(that.cdr3))
        return false;
    }

    boolean this_present_locus = true && this.isSetLocus();
    boolean that_present_locus = true && that.isSetLocus();
    if (this_present_locus || that_present_locus) {
      if (!(this_present_locus && that_present_locus))
        return false;
      if (!this.locus.equals(that.locus))
        return false;
    }

    boolean this_present_studyIds = true && this.isSetStudyIds();
    boolean that_present_studyIds = true && that.isSetStudyIds();
    if (this_present_studyIds || that_present_studyIds) {
      if (!(this_present_studyIds && that_present_studyIds))
        return false;
      if (!this.studyIds.equals(that.studyIds))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_cdr3 = true && (isSetCdr3());
    list.add(present_cdr3);
    if (present_cdr3)
      list.add(cdr3);

    boolean present_locus = true && (isSetLocus());
    list.add(present_locus);
    if (present_locus)
      list.add(locus.getValue());

    boolean present_studyIds = true && (isSetStudyIds());
    list.add(present_studyIds);
    if (present_studyIds)
      list.add(studyIds);

    return list.hashCode();
  }

  @Override
  public int compareTo(FindCdr3Req other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetCdr3()).compareTo(other.isSetCdr3());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCdr3()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cdr3, other.cdr3);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLocus()).compareTo(other.isSetLocus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLocus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.locus, other.locus);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStudyIds()).compareTo(other.isSetStudyIds());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStudyIds()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.studyIds, other.studyIds);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("FindCdr3Req(");
    boolean first = true;

    sb.append("cdr3:");
    if (this.cdr3 == null) {
      sb.append("null");
    } else {
      sb.append(this.cdr3);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("locus:");
    if (this.locus == null) {
      sb.append("null");
    } else {
      sb.append(this.locus);
    }
    first = false;
    if (isSetStudyIds()) {
      if (!first) sb.append(", ");
      sb.append("studyIds:");
      if (this.studyIds == null) {
        sb.append("null");
      } else {
        sb.append(this.studyIds);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (cdr3 == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'cdr3' was not present! Struct: " + toString());
    }
    if (locus == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'locus' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class FindCdr3ReqStandardSchemeFactory implements SchemeFactory {
    public FindCdr3ReqStandardScheme getScheme() {
      return new FindCdr3ReqStandardScheme();
    }
  }

  private static class FindCdr3ReqStandardScheme extends StandardScheme<FindCdr3Req> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, FindCdr3Req struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // CDR3
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.cdr3 = iprot.readString();
              struct.setCdr3IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // LOCUS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.locus = airr.Locus.findByValue(iprot.readI32());
              struct.setLocusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // STUDY_IDS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                struct.studyIds = new ArrayList<String>(_list0.size);
                String _elem1;
                for (int _i2 = 0; _i2 < _list0.size; ++_i2)
                {
                  _elem1 = iprot.readString();
                  struct.studyIds.add(_elem1);
                }
                iprot.readListEnd();
              }
              struct.setStudyIdsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, FindCdr3Req struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.cdr3 != null) {
        oprot.writeFieldBegin(CDR3_FIELD_DESC);
        oprot.writeString(struct.cdr3);
        oprot.writeFieldEnd();
      }
      if (struct.locus != null) {
        oprot.writeFieldBegin(LOCUS_FIELD_DESC);
        oprot.writeI32(struct.locus.getValue());
        oprot.writeFieldEnd();
      }
      if (struct.studyIds != null) {
        if (struct.isSetStudyIds()) {
          oprot.writeFieldBegin(STUDY_IDS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.studyIds.size()));
            for (String _iter3 : struct.studyIds)
            {
              oprot.writeString(_iter3);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class FindCdr3ReqTupleSchemeFactory implements SchemeFactory {
    public FindCdr3ReqTupleScheme getScheme() {
      return new FindCdr3ReqTupleScheme();
    }
  }

  private static class FindCdr3ReqTupleScheme extends TupleScheme<FindCdr3Req> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, FindCdr3Req struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeString(struct.cdr3);
      oprot.writeI32(struct.locus.getValue());
      BitSet optionals = new BitSet();
      if (struct.isSetStudyIds()) {
        optionals.set(0);
      }
      oprot.writeBitSet(optionals, 1);
      if (struct.isSetStudyIds()) {
        {
          oprot.writeI32(struct.studyIds.size());
          for (String _iter4 : struct.studyIds)
          {
            oprot.writeString(_iter4);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, FindCdr3Req struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.cdr3 = iprot.readString();
      struct.setCdr3IsSet(true);
      struct.locus = airr.Locus.findByValue(iprot.readI32());
      struct.setLocusIsSet(true);
      BitSet incoming = iprot.readBitSet(1);
      if (incoming.get(0)) {
        {
          org.apache.thrift.protocol.TList _list5 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.studyIds = new ArrayList<String>(_list5.size);
          String _elem6;
          for (int _i7 = 0; _i7 < _list5.size; ++_i7)
          {
            _elem6 = iprot.readString();
            struct.studyIds.add(_elem6);
          }
        }
        struct.setStudyIdsIsSet(true);
      }
    }
  }

}

