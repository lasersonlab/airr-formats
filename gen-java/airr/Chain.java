/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package airr;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2016-06-07")
public class Chain implements org.apache.thrift.TBase<Chain, Chain._Fields>, java.io.Serializable, Cloneable, Comparable<Chain> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Chain");

  private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField NT_SEQ_FIELD_DESC = new org.apache.thrift.protocol.TField("ntSeq", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField LOCUS_FIELD_DESC = new org.apache.thrift.protocol.TField("locus", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField V_ALLELE_FIELD_DESC = new org.apache.thrift.protocol.TField("vAllele", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField D_ALLELE_FIELD_DESC = new org.apache.thrift.protocol.TField("dAllele", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField J_ALLELE_FIELD_DESC = new org.apache.thrift.protocol.TField("jAllele", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField ALIGNMENT_FIELD_DESC = new org.apache.thrift.protocol.TField("alignment", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField NT_CDR3_FIELD_DESC = new org.apache.thrift.protocol.TField("ntCDR3", org.apache.thrift.protocol.TType.STRING, (short)8);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new ChainStandardSchemeFactory());
    schemes.put(TupleScheme.class, new ChainTupleSchemeFactory());
  }

  public String id; // optional
  public String ntSeq; // optional
  /**
   * 
   * @see Locus
   */
  public Locus locus; // optional
  public String vAllele; // optional
  public String dAllele; // optional
  public String jAllele; // optional
  public String alignment; // optional
  public String ntCDR3; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ID((short)1, "id"),
    NT_SEQ((short)2, "ntSeq"),
    /**
     * 
     * @see Locus
     */
    LOCUS((short)3, "locus"),
    V_ALLELE((short)4, "vAllele"),
    D_ALLELE((short)5, "dAllele"),
    J_ALLELE((short)6, "jAllele"),
    ALIGNMENT((short)7, "alignment"),
    NT_CDR3((short)8, "ntCDR3");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ID
          return ID;
        case 2: // NT_SEQ
          return NT_SEQ;
        case 3: // LOCUS
          return LOCUS;
        case 4: // V_ALLELE
          return V_ALLELE;
        case 5: // D_ALLELE
          return D_ALLELE;
        case 6: // J_ALLELE
          return J_ALLELE;
        case 7: // ALIGNMENT
          return ALIGNMENT;
        case 8: // NT_CDR3
          return NT_CDR3;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final _Fields optionals[] = {_Fields.ID,_Fields.NT_SEQ,_Fields.LOCUS,_Fields.V_ALLELE,_Fields.D_ALLELE,_Fields.J_ALLELE,_Fields.ALIGNMENT,_Fields.NT_CDR3};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.NT_SEQ, new org.apache.thrift.meta_data.FieldMetaData("ntSeq", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.LOCUS, new org.apache.thrift.meta_data.FieldMetaData("locus", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, Locus.class)));
    tmpMap.put(_Fields.V_ALLELE, new org.apache.thrift.meta_data.FieldMetaData("vAllele", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.D_ALLELE, new org.apache.thrift.meta_data.FieldMetaData("dAllele", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.J_ALLELE, new org.apache.thrift.meta_data.FieldMetaData("jAllele", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ALIGNMENT, new org.apache.thrift.meta_data.FieldMetaData("alignment", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.NT_CDR3, new org.apache.thrift.meta_data.FieldMetaData("ntCDR3", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Chain.class, metaDataMap);
  }

  public Chain() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public Chain(Chain other) {
    if (other.isSetId()) {
      this.id = other.id;
    }
    if (other.isSetNtSeq()) {
      this.ntSeq = other.ntSeq;
    }
    if (other.isSetLocus()) {
      this.locus = other.locus;
    }
    if (other.isSetVAllele()) {
      this.vAllele = other.vAllele;
    }
    if (other.isSetDAllele()) {
      this.dAllele = other.dAllele;
    }
    if (other.isSetJAllele()) {
      this.jAllele = other.jAllele;
    }
    if (other.isSetAlignment()) {
      this.alignment = other.alignment;
    }
    if (other.isSetNtCDR3()) {
      this.ntCDR3 = other.ntCDR3;
    }
  }

  public Chain deepCopy() {
    return new Chain(this);
  }

  @Override
  public void clear() {
    this.id = null;
    this.ntSeq = null;
    this.locus = null;
    this.vAllele = null;
    this.dAllele = null;
    this.jAllele = null;
    this.alignment = null;
    this.ntCDR3 = null;
  }

  public String getId() {
    return this.id;
  }

  public Chain setId(String id) {
    this.id = id;
    return this;
  }

  public void unsetId() {
    this.id = null;
  }

  /** Returns true if field id is set (has been assigned a value) and false otherwise */
  public boolean isSetId() {
    return this.id != null;
  }

  public void setIdIsSet(boolean value) {
    if (!value) {
      this.id = null;
    }
  }

  public String getNtSeq() {
    return this.ntSeq;
  }

  public Chain setNtSeq(String ntSeq) {
    this.ntSeq = ntSeq;
    return this;
  }

  public void unsetNtSeq() {
    this.ntSeq = null;
  }

  /** Returns true if field ntSeq is set (has been assigned a value) and false otherwise */
  public boolean isSetNtSeq() {
    return this.ntSeq != null;
  }

  public void setNtSeqIsSet(boolean value) {
    if (!value) {
      this.ntSeq = null;
    }
  }

  /**
   * 
   * @see Locus
   */
  public Locus getLocus() {
    return this.locus;
  }

  /**
   * 
   * @see Locus
   */
  public Chain setLocus(Locus locus) {
    this.locus = locus;
    return this;
  }

  public void unsetLocus() {
    this.locus = null;
  }

  /** Returns true if field locus is set (has been assigned a value) and false otherwise */
  public boolean isSetLocus() {
    return this.locus != null;
  }

  public void setLocusIsSet(boolean value) {
    if (!value) {
      this.locus = null;
    }
  }

  public String getVAllele() {
    return this.vAllele;
  }

  public Chain setVAllele(String vAllele) {
    this.vAllele = vAllele;
    return this;
  }

  public void unsetVAllele() {
    this.vAllele = null;
  }

  /** Returns true if field vAllele is set (has been assigned a value) and false otherwise */
  public boolean isSetVAllele() {
    return this.vAllele != null;
  }

  public void setVAlleleIsSet(boolean value) {
    if (!value) {
      this.vAllele = null;
    }
  }

  public String getDAllele() {
    return this.dAllele;
  }

  public Chain setDAllele(String dAllele) {
    this.dAllele = dAllele;
    return this;
  }

  public void unsetDAllele() {
    this.dAllele = null;
  }

  /** Returns true if field dAllele is set (has been assigned a value) and false otherwise */
  public boolean isSetDAllele() {
    return this.dAllele != null;
  }

  public void setDAlleleIsSet(boolean value) {
    if (!value) {
      this.dAllele = null;
    }
  }

  public String getJAllele() {
    return this.jAllele;
  }

  public Chain setJAllele(String jAllele) {
    this.jAllele = jAllele;
    return this;
  }

  public void unsetJAllele() {
    this.jAllele = null;
  }

  /** Returns true if field jAllele is set (has been assigned a value) and false otherwise */
  public boolean isSetJAllele() {
    return this.jAllele != null;
  }

  public void setJAlleleIsSet(boolean value) {
    if (!value) {
      this.jAllele = null;
    }
  }

  public String getAlignment() {
    return this.alignment;
  }

  public Chain setAlignment(String alignment) {
    this.alignment = alignment;
    return this;
  }

  public void unsetAlignment() {
    this.alignment = null;
  }

  /** Returns true if field alignment is set (has been assigned a value) and false otherwise */
  public boolean isSetAlignment() {
    return this.alignment != null;
  }

  public void setAlignmentIsSet(boolean value) {
    if (!value) {
      this.alignment = null;
    }
  }

  public String getNtCDR3() {
    return this.ntCDR3;
  }

  public Chain setNtCDR3(String ntCDR3) {
    this.ntCDR3 = ntCDR3;
    return this;
  }

  public void unsetNtCDR3() {
    this.ntCDR3 = null;
  }

  /** Returns true if field ntCDR3 is set (has been assigned a value) and false otherwise */
  public boolean isSetNtCDR3() {
    return this.ntCDR3 != null;
  }

  public void setNtCDR3IsSet(boolean value) {
    if (!value) {
      this.ntCDR3 = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case ID:
      if (value == null) {
        unsetId();
      } else {
        setId((String)value);
      }
      break;

    case NT_SEQ:
      if (value == null) {
        unsetNtSeq();
      } else {
        setNtSeq((String)value);
      }
      break;

    case LOCUS:
      if (value == null) {
        unsetLocus();
      } else {
        setLocus((Locus)value);
      }
      break;

    case V_ALLELE:
      if (value == null) {
        unsetVAllele();
      } else {
        setVAllele((String)value);
      }
      break;

    case D_ALLELE:
      if (value == null) {
        unsetDAllele();
      } else {
        setDAllele((String)value);
      }
      break;

    case J_ALLELE:
      if (value == null) {
        unsetJAllele();
      } else {
        setJAllele((String)value);
      }
      break;

    case ALIGNMENT:
      if (value == null) {
        unsetAlignment();
      } else {
        setAlignment((String)value);
      }
      break;

    case NT_CDR3:
      if (value == null) {
        unsetNtCDR3();
      } else {
        setNtCDR3((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case ID:
      return getId();

    case NT_SEQ:
      return getNtSeq();

    case LOCUS:
      return getLocus();

    case V_ALLELE:
      return getVAllele();

    case D_ALLELE:
      return getDAllele();

    case J_ALLELE:
      return getJAllele();

    case ALIGNMENT:
      return getAlignment();

    case NT_CDR3:
      return getNtCDR3();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case ID:
      return isSetId();
    case NT_SEQ:
      return isSetNtSeq();
    case LOCUS:
      return isSetLocus();
    case V_ALLELE:
      return isSetVAllele();
    case D_ALLELE:
      return isSetDAllele();
    case J_ALLELE:
      return isSetJAllele();
    case ALIGNMENT:
      return isSetAlignment();
    case NT_CDR3:
      return isSetNtCDR3();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof Chain)
      return this.equals((Chain)that);
    return false;
  }

  public boolean equals(Chain that) {
    if (that == null)
      return false;

    boolean this_present_id = true && this.isSetId();
    boolean that_present_id = true && that.isSetId();
    if (this_present_id || that_present_id) {
      if (!(this_present_id && that_present_id))
        return false;
      if (!this.id.equals(that.id))
        return false;
    }

    boolean this_present_ntSeq = true && this.isSetNtSeq();
    boolean that_present_ntSeq = true && that.isSetNtSeq();
    if (this_present_ntSeq || that_present_ntSeq) {
      if (!(this_present_ntSeq && that_present_ntSeq))
        return false;
      if (!this.ntSeq.equals(that.ntSeq))
        return false;
    }

    boolean this_present_locus = true && this.isSetLocus();
    boolean that_present_locus = true && that.isSetLocus();
    if (this_present_locus || that_present_locus) {
      if (!(this_present_locus && that_present_locus))
        return false;
      if (!this.locus.equals(that.locus))
        return false;
    }

    boolean this_present_vAllele = true && this.isSetVAllele();
    boolean that_present_vAllele = true && that.isSetVAllele();
    if (this_present_vAllele || that_present_vAllele) {
      if (!(this_present_vAllele && that_present_vAllele))
        return false;
      if (!this.vAllele.equals(that.vAllele))
        return false;
    }

    boolean this_present_dAllele = true && this.isSetDAllele();
    boolean that_present_dAllele = true && that.isSetDAllele();
    if (this_present_dAllele || that_present_dAllele) {
      if (!(this_present_dAllele && that_present_dAllele))
        return false;
      if (!this.dAllele.equals(that.dAllele))
        return false;
    }

    boolean this_present_jAllele = true && this.isSetJAllele();
    boolean that_present_jAllele = true && that.isSetJAllele();
    if (this_present_jAllele || that_present_jAllele) {
      if (!(this_present_jAllele && that_present_jAllele))
        return false;
      if (!this.jAllele.equals(that.jAllele))
        return false;
    }

    boolean this_present_alignment = true && this.isSetAlignment();
    boolean that_present_alignment = true && that.isSetAlignment();
    if (this_present_alignment || that_present_alignment) {
      if (!(this_present_alignment && that_present_alignment))
        return false;
      if (!this.alignment.equals(that.alignment))
        return false;
    }

    boolean this_present_ntCDR3 = true && this.isSetNtCDR3();
    boolean that_present_ntCDR3 = true && that.isSetNtCDR3();
    if (this_present_ntCDR3 || that_present_ntCDR3) {
      if (!(this_present_ntCDR3 && that_present_ntCDR3))
        return false;
      if (!this.ntCDR3.equals(that.ntCDR3))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_id = true && (isSetId());
    list.add(present_id);
    if (present_id)
      list.add(id);

    boolean present_ntSeq = true && (isSetNtSeq());
    list.add(present_ntSeq);
    if (present_ntSeq)
      list.add(ntSeq);

    boolean present_locus = true && (isSetLocus());
    list.add(present_locus);
    if (present_locus)
      list.add(locus.getValue());

    boolean present_vAllele = true && (isSetVAllele());
    list.add(present_vAllele);
    if (present_vAllele)
      list.add(vAllele);

    boolean present_dAllele = true && (isSetDAllele());
    list.add(present_dAllele);
    if (present_dAllele)
      list.add(dAllele);

    boolean present_jAllele = true && (isSetJAllele());
    list.add(present_jAllele);
    if (present_jAllele)
      list.add(jAllele);

    boolean present_alignment = true && (isSetAlignment());
    list.add(present_alignment);
    if (present_alignment)
      list.add(alignment);

    boolean present_ntCDR3 = true && (isSetNtCDR3());
    list.add(present_ntCDR3);
    if (present_ntCDR3)
      list.add(ntCDR3);

    return list.hashCode();
  }

  @Override
  public int compareTo(Chain other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetId()).compareTo(other.isSetId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNtSeq()).compareTo(other.isSetNtSeq());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNtSeq()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ntSeq, other.ntSeq);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLocus()).compareTo(other.isSetLocus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLocus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.locus, other.locus);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetVAllele()).compareTo(other.isSetVAllele());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetVAllele()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.vAllele, other.vAllele);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDAllele()).compareTo(other.isSetDAllele());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDAllele()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dAllele, other.dAllele);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetJAllele()).compareTo(other.isSetJAllele());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetJAllele()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.jAllele, other.jAllele);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAlignment()).compareTo(other.isSetAlignment());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAlignment()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.alignment, other.alignment);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNtCDR3()).compareTo(other.isSetNtCDR3());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNtCDR3()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ntCDR3, other.ntCDR3);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("Chain(");
    boolean first = true;

    if (isSetId()) {
      sb.append("id:");
      if (this.id == null) {
        sb.append("null");
      } else {
        sb.append(this.id);
      }
      first = false;
    }
    if (isSetNtSeq()) {
      if (!first) sb.append(", ");
      sb.append("ntSeq:");
      if (this.ntSeq == null) {
        sb.append("null");
      } else {
        sb.append(this.ntSeq);
      }
      first = false;
    }
    if (isSetLocus()) {
      if (!first) sb.append(", ");
      sb.append("locus:");
      if (this.locus == null) {
        sb.append("null");
      } else {
        sb.append(this.locus);
      }
      first = false;
    }
    if (isSetVAllele()) {
      if (!first) sb.append(", ");
      sb.append("vAllele:");
      if (this.vAllele == null) {
        sb.append("null");
      } else {
        sb.append(this.vAllele);
      }
      first = false;
    }
    if (isSetDAllele()) {
      if (!first) sb.append(", ");
      sb.append("dAllele:");
      if (this.dAllele == null) {
        sb.append("null");
      } else {
        sb.append(this.dAllele);
      }
      first = false;
    }
    if (isSetJAllele()) {
      if (!first) sb.append(", ");
      sb.append("jAllele:");
      if (this.jAllele == null) {
        sb.append("null");
      } else {
        sb.append(this.jAllele);
      }
      first = false;
    }
    if (isSetAlignment()) {
      if (!first) sb.append(", ");
      sb.append("alignment:");
      if (this.alignment == null) {
        sb.append("null");
      } else {
        sb.append(this.alignment);
      }
      first = false;
    }
    if (isSetNtCDR3()) {
      if (!first) sb.append(", ");
      sb.append("ntCDR3:");
      if (this.ntCDR3 == null) {
        sb.append("null");
      } else {
        sb.append(this.ntCDR3);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class ChainStandardSchemeFactory implements SchemeFactory {
    public ChainStandardScheme getScheme() {
      return new ChainStandardScheme();
    }
  }

  private static class ChainStandardScheme extends StandardScheme<Chain> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, Chain struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.id = iprot.readString();
              struct.setIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // NT_SEQ
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.ntSeq = iprot.readString();
              struct.setNtSeqIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // LOCUS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.locus = airr.Locus.findByValue(iprot.readI32());
              struct.setLocusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // V_ALLELE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.vAllele = iprot.readString();
              struct.setVAlleleIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // D_ALLELE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.dAllele = iprot.readString();
              struct.setDAlleleIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // J_ALLELE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.jAllele = iprot.readString();
              struct.setJAlleleIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // ALIGNMENT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.alignment = iprot.readString();
              struct.setAlignmentIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // NT_CDR3
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.ntCDR3 = iprot.readString();
              struct.setNtCDR3IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, Chain struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.id != null) {
        if (struct.isSetId()) {
          oprot.writeFieldBegin(ID_FIELD_DESC);
          oprot.writeString(struct.id);
          oprot.writeFieldEnd();
        }
      }
      if (struct.ntSeq != null) {
        if (struct.isSetNtSeq()) {
          oprot.writeFieldBegin(NT_SEQ_FIELD_DESC);
          oprot.writeString(struct.ntSeq);
          oprot.writeFieldEnd();
        }
      }
      if (struct.locus != null) {
        if (struct.isSetLocus()) {
          oprot.writeFieldBegin(LOCUS_FIELD_DESC);
          oprot.writeI32(struct.locus.getValue());
          oprot.writeFieldEnd();
        }
      }
      if (struct.vAllele != null) {
        if (struct.isSetVAllele()) {
          oprot.writeFieldBegin(V_ALLELE_FIELD_DESC);
          oprot.writeString(struct.vAllele);
          oprot.writeFieldEnd();
        }
      }
      if (struct.dAllele != null) {
        if (struct.isSetDAllele()) {
          oprot.writeFieldBegin(D_ALLELE_FIELD_DESC);
          oprot.writeString(struct.dAllele);
          oprot.writeFieldEnd();
        }
      }
      if (struct.jAllele != null) {
        if (struct.isSetJAllele()) {
          oprot.writeFieldBegin(J_ALLELE_FIELD_DESC);
          oprot.writeString(struct.jAllele);
          oprot.writeFieldEnd();
        }
      }
      if (struct.alignment != null) {
        if (struct.isSetAlignment()) {
          oprot.writeFieldBegin(ALIGNMENT_FIELD_DESC);
          oprot.writeString(struct.alignment);
          oprot.writeFieldEnd();
        }
      }
      if (struct.ntCDR3 != null) {
        if (struct.isSetNtCDR3()) {
          oprot.writeFieldBegin(NT_CDR3_FIELD_DESC);
          oprot.writeString(struct.ntCDR3);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class ChainTupleSchemeFactory implements SchemeFactory {
    public ChainTupleScheme getScheme() {
      return new ChainTupleScheme();
    }
  }

  private static class ChainTupleScheme extends TupleScheme<Chain> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, Chain struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetId()) {
        optionals.set(0);
      }
      if (struct.isSetNtSeq()) {
        optionals.set(1);
      }
      if (struct.isSetLocus()) {
        optionals.set(2);
      }
      if (struct.isSetVAllele()) {
        optionals.set(3);
      }
      if (struct.isSetDAllele()) {
        optionals.set(4);
      }
      if (struct.isSetJAllele()) {
        optionals.set(5);
      }
      if (struct.isSetAlignment()) {
        optionals.set(6);
      }
      if (struct.isSetNtCDR3()) {
        optionals.set(7);
      }
      oprot.writeBitSet(optionals, 8);
      if (struct.isSetId()) {
        oprot.writeString(struct.id);
      }
      if (struct.isSetNtSeq()) {
        oprot.writeString(struct.ntSeq);
      }
      if (struct.isSetLocus()) {
        oprot.writeI32(struct.locus.getValue());
      }
      if (struct.isSetVAllele()) {
        oprot.writeString(struct.vAllele);
      }
      if (struct.isSetDAllele()) {
        oprot.writeString(struct.dAllele);
      }
      if (struct.isSetJAllele()) {
        oprot.writeString(struct.jAllele);
      }
      if (struct.isSetAlignment()) {
        oprot.writeString(struct.alignment);
      }
      if (struct.isSetNtCDR3()) {
        oprot.writeString(struct.ntCDR3);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, Chain struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(8);
      if (incoming.get(0)) {
        struct.id = iprot.readString();
        struct.setIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.ntSeq = iprot.readString();
        struct.setNtSeqIsSet(true);
      }
      if (incoming.get(2)) {
        struct.locus = airr.Locus.findByValue(iprot.readI32());
        struct.setLocusIsSet(true);
      }
      if (incoming.get(3)) {
        struct.vAllele = iprot.readString();
        struct.setVAlleleIsSet(true);
      }
      if (incoming.get(4)) {
        struct.dAllele = iprot.readString();
        struct.setDAlleleIsSet(true);
      }
      if (incoming.get(5)) {
        struct.jAllele = iprot.readString();
        struct.setJAlleleIsSet(true);
      }
      if (incoming.get(6)) {
        struct.alignment = iprot.readString();
        struct.setAlignmentIsSet(true);
      }
      if (incoming.get(7)) {
        struct.ntCDR3 = iprot.readString();
        struct.setNtCDR3IsSet(true);
      }
    }
  }

}

