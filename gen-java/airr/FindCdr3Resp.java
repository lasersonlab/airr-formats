/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package airr;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2016-06-07")
public class FindCdr3Resp implements org.apache.thrift.TBase<FindCdr3Resp, FindCdr3Resp._Fields>, java.io.Serializable, Cloneable, Comparable<FindCdr3Resp> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("FindCdr3Resp");

  private static final org.apache.thrift.protocol.TField FOUND_FIELD_DESC = new org.apache.thrift.protocol.TField("found", org.apache.thrift.protocol.TType.BOOL, (short)1);
  private static final org.apache.thrift.protocol.TField SPECIFICITIES_FIELD_DESC = new org.apache.thrift.protocol.TField("specificities", org.apache.thrift.protocol.TType.LIST, (short)2);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new FindCdr3RespStandardSchemeFactory());
    schemes.put(TupleScheme.class, new FindCdr3RespTupleSchemeFactory());
  }

  public boolean found; // required
  public List<String> specificities; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    FOUND((short)1, "found"),
    SPECIFICITIES((short)2, "specificities");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // FOUND
          return FOUND;
        case 2: // SPECIFICITIES
          return SPECIFICITIES;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __FOUND_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.SPECIFICITIES};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.FOUND, new org.apache.thrift.meta_data.FieldMetaData("found", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.SPECIFICITIES, new org.apache.thrift.meta_data.FieldMetaData("specificities", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(FindCdr3Resp.class, metaDataMap);
  }

  public FindCdr3Resp() {
  }

  public FindCdr3Resp(
    boolean found)
  {
    this();
    this.found = found;
    setFoundIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public FindCdr3Resp(FindCdr3Resp other) {
    __isset_bitfield = other.__isset_bitfield;
    this.found = other.found;
    if (other.isSetSpecificities()) {
      List<String> __this__specificities = new ArrayList<String>(other.specificities);
      this.specificities = __this__specificities;
    }
  }

  public FindCdr3Resp deepCopy() {
    return new FindCdr3Resp(this);
  }

  @Override
  public void clear() {
    setFoundIsSet(false);
    this.found = false;
    this.specificities = null;
  }

  public boolean isFound() {
    return this.found;
  }

  public FindCdr3Resp setFound(boolean found) {
    this.found = found;
    setFoundIsSet(true);
    return this;
  }

  public void unsetFound() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __FOUND_ISSET_ID);
  }

  /** Returns true if field found is set (has been assigned a value) and false otherwise */
  public boolean isSetFound() {
    return EncodingUtils.testBit(__isset_bitfield, __FOUND_ISSET_ID);
  }

  public void setFoundIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __FOUND_ISSET_ID, value);
  }

  public int getSpecificitiesSize() {
    return (this.specificities == null) ? 0 : this.specificities.size();
  }

  public java.util.Iterator<String> getSpecificitiesIterator() {
    return (this.specificities == null) ? null : this.specificities.iterator();
  }

  public void addToSpecificities(String elem) {
    if (this.specificities == null) {
      this.specificities = new ArrayList<String>();
    }
    this.specificities.add(elem);
  }

  public List<String> getSpecificities() {
    return this.specificities;
  }

  public FindCdr3Resp setSpecificities(List<String> specificities) {
    this.specificities = specificities;
    return this;
  }

  public void unsetSpecificities() {
    this.specificities = null;
  }

  /** Returns true if field specificities is set (has been assigned a value) and false otherwise */
  public boolean isSetSpecificities() {
    return this.specificities != null;
  }

  public void setSpecificitiesIsSet(boolean value) {
    if (!value) {
      this.specificities = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case FOUND:
      if (value == null) {
        unsetFound();
      } else {
        setFound((Boolean)value);
      }
      break;

    case SPECIFICITIES:
      if (value == null) {
        unsetSpecificities();
      } else {
        setSpecificities((List<String>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case FOUND:
      return isFound();

    case SPECIFICITIES:
      return getSpecificities();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case FOUND:
      return isSetFound();
    case SPECIFICITIES:
      return isSetSpecificities();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof FindCdr3Resp)
      return this.equals((FindCdr3Resp)that);
    return false;
  }

  public boolean equals(FindCdr3Resp that) {
    if (that == null)
      return false;

    boolean this_present_found = true;
    boolean that_present_found = true;
    if (this_present_found || that_present_found) {
      if (!(this_present_found && that_present_found))
        return false;
      if (this.found != that.found)
        return false;
    }

    boolean this_present_specificities = true && this.isSetSpecificities();
    boolean that_present_specificities = true && that.isSetSpecificities();
    if (this_present_specificities || that_present_specificities) {
      if (!(this_present_specificities && that_present_specificities))
        return false;
      if (!this.specificities.equals(that.specificities))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_found = true;
    list.add(present_found);
    if (present_found)
      list.add(found);

    boolean present_specificities = true && (isSetSpecificities());
    list.add(present_specificities);
    if (present_specificities)
      list.add(specificities);

    return list.hashCode();
  }

  @Override
  public int compareTo(FindCdr3Resp other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetFound()).compareTo(other.isSetFound());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFound()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.found, other.found);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSpecificities()).compareTo(other.isSetSpecificities());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSpecificities()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.specificities, other.specificities);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("FindCdr3Resp(");
    boolean first = true;

    sb.append("found:");
    sb.append(this.found);
    first = false;
    if (isSetSpecificities()) {
      if (!first) sb.append(", ");
      sb.append("specificities:");
      if (this.specificities == null) {
        sb.append("null");
      } else {
        sb.append(this.specificities);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // alas, we cannot check 'found' because it's a primitive and you chose the non-beans generator.
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class FindCdr3RespStandardSchemeFactory implements SchemeFactory {
    public FindCdr3RespStandardScheme getScheme() {
      return new FindCdr3RespStandardScheme();
    }
  }

  private static class FindCdr3RespStandardScheme extends StandardScheme<FindCdr3Resp> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, FindCdr3Resp struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // FOUND
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.found = iprot.readBool();
              struct.setFoundIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // SPECIFICITIES
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list8 = iprot.readListBegin();
                struct.specificities = new ArrayList<String>(_list8.size);
                String _elem9;
                for (int _i10 = 0; _i10 < _list8.size; ++_i10)
                {
                  _elem9 = iprot.readString();
                  struct.specificities.add(_elem9);
                }
                iprot.readListEnd();
              }
              struct.setSpecificitiesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      if (!struct.isSetFound()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'found' was not found in serialized data! Struct: " + toString());
      }
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, FindCdr3Resp struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(FOUND_FIELD_DESC);
      oprot.writeBool(struct.found);
      oprot.writeFieldEnd();
      if (struct.specificities != null) {
        if (struct.isSetSpecificities()) {
          oprot.writeFieldBegin(SPECIFICITIES_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.specificities.size()));
            for (String _iter11 : struct.specificities)
            {
              oprot.writeString(_iter11);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class FindCdr3RespTupleSchemeFactory implements SchemeFactory {
    public FindCdr3RespTupleScheme getScheme() {
      return new FindCdr3RespTupleScheme();
    }
  }

  private static class FindCdr3RespTupleScheme extends TupleScheme<FindCdr3Resp> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, FindCdr3Resp struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeBool(struct.found);
      BitSet optionals = new BitSet();
      if (struct.isSetSpecificities()) {
        optionals.set(0);
      }
      oprot.writeBitSet(optionals, 1);
      if (struct.isSetSpecificities()) {
        {
          oprot.writeI32(struct.specificities.size());
          for (String _iter12 : struct.specificities)
          {
            oprot.writeString(_iter12);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, FindCdr3Resp struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.found = iprot.readBool();
      struct.setFoundIsSet(true);
      BitSet incoming = iprot.readBitSet(1);
      if (incoming.get(0)) {
        {
          org.apache.thrift.protocol.TList _list13 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.specificities = new ArrayList<String>(_list13.size);
          String _elem14;
          for (int _i15 = 0; _i15 < _list13.size; ++_i15)
          {
            _elem14 = iprot.readString();
            struct.specificities.add(_elem14);
          }
        }
        struct.setSpecificitiesIsSet(true);
      }
    }
  }

}

