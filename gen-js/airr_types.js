//
// Autogenerated by Thrift Compiler (0.9.3)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//


if (typeof airr === 'undefined') {
  airr = {};
}
airr.Origin = {
  'HUMAN' : 0,
  'ANIMAL' : 1,
  'SYNTHETIC' : 2
};
airr.Sex = {
  'MALE' : 0,
  'FEMALE' : 1
};
airr.Locus = {
  'IGH' : 0,
  'IGK' : 1,
  'IGL' : 2,
  'TRB' : 3,
  'TRA' : 4,
  'TRG' : 5,
  'TRD' : 6
};
airr.Study = function(args) {
  this.id = null;
  this.title = null;
  this.labName = null;
  this.correspondence = null;
  this.doi = null;
  if (args) {
    if (args.id !== undefined && args.id !== null) {
      this.id = args.id;
    }
    if (args.title !== undefined && args.title !== null) {
      this.title = args.title;
    }
    if (args.labName !== undefined && args.labName !== null) {
      this.labName = args.labName;
    }
    if (args.correspondence !== undefined && args.correspondence !== null) {
      this.correspondence = args.correspondence;
    }
    if (args.doi !== undefined && args.doi !== null) {
      this.doi = args.doi;
    }
  }
};
airr.Study.prototype = {};
airr.Study.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.id = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.title = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.labName = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.correspondence = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.doi = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

airr.Study.prototype.write = function(output) {
  output.writeStructBegin('Study');
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.STRING, 1);
    output.writeString(this.id);
    output.writeFieldEnd();
  }
  if (this.title !== null && this.title !== undefined) {
    output.writeFieldBegin('title', Thrift.Type.STRING, 2);
    output.writeString(this.title);
    output.writeFieldEnd();
  }
  if (this.labName !== null && this.labName !== undefined) {
    output.writeFieldBegin('labName', Thrift.Type.STRING, 3);
    output.writeString(this.labName);
    output.writeFieldEnd();
  }
  if (this.correspondence !== null && this.correspondence !== undefined) {
    output.writeFieldBegin('correspondence', Thrift.Type.STRING, 4);
    output.writeString(this.correspondence);
    output.writeFieldEnd();
  }
  if (this.doi !== null && this.doi !== undefined) {
    output.writeFieldBegin('doi', Thrift.Type.STRING, 5);
    output.writeString(this.doi);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

airr.Subject = function(args) {
  this.id = null;
  this.origin = null;
  this.sex = null;
  this.age = null;
  if (args) {
    if (args.id !== undefined && args.id !== null) {
      this.id = args.id;
    }
    if (args.origin !== undefined && args.origin !== null) {
      this.origin = args.origin;
    }
    if (args.sex !== undefined && args.sex !== null) {
      this.sex = args.sex;
    }
    if (args.age !== undefined && args.age !== null) {
      this.age = args.age;
    }
  }
};
airr.Subject.prototype = {};
airr.Subject.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.id = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.origin = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.sex = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.age = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

airr.Subject.prototype.write = function(output) {
  output.writeStructBegin('Subject');
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.STRING, 1);
    output.writeString(this.id);
    output.writeFieldEnd();
  }
  if (this.origin !== null && this.origin !== undefined) {
    output.writeFieldBegin('origin', Thrift.Type.I32, 2);
    output.writeI32(this.origin);
    output.writeFieldEnd();
  }
  if (this.sex !== null && this.sex !== undefined) {
    output.writeFieldBegin('sex', Thrift.Type.I32, 3);
    output.writeI32(this.sex);
    output.writeFieldEnd();
  }
  if (this.age !== null && this.age !== undefined) {
    output.writeFieldBegin('age', Thrift.Type.I32, 4);
    output.writeI32(this.age);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

airr.Sample = function(args) {
  this.id = null;
  this.type = null;
  this.source = null;
  this.dt = null;
  if (args) {
    if (args.id !== undefined && args.id !== null) {
      this.id = args.id;
    }
    if (args.type !== undefined && args.type !== null) {
      this.type = args.type;
    }
    if (args.source !== undefined && args.source !== null) {
      this.source = args.source;
    }
    if (args.dt !== undefined && args.dt !== null) {
      this.dt = args.dt;
    }
  }
};
airr.Sample.prototype = {};
airr.Sample.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.id = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.type = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.source = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.dt = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

airr.Sample.prototype.write = function(output) {
  output.writeStructBegin('Sample');
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.STRING, 1);
    output.writeString(this.id);
    output.writeFieldEnd();
  }
  if (this.type !== null && this.type !== undefined) {
    output.writeFieldBegin('type', Thrift.Type.STRING, 2);
    output.writeString(this.type);
    output.writeFieldEnd();
  }
  if (this.source !== null && this.source !== undefined) {
    output.writeFieldBegin('source', Thrift.Type.STRING, 3);
    output.writeString(this.source);
    output.writeFieldEnd();
  }
  if (this.dt !== null && this.dt !== undefined) {
    output.writeFieldBegin('dt', Thrift.Type.STRING, 4);
    output.writeString(this.dt);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

airr.Chain = function(args) {
  this.id = null;
  this.ntSeq = null;
  this.locus = null;
  this.vAllele = null;
  this.dAllele = null;
  this.jAllele = null;
  this.alignment = null;
  this.ntCDR3 = null;
  if (args) {
    if (args.id !== undefined && args.id !== null) {
      this.id = args.id;
    }
    if (args.ntSeq !== undefined && args.ntSeq !== null) {
      this.ntSeq = args.ntSeq;
    }
    if (args.locus !== undefined && args.locus !== null) {
      this.locus = args.locus;
    }
    if (args.vAllele !== undefined && args.vAllele !== null) {
      this.vAllele = args.vAllele;
    }
    if (args.dAllele !== undefined && args.dAllele !== null) {
      this.dAllele = args.dAllele;
    }
    if (args.jAllele !== undefined && args.jAllele !== null) {
      this.jAllele = args.jAllele;
    }
    if (args.alignment !== undefined && args.alignment !== null) {
      this.alignment = args.alignment;
    }
    if (args.ntCDR3 !== undefined && args.ntCDR3 !== null) {
      this.ntCDR3 = args.ntCDR3;
    }
  }
};
airr.Chain.prototype = {};
airr.Chain.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.id = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.ntSeq = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.locus = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.vAllele = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.dAllele = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRING) {
        this.jAllele = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.STRING) {
        this.alignment = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.STRING) {
        this.ntCDR3 = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

airr.Chain.prototype.write = function(output) {
  output.writeStructBegin('Chain');
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.STRING, 1);
    output.writeString(this.id);
    output.writeFieldEnd();
  }
  if (this.ntSeq !== null && this.ntSeq !== undefined) {
    output.writeFieldBegin('ntSeq', Thrift.Type.STRING, 2);
    output.writeString(this.ntSeq);
    output.writeFieldEnd();
  }
  if (this.locus !== null && this.locus !== undefined) {
    output.writeFieldBegin('locus', Thrift.Type.I32, 3);
    output.writeI32(this.locus);
    output.writeFieldEnd();
  }
  if (this.vAllele !== null && this.vAllele !== undefined) {
    output.writeFieldBegin('vAllele', Thrift.Type.STRING, 4);
    output.writeString(this.vAllele);
    output.writeFieldEnd();
  }
  if (this.dAllele !== null && this.dAllele !== undefined) {
    output.writeFieldBegin('dAllele', Thrift.Type.STRING, 5);
    output.writeString(this.dAllele);
    output.writeFieldEnd();
  }
  if (this.jAllele !== null && this.jAllele !== undefined) {
    output.writeFieldBegin('jAllele', Thrift.Type.STRING, 6);
    output.writeString(this.jAllele);
    output.writeFieldEnd();
  }
  if (this.alignment !== null && this.alignment !== undefined) {
    output.writeFieldBegin('alignment', Thrift.Type.STRING, 7);
    output.writeString(this.alignment);
    output.writeFieldEnd();
  }
  if (this.ntCDR3 !== null && this.ntCDR3 !== undefined) {
    output.writeFieldBegin('ntCDR3', Thrift.Type.STRING, 8);
    output.writeString(this.ntCDR3);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

airr.FindCdr3Req = function(args) {
  this.cdr3 = null;
  this.locus = null;
  this.studyIds = null;
  if (args) {
    if (args.cdr3 !== undefined && args.cdr3 !== null) {
      this.cdr3 = args.cdr3;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field cdr3 is unset!');
    }
    if (args.locus !== undefined && args.locus !== null) {
      this.locus = args.locus;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field locus is unset!');
    }
    if (args.studyIds !== undefined && args.studyIds !== null) {
      this.studyIds = Thrift.copyList(args.studyIds, [null]);
    }
  }
};
airr.FindCdr3Req.prototype = {};
airr.FindCdr3Req.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.cdr3 = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.locus = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        var _size0 = 0;
        var _rtmp34;
        this.studyIds = [];
        var _etype3 = 0;
        _rtmp34 = input.readListBegin();
        _etype3 = _rtmp34.etype;
        _size0 = _rtmp34.size;
        for (var _i5 = 0; _i5 < _size0; ++_i5)
        {
          var elem6 = null;
          elem6 = input.readString().value;
          this.studyIds.push(elem6);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

airr.FindCdr3Req.prototype.write = function(output) {
  output.writeStructBegin('FindCdr3Req');
  if (this.cdr3 !== null && this.cdr3 !== undefined) {
    output.writeFieldBegin('cdr3', Thrift.Type.STRING, 1);
    output.writeString(this.cdr3);
    output.writeFieldEnd();
  }
  if (this.locus !== null && this.locus !== undefined) {
    output.writeFieldBegin('locus', Thrift.Type.I32, 2);
    output.writeI32(this.locus);
    output.writeFieldEnd();
  }
  if (this.studyIds !== null && this.studyIds !== undefined) {
    output.writeFieldBegin('studyIds', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRING, this.studyIds.length);
    for (var iter7 in this.studyIds)
    {
      if (this.studyIds.hasOwnProperty(iter7))
      {
        iter7 = this.studyIds[iter7];
        output.writeString(iter7);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

airr.FindCdr3Resp = function(args) {
  this.found = null;
  this.specificities = null;
  if (args) {
    if (args.found !== undefined && args.found !== null) {
      this.found = args.found;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field found is unset!');
    }
    if (args.specificities !== undefined && args.specificities !== null) {
      this.specificities = Thrift.copyList(args.specificities, [null]);
    }
  }
};
airr.FindCdr3Resp.prototype = {};
airr.FindCdr3Resp.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.BOOL) {
        this.found = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size8 = 0;
        var _rtmp312;
        this.specificities = [];
        var _etype11 = 0;
        _rtmp312 = input.readListBegin();
        _etype11 = _rtmp312.etype;
        _size8 = _rtmp312.size;
        for (var _i13 = 0; _i13 < _size8; ++_i13)
        {
          var elem14 = null;
          elem14 = input.readString().value;
          this.specificities.push(elem14);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

airr.FindCdr3Resp.prototype.write = function(output) {
  output.writeStructBegin('FindCdr3Resp');
  if (this.found !== null && this.found !== undefined) {
    output.writeFieldBegin('found', Thrift.Type.BOOL, 1);
    output.writeBool(this.found);
    output.writeFieldEnd();
  }
  if (this.specificities !== null && this.specificities !== undefined) {
    output.writeFieldBegin('specificities', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRING, this.specificities.length);
    for (var iter15 in this.specificities)
    {
      if (this.specificities.hasOwnProperty(iter15))
      {
        iter15 = this.specificities[iter15];
        output.writeString(iter15);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

