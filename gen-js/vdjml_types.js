//
// Autogenerated by Thrift Compiler (0.9.3)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//


if (typeof vdjserver === 'undefined') {
  vdjserver = {};
}
vdjserver.Aminoacid = {
  'Aminoacid__' : 0,
  'Aminoacid_A' : 1,
  'Aminoacid_Ala' : 2,
  'Aminoacid_Arg' : 3,
  'Aminoacid_Asn' : 4,
  'Aminoacid_Asp' : 5,
  'Aminoacid_C' : 6,
  'Aminoacid_Cys' : 7,
  'Aminoacid_D' : 8,
  'Aminoacid_E' : 9,
  'Aminoacid_F' : 10,
  'Aminoacid_G' : 11,
  'Aminoacid_Gln' : 12,
  'Aminoacid_Glu' : 13,
  'Aminoacid_Gly' : 14,
  'Aminoacid_H' : 15,
  'Aminoacid_His' : 16,
  'Aminoacid_I' : 17,
  'Aminoacid_Ile' : 18,
  'Aminoacid_K' : 19,
  'Aminoacid_L' : 20,
  'Aminoacid_Leu' : 21,
  'Aminoacid_Lys' : 22,
  'Aminoacid_M' : 23,
  'Aminoacid_Met' : 24,
  'Aminoacid_N' : 25,
  'Aminoacid_P' : 26,
  'Aminoacid_Phe' : 27,
  'Aminoacid_Pro' : 28,
  'Aminoacid_Q' : 29,
  'Aminoacid_R' : 30,
  'Aminoacid_S' : 31,
  'Aminoacid_Ser' : 32,
  'Aminoacid_Stop' : 33,
  'Aminoacid_T' : 34,
  'Aminoacid_Thr' : 35,
  'Aminoacid_Trp' : 36,
  'Aminoacid_Tyr' : 37,
  'Aminoacid_V' : 38,
  'Aminoacid_Val' : 39,
  'Aminoacid_W' : 40,
  'Aminoacid_X' : 41,
  'Aminoacid_Y' : 42,
  'Aminoacid_a' : 43,
  'Aminoacid_c' : 44,
  'Aminoacid_d' : 45,
  'Aminoacid_e' : 46,
  'Aminoacid_f' : 47,
  'Aminoacid_g' : 48,
  'Aminoacid_h' : 49,
  'Aminoacid_i' : 50,
  'Aminoacid_k' : 51,
  'Aminoacid_l' : 52,
  'Aminoacid_m' : 53,
  'Aminoacid_n' : 54,
  'Aminoacid_p' : 55,
  'Aminoacid_q' : 56,
  'Aminoacid_r' : 57,
  'Aminoacid_s' : 58,
  'Aminoacid_t' : 59,
  'Aminoacid_v' : 60,
  'Aminoacid_w' : 61,
  'Aminoacid_x' : 62,
  'Aminoacid_y' : 63
};
vdjserver.Nucleotide_ambiguous = {
  'Nucleotide_ambiguous_B' : 0,
  'Nucleotide_ambiguous_D' : 1,
  'Nucleotide_ambiguous_H' : 2,
  'Nucleotide_ambiguous_K' : 3,
  'Nucleotide_ambiguous_M' : 4,
  'Nucleotide_ambiguous_N' : 5,
  'Nucleotide_ambiguous_R' : 6,
  'Nucleotide_ambiguous_S' : 7,
  'Nucleotide_ambiguous_V' : 8,
  'Nucleotide_ambiguous_W' : 9,
  'Nucleotide_ambiguous_Y' : 10,
  'Nucleotide_ambiguous_b' : 11,
  'Nucleotide_ambiguous_d' : 12,
  'Nucleotide_ambiguous_h' : 13,
  'Nucleotide_ambiguous_k' : 14,
  'Nucleotide_ambiguous_m' : 15,
  'Nucleotide_ambiguous_n' : 16,
  'Nucleotide_ambiguous_r' : 17,
  'Nucleotide_ambiguous_s' : 18,
  'Nucleotide_ambiguous_v' : 19,
  'Nucleotide_ambiguous_w' : 20,
  'Nucleotide_ambiguous_y' : 21
};
vdjserver.Nucleotide_defined = {
  'Nucleotide_defined_A' : 0,
  'Nucleotide_defined_C' : 1,
  'Nucleotide_defined_G' : 2,
  'Nucleotide_defined_T' : 3,
  'Nucleotide_defined_U' : 4,
  'Nucleotide_defined_a' : 5,
  'Nucleotide_defined_c' : 6,
  'Nucleotide_defined_g' : 7,
  'Nucleotide_defined_t' : 8,
  'Nucleotide_defined_u' : 9
};
vdjserver.Segment_type = {
  'Segment_type_D' : 0,
  'Segment_type_J' : 1,
  'Segment_type_V' : 2
};
vdjserver.UnspecifiedType = function(args) {
  this.baseObjectType = null;
  this.object = null;
  if (args) {
    if (args.baseObjectType !== undefined && args.baseObjectType !== null) {
      this.baseObjectType = args.baseObjectType;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field baseObjectType is unset!');
    }
    if (args.object !== undefined && args.object !== null) {
      this.object = args.object;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field object is unset!');
    }
  }
};
vdjserver.UnspecifiedType.prototype = {};
vdjserver.UnspecifiedType.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.baseObjectType = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.object = input.readBinary().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

vdjserver.UnspecifiedType.prototype.write = function(output) {
  output.writeStructBegin('UnspecifiedType');
  if (this.baseObjectType !== null && this.baseObjectType !== undefined) {
    output.writeFieldBegin('baseObjectType', Thrift.Type.STRING, 1);
    output.writeString(this.baseObjectType);
    output.writeFieldEnd();
  }
  if (this.object !== null && this.object !== undefined) {
    output.writeFieldBegin('object', Thrift.Type.STRING, 2);
    output.writeBinary(this.object);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

vdjserver.aa_substitutionType = function(args) {
  this.gl_aa = null;
  this.read_aa = null;
  this.read_pos0 = null;
  if (args) {
    if (args.gl_aa !== undefined && args.gl_aa !== null) {
      this.gl_aa = args.gl_aa;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field gl_aa is unset!');
    }
    if (args.read_aa !== undefined && args.read_aa !== null) {
      this.read_aa = args.read_aa;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field read_aa is unset!');
    }
    if (args.read_pos0 !== undefined && args.read_pos0 !== null) {
      this.read_pos0 = args.read_pos0;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field read_pos0 is unset!');
    }
  }
};
vdjserver.aa_substitutionType.prototype = {};
vdjserver.aa_substitutionType.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.gl_aa = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.read_aa = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I64) {
        this.read_pos0 = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

vdjserver.aa_substitutionType.prototype.write = function(output) {
  output.writeStructBegin('aa_substitutionType');
  if (this.gl_aa !== null && this.gl_aa !== undefined) {
    output.writeFieldBegin('gl_aa', Thrift.Type.I32, 1);
    output.writeI32(this.gl_aa);
    output.writeFieldEnd();
  }
  if (this.read_aa !== null && this.read_aa !== undefined) {
    output.writeFieldBegin('read_aa', Thrift.Type.I32, 2);
    output.writeI32(this.read_aa);
    output.writeFieldEnd();
  }
  if (this.read_pos0 !== null && this.read_pos0 !== undefined) {
    output.writeFieldBegin('read_pos0', Thrift.Type.I64, 3);
    output.writeI64(this.read_pos0);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

vdjserver.alignerType = function(args) {
  this.aligner_id = null;
  this.name = null;
  this.parameters = null;
  this.run_id = null;
  this.uri = null;
  this.version = null;
  if (args) {
    if (args.aligner_id !== undefined && args.aligner_id !== null) {
      this.aligner_id = args.aligner_id;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field aligner_id is unset!');
    }
    if (args.name !== undefined && args.name !== null) {
      this.name = args.name;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field name is unset!');
    }
    if (args.parameters !== undefined && args.parameters !== null) {
      this.parameters = args.parameters;
    }
    if (args.run_id !== undefined && args.run_id !== null) {
      this.run_id = args.run_id;
    }
    if (args.uri !== undefined && args.uri !== null) {
      this.uri = new vdjserver.UnspecifiedType(args.uri);
    }
    if (args.version !== undefined && args.version !== null) {
      this.version = args.version;
    }
  }
};
vdjserver.alignerType.prototype = {};
vdjserver.alignerType.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.aligner_id = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.parameters = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I64) {
        this.run_id = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRUCT) {
        this.uri = new vdjserver.UnspecifiedType();
        this.uri.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRING) {
        this.version = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

vdjserver.alignerType.prototype.write = function(output) {
  output.writeStructBegin('alignerType');
  if (this.aligner_id !== null && this.aligner_id !== undefined) {
    output.writeFieldBegin('aligner_id', Thrift.Type.I64, 1);
    output.writeI64(this.aligner_id);
    output.writeFieldEnd();
  }
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 2);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  if (this.parameters !== null && this.parameters !== undefined) {
    output.writeFieldBegin('parameters', Thrift.Type.STRING, 3);
    output.writeString(this.parameters);
    output.writeFieldEnd();
  }
  if (this.run_id !== null && this.run_id !== undefined) {
    output.writeFieldBegin('run_id', Thrift.Type.I64, 4);
    output.writeI64(this.run_id);
    output.writeFieldEnd();
  }
  if (this.uri !== null && this.uri !== undefined) {
    output.writeFieldBegin('uri', Thrift.Type.STRUCT, 5);
    this.uri.write(output);
    output.writeFieldEnd();
  }
  if (this.version !== null && this.version !== undefined) {
    output.writeFieldBegin('version', Thrift.Type.STRING, 6);
    output.writeString(this.version);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

vdjserver.generatorType = function(args) {
  this.name = null;
  this.time_gmt = null;
  this.version = null;
  if (args) {
    if (args.name !== undefined && args.name !== null) {
      this.name = args.name;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field name is unset!');
    }
    if (args.time_gmt !== undefined && args.time_gmt !== null) {
      this.time_gmt = args.time_gmt;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field time_gmt is unset!');
    }
    if (args.version !== undefined && args.version !== null) {
      this.version = args.version;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field version is unset!');
    }
  }
};
vdjserver.generatorType.prototype = {};
vdjserver.generatorType.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.time_gmt = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.version = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

vdjserver.generatorType.prototype.write = function(output) {
  output.writeStructBegin('generatorType');
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 1);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  if (this.time_gmt !== null && this.time_gmt !== undefined) {
    output.writeFieldBegin('time_gmt', Thrift.Type.I64, 2);
    output.writeI64(this.time_gmt);
    output.writeFieldEnd();
  }
  if (this.version !== null && this.version !== undefined) {
    output.writeFieldBegin('version', Thrift.Type.STRING, 3);
    output.writeString(this.version);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

vdjserver.germline_dbType = function(args) {
  this.gl_db_id = null;
  this.name = null;
  this.species = null;
  this.uri = null;
  this.version = null;
  if (args) {
    if (args.gl_db_id !== undefined && args.gl_db_id !== null) {
      this.gl_db_id = args.gl_db_id;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field gl_db_id is unset!');
    }
    if (args.name !== undefined && args.name !== null) {
      this.name = args.name;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field name is unset!');
    }
    if (args.species !== undefined && args.species !== null) {
      this.species = args.species;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field species is unset!');
    }
    if (args.uri !== undefined && args.uri !== null) {
      this.uri = new vdjserver.UnspecifiedType(args.uri);
    }
    if (args.version !== undefined && args.version !== null) {
      this.version = args.version;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field version is unset!');
    }
  }
};
vdjserver.germline_dbType.prototype = {};
vdjserver.germline_dbType.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.gl_db_id = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.species = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.uri = new vdjserver.UnspecifiedType();
        this.uri.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.version = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

vdjserver.germline_dbType.prototype.write = function(output) {
  output.writeStructBegin('germline_dbType');
  if (this.gl_db_id !== null && this.gl_db_id !== undefined) {
    output.writeFieldBegin('gl_db_id', Thrift.Type.I64, 1);
    output.writeI64(this.gl_db_id);
    output.writeFieldEnd();
  }
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 2);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  if (this.species !== null && this.species !== undefined) {
    output.writeFieldBegin('species', Thrift.Type.STRING, 3);
    output.writeString(this.species);
    output.writeFieldEnd();
  }
  if (this.uri !== null && this.uri !== undefined) {
    output.writeFieldBegin('uri', Thrift.Type.STRUCT, 4);
    this.uri.write(output);
    output.writeFieldEnd();
  }
  if (this.version !== null && this.version !== undefined) {
    output.writeFieldBegin('version', Thrift.Type.STRING, 5);
    output.writeString(this.version);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

vdjserver.gl_seg_matchType = function(args) {
  this.aligner_id = null;
  this.gl_db_id = null;
  this.gl_pos0 = null;
  this.gl_seg_match_id = null;
  this.name = null;
  this.num_system = null;
  this.type = null;
  if (args) {
    if (args.aligner_id !== undefined && args.aligner_id !== null) {
      this.aligner_id = args.aligner_id;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field aligner_id is unset!');
    }
    if (args.gl_db_id !== undefined && args.gl_db_id !== null) {
      this.gl_db_id = args.gl_db_id;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field gl_db_id is unset!');
    }
    if (args.gl_pos0 !== undefined && args.gl_pos0 !== null) {
      this.gl_pos0 = args.gl_pos0;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field gl_pos0 is unset!');
    }
    if (args.gl_seg_match_id !== undefined && args.gl_seg_match_id !== null) {
      this.gl_seg_match_id = args.gl_seg_match_id;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field gl_seg_match_id is unset!');
    }
    if (args.name !== undefined && args.name !== null) {
      this.name = args.name;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field name is unset!');
    }
    if (args.num_system !== undefined && args.num_system !== null) {
      this.num_system = args.num_system;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field num_system is unset!');
    }
    if (args.type !== undefined && args.type !== null) {
      this.type = args.type;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field type is unset!');
    }
  }
};
vdjserver.gl_seg_matchType.prototype = {};
vdjserver.gl_seg_matchType.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.aligner_id = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.gl_db_id = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I64) {
        this.gl_pos0 = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I64) {
        this.gl_seg_match_id = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRING) {
        this.num_system = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.I32) {
        this.type = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

vdjserver.gl_seg_matchType.prototype.write = function(output) {
  output.writeStructBegin('gl_seg_matchType');
  if (this.aligner_id !== null && this.aligner_id !== undefined) {
    output.writeFieldBegin('aligner_id', Thrift.Type.I64, 1);
    output.writeI64(this.aligner_id);
    output.writeFieldEnd();
  }
  if (this.gl_db_id !== null && this.gl_db_id !== undefined) {
    output.writeFieldBegin('gl_db_id', Thrift.Type.I64, 2);
    output.writeI64(this.gl_db_id);
    output.writeFieldEnd();
  }
  if (this.gl_pos0 !== null && this.gl_pos0 !== undefined) {
    output.writeFieldBegin('gl_pos0', Thrift.Type.I64, 3);
    output.writeI64(this.gl_pos0);
    output.writeFieldEnd();
  }
  if (this.gl_seg_match_id !== null && this.gl_seg_match_id !== undefined) {
    output.writeFieldBegin('gl_seg_match_id', Thrift.Type.I64, 4);
    output.writeI64(this.gl_seg_match_id);
    output.writeFieldEnd();
  }
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 5);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  if (this.num_system !== null && this.num_system !== undefined) {
    output.writeFieldBegin('num_system', Thrift.Type.STRING, 6);
    output.writeString(this.num_system);
    output.writeFieldEnd();
  }
  if (this.type !== null && this.type !== undefined) {
    output.writeFieldBegin('type', Thrift.Type.I32, 7);
    output.writeI32(this.type);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

vdjserver.metaType = function(args) {
  this.aligner = null;
  this.generator = null;
  this.germline_db = null;
  if (args) {
    if (args.aligner !== undefined && args.aligner !== null) {
      this.aligner = new vdjserver.alignerType(args.aligner);
    }
    if (args.generator !== undefined && args.generator !== null) {
      this.generator = new vdjserver.generatorType(args.generator);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field generator is unset!');
    }
    if (args.germline_db !== undefined && args.germline_db !== null) {
      this.germline_db = new vdjserver.germline_dbType(args.germline_db);
    }
  }
};
vdjserver.metaType.prototype = {};
vdjserver.metaType.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.aligner = new vdjserver.alignerType();
        this.aligner.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.generator = new vdjserver.generatorType();
        this.generator.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.germline_db = new vdjserver.germline_dbType();
        this.germline_db.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

vdjserver.metaType.prototype.write = function(output) {
  output.writeStructBegin('metaType');
  if (this.aligner !== null && this.aligner !== undefined) {
    output.writeFieldBegin('aligner', Thrift.Type.STRUCT, 1);
    this.aligner.write(output);
    output.writeFieldEnd();
  }
  if (this.generator !== null && this.generator !== undefined) {
    output.writeFieldBegin('generator', Thrift.Type.STRUCT, 2);
    this.generator.write(output);
    output.writeFieldEnd();
  }
  if (this.germline_db !== null && this.germline_db !== undefined) {
    output.writeFieldBegin('germline_db', Thrift.Type.STRUCT, 3);
    this.germline_db.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

vdjserver.regionType = function(args) {
  this.aligner_id = null;
  this.deletions = null;
  this.identity = null;
  this.insertions = null;
  this.inverted = null;
  this.mutated_invariant = null;
  this.name = null;
  this.num_system = null;
  this.out_frame_indel = null;
  this.out_frame_vdj = null;
  this.read_len = null;
  this.read_pos0 = null;
  this.score = null;
  this.stop_codon = null;
  this.substitutions = null;
  if (args) {
    if (args.aligner_id !== undefined && args.aligner_id !== null) {
      this.aligner_id = args.aligner_id;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field aligner_id is unset!');
    }
    if (args.deletions !== undefined && args.deletions !== null) {
      this.deletions = args.deletions;
    }
    if (args.identity !== undefined && args.identity !== null) {
      this.identity = args.identity;
    }
    if (args.insertions !== undefined && args.insertions !== null) {
      this.insertions = args.insertions;
    }
    if (args.inverted !== undefined && args.inverted !== null) {
      this.inverted = args.inverted;
    }
    if (args.mutated_invariant !== undefined && args.mutated_invariant !== null) {
      this.mutated_invariant = args.mutated_invariant;
    }
    if (args.name !== undefined && args.name !== null) {
      this.name = args.name;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field name is unset!');
    }
    if (args.num_system !== undefined && args.num_system !== null) {
      this.num_system = args.num_system;
    }
    if (args.out_frame_indel !== undefined && args.out_frame_indel !== null) {
      this.out_frame_indel = args.out_frame_indel;
    }
    if (args.out_frame_vdj !== undefined && args.out_frame_vdj !== null) {
      this.out_frame_vdj = args.out_frame_vdj;
    }
    if (args.read_len !== undefined && args.read_len !== null) {
      this.read_len = args.read_len;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field read_len is unset!');
    }
    if (args.read_pos0 !== undefined && args.read_pos0 !== null) {
      this.read_pos0 = args.read_pos0;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field read_pos0 is unset!');
    }
    if (args.score !== undefined && args.score !== null) {
      this.score = args.score;
    }
    if (args.stop_codon !== undefined && args.stop_codon !== null) {
      this.stop_codon = args.stop_codon;
    }
    if (args.substitutions !== undefined && args.substitutions !== null) {
      this.substitutions = args.substitutions;
    }
  }
};
vdjserver.regionType.prototype = {};
vdjserver.regionType.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.aligner_id = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.deletions = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.identity = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I64) {
        this.insertions = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.BOOL) {
        this.inverted = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.BOOL) {
        this.mutated_invariant = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.STRING) {
        this.num_system = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.BOOL) {
        this.out_frame_indel = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 10:
      if (ftype == Thrift.Type.BOOL) {
        this.out_frame_vdj = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 11:
      if (ftype == Thrift.Type.I64) {
        this.read_len = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 12:
      if (ftype == Thrift.Type.I64) {
        this.read_pos0 = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 13:
      if (ftype == Thrift.Type.I64) {
        this.score = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 14:
      if (ftype == Thrift.Type.BOOL) {
        this.stop_codon = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 15:
      if (ftype == Thrift.Type.I64) {
        this.substitutions = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

vdjserver.regionType.prototype.write = function(output) {
  output.writeStructBegin('regionType');
  if (this.aligner_id !== null && this.aligner_id !== undefined) {
    output.writeFieldBegin('aligner_id', Thrift.Type.I64, 1);
    output.writeI64(this.aligner_id);
    output.writeFieldEnd();
  }
  if (this.deletions !== null && this.deletions !== undefined) {
    output.writeFieldBegin('deletions', Thrift.Type.I64, 2);
    output.writeI64(this.deletions);
    output.writeFieldEnd();
  }
  if (this.identity !== null && this.identity !== undefined) {
    output.writeFieldBegin('identity', Thrift.Type.STRING, 3);
    output.writeString(this.identity);
    output.writeFieldEnd();
  }
  if (this.insertions !== null && this.insertions !== undefined) {
    output.writeFieldBegin('insertions', Thrift.Type.I64, 4);
    output.writeI64(this.insertions);
    output.writeFieldEnd();
  }
  if (this.inverted !== null && this.inverted !== undefined) {
    output.writeFieldBegin('inverted', Thrift.Type.BOOL, 5);
    output.writeBool(this.inverted);
    output.writeFieldEnd();
  }
  if (this.mutated_invariant !== null && this.mutated_invariant !== undefined) {
    output.writeFieldBegin('mutated_invariant', Thrift.Type.BOOL, 6);
    output.writeBool(this.mutated_invariant);
    output.writeFieldEnd();
  }
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 7);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  if (this.num_system !== null && this.num_system !== undefined) {
    output.writeFieldBegin('num_system', Thrift.Type.STRING, 8);
    output.writeString(this.num_system);
    output.writeFieldEnd();
  }
  if (this.out_frame_indel !== null && this.out_frame_indel !== undefined) {
    output.writeFieldBegin('out_frame_indel', Thrift.Type.BOOL, 9);
    output.writeBool(this.out_frame_indel);
    output.writeFieldEnd();
  }
  if (this.out_frame_vdj !== null && this.out_frame_vdj !== undefined) {
    output.writeFieldBegin('out_frame_vdj', Thrift.Type.BOOL, 10);
    output.writeBool(this.out_frame_vdj);
    output.writeFieldEnd();
  }
  if (this.read_len !== null && this.read_len !== undefined) {
    output.writeFieldBegin('read_len', Thrift.Type.I64, 11);
    output.writeI64(this.read_len);
    output.writeFieldEnd();
  }
  if (this.read_pos0 !== null && this.read_pos0 !== undefined) {
    output.writeFieldBegin('read_pos0', Thrift.Type.I64, 12);
    output.writeI64(this.read_pos0);
    output.writeFieldEnd();
  }
  if (this.score !== null && this.score !== undefined) {
    output.writeFieldBegin('score', Thrift.Type.I64, 13);
    output.writeI64(this.score);
    output.writeFieldEnd();
  }
  if (this.stop_codon !== null && this.stop_codon !== undefined) {
    output.writeFieldBegin('stop_codon', Thrift.Type.BOOL, 14);
    output.writeBool(this.stop_codon);
    output.writeFieldEnd();
  }
  if (this.substitutions !== null && this.substitutions !== undefined) {
    output.writeFieldBegin('substitutions', Thrift.Type.I64, 15);
    output.writeI64(this.substitutions);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

vdjserver.segment_matchType = function(args) {
  this.aa_substitution = null;
  this.btop = null;
  this.deletions = null;
  this.gl_len = null;
  this.gl_seg_match = null;
  this.identity = null;
  this.insertions = null;
  this.inverted = null;
  this.mutated_invariant = null;
  this.out_frame_indel = null;
  this.out_frame_vdj = null;
  this.read_len = null;
  this.read_pos0 = null;
  this.score = null;
  this.segment_match_id = null;
  this.stop_codon = null;
  this.substitutions = null;
  if (args) {
    if (args.aa_substitution !== undefined && args.aa_substitution !== null) {
      this.aa_substitution = Thrift.copyList(args.aa_substitution, [vdjserver.aa_substitutionType]);
    }
    if (args.btop !== undefined && args.btop !== null) {
      this.btop = args.btop;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field btop is unset!');
    }
    if (args.deletions !== undefined && args.deletions !== null) {
      this.deletions = args.deletions;
    }
    if (args.gl_len !== undefined && args.gl_len !== null) {
      this.gl_len = args.gl_len;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field gl_len is unset!');
    }
    if (args.gl_seg_match !== undefined && args.gl_seg_match !== null) {
      this.gl_seg_match = Thrift.copyList(args.gl_seg_match, [vdjserver.gl_seg_matchType]);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field gl_seg_match is unset!');
    }
    if (args.identity !== undefined && args.identity !== null) {
      this.identity = args.identity;
    }
    if (args.insertions !== undefined && args.insertions !== null) {
      this.insertions = args.insertions;
    }
    if (args.inverted !== undefined && args.inverted !== null) {
      this.inverted = args.inverted;
    }
    if (args.mutated_invariant !== undefined && args.mutated_invariant !== null) {
      this.mutated_invariant = args.mutated_invariant;
    }
    if (args.out_frame_indel !== undefined && args.out_frame_indel !== null) {
      this.out_frame_indel = args.out_frame_indel;
    }
    if (args.out_frame_vdj !== undefined && args.out_frame_vdj !== null) {
      this.out_frame_vdj = args.out_frame_vdj;
    }
    if (args.read_len !== undefined && args.read_len !== null) {
      this.read_len = args.read_len;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field read_len is unset!');
    }
    if (args.read_pos0 !== undefined && args.read_pos0 !== null) {
      this.read_pos0 = args.read_pos0;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field read_pos0 is unset!');
    }
    if (args.score !== undefined && args.score !== null) {
      this.score = args.score;
    }
    if (args.segment_match_id !== undefined && args.segment_match_id !== null) {
      this.segment_match_id = args.segment_match_id;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field segment_match_id is unset!');
    }
    if (args.stop_codon !== undefined && args.stop_codon !== null) {
      this.stop_codon = args.stop_codon;
    }
    if (args.substitutions !== undefined && args.substitutions !== null) {
      this.substitutions = args.substitutions;
    }
  }
};
vdjserver.segment_matchType.prototype = {};
vdjserver.segment_matchType.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        var _size0 = 0;
        var _rtmp34;
        this.aa_substitution = [];
        var _etype3 = 0;
        _rtmp34 = input.readListBegin();
        _etype3 = _rtmp34.etype;
        _size0 = _rtmp34.size;
        for (var _i5 = 0; _i5 < _size0; ++_i5)
        {
          var elem6 = null;
          elem6 = new vdjserver.aa_substitutionType();
          elem6.read(input);
          this.aa_substitution.push(elem6);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.btop = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I64) {
        this.deletions = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I64) {
        this.gl_len = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.LIST) {
        var _size7 = 0;
        var _rtmp311;
        this.gl_seg_match = [];
        var _etype10 = 0;
        _rtmp311 = input.readListBegin();
        _etype10 = _rtmp311.etype;
        _size7 = _rtmp311.size;
        for (var _i12 = 0; _i12 < _size7; ++_i12)
        {
          var elem13 = null;
          elem13 = new vdjserver.gl_seg_matchType();
          elem13.read(input);
          this.gl_seg_match.push(elem13);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRING) {
        this.identity = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.I64) {
        this.insertions = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.BOOL) {
        this.inverted = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.BOOL) {
        this.mutated_invariant = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 10:
      if (ftype == Thrift.Type.BOOL) {
        this.out_frame_indel = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 11:
      if (ftype == Thrift.Type.BOOL) {
        this.out_frame_vdj = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 12:
      if (ftype == Thrift.Type.I64) {
        this.read_len = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 13:
      if (ftype == Thrift.Type.I64) {
        this.read_pos0 = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 14:
      if (ftype == Thrift.Type.I64) {
        this.score = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 15:
      if (ftype == Thrift.Type.I64) {
        this.segment_match_id = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 16:
      if (ftype == Thrift.Type.BOOL) {
        this.stop_codon = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 17:
      if (ftype == Thrift.Type.I64) {
        this.substitutions = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

vdjserver.segment_matchType.prototype.write = function(output) {
  output.writeStructBegin('segment_matchType');
  if (this.aa_substitution !== null && this.aa_substitution !== undefined) {
    output.writeFieldBegin('aa_substitution', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.STRUCT, this.aa_substitution.length);
    for (var iter14 in this.aa_substitution)
    {
      if (this.aa_substitution.hasOwnProperty(iter14))
      {
        iter14 = this.aa_substitution[iter14];
        iter14.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.btop !== null && this.btop !== undefined) {
    output.writeFieldBegin('btop', Thrift.Type.STRING, 2);
    output.writeString(this.btop);
    output.writeFieldEnd();
  }
  if (this.deletions !== null && this.deletions !== undefined) {
    output.writeFieldBegin('deletions', Thrift.Type.I64, 3);
    output.writeI64(this.deletions);
    output.writeFieldEnd();
  }
  if (this.gl_len !== null && this.gl_len !== undefined) {
    output.writeFieldBegin('gl_len', Thrift.Type.I64, 4);
    output.writeI64(this.gl_len);
    output.writeFieldEnd();
  }
  if (this.gl_seg_match !== null && this.gl_seg_match !== undefined) {
    output.writeFieldBegin('gl_seg_match', Thrift.Type.LIST, 5);
    output.writeListBegin(Thrift.Type.STRUCT, this.gl_seg_match.length);
    for (var iter15 in this.gl_seg_match)
    {
      if (this.gl_seg_match.hasOwnProperty(iter15))
      {
        iter15 = this.gl_seg_match[iter15];
        iter15.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.identity !== null && this.identity !== undefined) {
    output.writeFieldBegin('identity', Thrift.Type.STRING, 6);
    output.writeString(this.identity);
    output.writeFieldEnd();
  }
  if (this.insertions !== null && this.insertions !== undefined) {
    output.writeFieldBegin('insertions', Thrift.Type.I64, 7);
    output.writeI64(this.insertions);
    output.writeFieldEnd();
  }
  if (this.inverted !== null && this.inverted !== undefined) {
    output.writeFieldBegin('inverted', Thrift.Type.BOOL, 8);
    output.writeBool(this.inverted);
    output.writeFieldEnd();
  }
  if (this.mutated_invariant !== null && this.mutated_invariant !== undefined) {
    output.writeFieldBegin('mutated_invariant', Thrift.Type.BOOL, 9);
    output.writeBool(this.mutated_invariant);
    output.writeFieldEnd();
  }
  if (this.out_frame_indel !== null && this.out_frame_indel !== undefined) {
    output.writeFieldBegin('out_frame_indel', Thrift.Type.BOOL, 10);
    output.writeBool(this.out_frame_indel);
    output.writeFieldEnd();
  }
  if (this.out_frame_vdj !== null && this.out_frame_vdj !== undefined) {
    output.writeFieldBegin('out_frame_vdj', Thrift.Type.BOOL, 11);
    output.writeBool(this.out_frame_vdj);
    output.writeFieldEnd();
  }
  if (this.read_len !== null && this.read_len !== undefined) {
    output.writeFieldBegin('read_len', Thrift.Type.I64, 12);
    output.writeI64(this.read_len);
    output.writeFieldEnd();
  }
  if (this.read_pos0 !== null && this.read_pos0 !== undefined) {
    output.writeFieldBegin('read_pos0', Thrift.Type.I64, 13);
    output.writeI64(this.read_pos0);
    output.writeFieldEnd();
  }
  if (this.score !== null && this.score !== undefined) {
    output.writeFieldBegin('score', Thrift.Type.I64, 14);
    output.writeI64(this.score);
    output.writeFieldEnd();
  }
  if (this.segment_match_id !== null && this.segment_match_id !== undefined) {
    output.writeFieldBegin('segment_match_id', Thrift.Type.I64, 15);
    output.writeI64(this.segment_match_id);
    output.writeFieldEnd();
  }
  if (this.stop_codon !== null && this.stop_codon !== undefined) {
    output.writeFieldBegin('stop_codon', Thrift.Type.BOOL, 16);
    output.writeBool(this.stop_codon);
    output.writeFieldEnd();
  }
  if (this.substitutions !== null && this.substitutions !== undefined) {
    output.writeFieldBegin('substitutions', Thrift.Type.I64, 17);
    output.writeI64(this.substitutions);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

vdjserver.combinationType = function(args) {
  this.region = null;
  this.segments = null;
  if (args) {
    if (args.region !== undefined && args.region !== null) {
      this.region = Thrift.copyList(args.region, [vdjserver.regionType]);
    }
    if (args.segments !== undefined && args.segments !== null) {
      this.segments = Thrift.copyList(args.segments, [null]);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field segments is unset!');
    }
  }
};
vdjserver.combinationType.prototype = {};
vdjserver.combinationType.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        var _size16 = 0;
        var _rtmp320;
        this.region = [];
        var _etype19 = 0;
        _rtmp320 = input.readListBegin();
        _etype19 = _rtmp320.etype;
        _size16 = _rtmp320.size;
        for (var _i21 = 0; _i21 < _size16; ++_i21)
        {
          var elem22 = null;
          elem22 = new vdjserver.regionType();
          elem22.read(input);
          this.region.push(elem22);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size23 = 0;
        var _rtmp327;
        this.segments = [];
        var _etype26 = 0;
        _rtmp327 = input.readListBegin();
        _etype26 = _rtmp327.etype;
        _size23 = _rtmp327.size;
        for (var _i28 = 0; _i28 < _size23; ++_i28)
        {
          var elem29 = null;
          elem29 = input.readI64().value;
          this.segments.push(elem29);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

vdjserver.combinationType.prototype.write = function(output) {
  output.writeStructBegin('combinationType');
  if (this.region !== null && this.region !== undefined) {
    output.writeFieldBegin('region', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.STRUCT, this.region.length);
    for (var iter30 in this.region)
    {
      if (this.region.hasOwnProperty(iter30))
      {
        iter30 = this.region[iter30];
        iter30.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.segments !== null && this.segments !== undefined) {
    output.writeFieldBegin('segments', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.I64, this.segments.length);
    for (var iter31 in this.segments)
    {
      if (this.segments.hasOwnProperty(iter31))
      {
        iter31 = this.segments[iter31];
        output.writeI64(iter31);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

vdjserver.vdj_alignmentType = function(args) {
  this.combination = null;
  this.segment_match = null;
  if (args) {
    if (args.combination !== undefined && args.combination !== null) {
      this.combination = Thrift.copyList(args.combination, [vdjserver.combinationType]);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field combination is unset!');
    }
    if (args.segment_match !== undefined && args.segment_match !== null) {
      this.segment_match = Thrift.copyList(args.segment_match, [vdjserver.segment_matchType]);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field segment_match is unset!');
    }
  }
};
vdjserver.vdj_alignmentType.prototype = {};
vdjserver.vdj_alignmentType.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        var _size32 = 0;
        var _rtmp336;
        this.combination = [];
        var _etype35 = 0;
        _rtmp336 = input.readListBegin();
        _etype35 = _rtmp336.etype;
        _size32 = _rtmp336.size;
        for (var _i37 = 0; _i37 < _size32; ++_i37)
        {
          var elem38 = null;
          elem38 = new vdjserver.combinationType();
          elem38.read(input);
          this.combination.push(elem38);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size39 = 0;
        var _rtmp343;
        this.segment_match = [];
        var _etype42 = 0;
        _rtmp343 = input.readListBegin();
        _etype42 = _rtmp343.etype;
        _size39 = _rtmp343.size;
        for (var _i44 = 0; _i44 < _size39; ++_i44)
        {
          var elem45 = null;
          elem45 = new vdjserver.segment_matchType();
          elem45.read(input);
          this.segment_match.push(elem45);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

vdjserver.vdj_alignmentType.prototype.write = function(output) {
  output.writeStructBegin('vdj_alignmentType');
  if (this.combination !== null && this.combination !== undefined) {
    output.writeFieldBegin('combination', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.STRUCT, this.combination.length);
    for (var iter46 in this.combination)
    {
      if (this.combination.hasOwnProperty(iter46))
      {
        iter46 = this.combination[iter46];
        iter46.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.segment_match !== null && this.segment_match !== undefined) {
    output.writeFieldBegin('segment_match', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRUCT, this.segment_match.length);
    for (var iter47 in this.segment_match)
    {
      if (this.segment_match.hasOwnProperty(iter47))
      {
        iter47 = this.segment_match[iter47];
        iter47.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

vdjserver.readType = function(args) {
  this.read_id = null;
  this.vdj_alignment = null;
  if (args) {
    if (args.read_id !== undefined && args.read_id !== null) {
      this.read_id = args.read_id;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field read_id is unset!');
    }
    if (args.vdj_alignment !== undefined && args.vdj_alignment !== null) {
      this.vdj_alignment = new vdjserver.vdj_alignmentType(args.vdj_alignment);
    }
  }
};
vdjserver.readType.prototype = {};
vdjserver.readType.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.read_id = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.vdj_alignment = new vdjserver.vdj_alignmentType();
        this.vdj_alignment.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

vdjserver.readType.prototype.write = function(output) {
  output.writeStructBegin('readType');
  if (this.read_id !== null && this.read_id !== undefined) {
    output.writeFieldBegin('read_id', Thrift.Type.STRING, 1);
    output.writeString(this.read_id);
    output.writeFieldEnd();
  }
  if (this.vdj_alignment !== null && this.vdj_alignment !== undefined) {
    output.writeFieldBegin('vdj_alignment', Thrift.Type.STRUCT, 2);
    this.vdj_alignment.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

vdjserver.read_resultsType = function(args) {
  this.read = null;
  if (args) {
    if (args.read !== undefined && args.read !== null) {
      this.read = new vdjserver.readType(args.read);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field read is unset!');
    }
  }
};
vdjserver.read_resultsType.prototype = {};
vdjserver.read_resultsType.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.read = new vdjserver.readType();
        this.read.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

vdjserver.read_resultsType.prototype.write = function(output) {
  output.writeStructBegin('read_resultsType');
  if (this.read !== null && this.read !== undefined) {
    output.writeFieldBegin('read', Thrift.Type.STRUCT, 1);
    this.read.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

vdjserver.vdjmlType = function(args) {
  this.meta = null;
  this.read_results = null;
  this.version = null;
  if (args) {
    if (args.meta !== undefined && args.meta !== null) {
      this.meta = new vdjserver.metaType(args.meta);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field meta is unset!');
    }
    if (args.read_results !== undefined && args.read_results !== null) {
      this.read_results = new vdjserver.read_resultsType(args.read_results);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field read_results is unset!');
    }
    if (args.version !== undefined && args.version !== null) {
      this.version = args.version;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field version is unset!');
    }
  }
};
vdjserver.vdjmlType.prototype = {};
vdjserver.vdjmlType.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.meta = new vdjserver.metaType();
        this.meta.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.read_results = new vdjserver.read_resultsType();
        this.read_results.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.DOUBLE) {
        this.version = input.readDouble().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

vdjserver.vdjmlType.prototype.write = function(output) {
  output.writeStructBegin('vdjmlType');
  if (this.meta !== null && this.meta !== undefined) {
    output.writeFieldBegin('meta', Thrift.Type.STRUCT, 1);
    this.meta.write(output);
    output.writeFieldEnd();
  }
  if (this.read_results !== null && this.read_results !== undefined) {
    output.writeFieldBegin('read_results', Thrift.Type.STRUCT, 2);
    this.read_results.write(output);
    output.writeFieldEnd();
  }
  if (this.version !== null && this.version !== undefined) {
    output.writeFieldBegin('version', Thrift.Type.DOUBLE, 3);
    output.writeDouble(this.version);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

